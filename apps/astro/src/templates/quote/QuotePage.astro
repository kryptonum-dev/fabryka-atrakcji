---
import { getLangFromPath, type Language } from '@/src/global/languages'
import QuoteCartLayout from '@/src/layouts/QuoteCartLayout.astro'
import metadataFetch from '@/src/utils/metadata.fetch'
import sanityFetch from '@/src/utils/sanity.fetch'
import { PortableTextQuery, type PortableTextValue } from '@/src/components/ui/portable-text'
import AdditionalInfoBlock from '@/src/components/cart/AdditionalInfoBlock.astro'
import { getParticipantsText } from '@/src/utils/get-participants-text'
import { formatDateWithShortcut } from '@/src/utils/format-date'
import Switch from '@/src/components/ui/Switch.astro'
import QuoteAccordion from '@/src/components/cart/QuoteAccordion.astro'

type AddonType = {
  name: string
  count: number
  pricing: {
    totalPrice: number
    nettoTotalPrice: number
    pricingModel?: 'fixed' | 'per_unit' | 'threshold' | 'individual'
    isTransport?: boolean
  }
}

type HotelType = {
  name: string
  slug: string
  maxPeople: number
  pricing: {
    finalPrice: number
    nettoFinalPrice: number
    participantCount: number
    exceedsMaxPeople: boolean
  }
  addons?: AddonType[]
}

type ActivityType = {
  name: string
  slug: string
  participantsCount: {
    min: number
    max: number
  }
  pricing: {
    finalPrice: number
    nettoFinalPrice: number
    participantCount: number
    exceedsMaxPeople: boolean
    belowMinPeople: boolean
  }
  addons?: AddonType[]
}

type TransportType = {
  distance: number
  pricing: {
    basePrice: number
    distancePrice: number
    totalPrice: number
    nettoTotalPrice: number
    pricePerKm: number
  }
  transportAddressNotFound?: boolean
  noTransportAddress?: boolean
  hotelNoAddress?: boolean
  hotelAddressNotFound?: boolean
  bothAddressesNotFound?: boolean
  activityNoAddress?: boolean
}

type Props = NonNullable<Awaited<ReturnType<typeof fetchData>>> & { quote: QuoteItemType }

export type QuoteItemType = {
  quoteId: string
  language: string
  participantCount: number
  createdAt: string
  selectedDates: Array<{ start: string; end: string }>
  items: Array<{
    _type: string
    _key: string
    type: 'hotel' | 'activity'
    totalPrice: number
    totalNettoPrice: number
    hotels?: HotelType[]
    activities?: ActivityType[]
    transport?: TransportType
    extras?: AddonType[]
  }>
}

// Fetch quote item by ID
export async function fetchQuoteItem(quoteId: string, lang: Language) {
  // Fetch specific quote based on ID
  const quoteData = await sanityFetch<QuoteItemType>({
    query: `
      *[_type == "Quotes_Collection" && quoteId == $quoteId][0] {
        quoteId,
        language,
        participantCount,
        createdAt,
        selectedDates[] {
          start,
          end
        },
        items[] {
          _type,
          _key,
          type,
          totalPrice,
          totalNettoPrice,
          hotels[] {
            name,
            slug,
            maxPeople,
            pricing {
              finalPrice,
              nettoFinalPrice,
              participantCount,
              exceedsMaxPeople
            },
            addons[] {
              name,
              count,
              pricing {
                totalPrice,
                nettoTotalPrice,
                pricingModel,
                isTransport
              }
            }
          },
          activities[] {
            name,
            slug,
            participantsCount {
              min,
              max
            },
            pricing {
              finalPrice,
              nettoFinalPrice,
              participantCount,
              exceedsMaxPeople,
              belowMinPeople
            },
            addons[] {
              name,
              count,
              pricing {
                totalPrice,
                nettoTotalPrice,
                pricingModel,
                isTransport
              }
            }
          },
          transport {
            distance,
            pricing {
              basePrice,
              distancePrice,
              totalPrice,
              nettoTotalPrice,
              pricePerKm
            },
            transportAddressNotFound,
            noTransportAddress,
            hotelNoAddress,
            hotelAddressNotFound,
            bothAddressesNotFound,
            activityNoAddress
          },
          extras[] {
            name,
            count,
            pricing {
              totalPrice,
              nettoTotalPrice,
              pricingModel,
              isTransport
            }
          }
        },
      }
    `,
    params: { quoteId },
  })

  if (!quoteData) return null

  // Ensure language matches
  if (quoteData.language !== lang) return null

  return quoteData
}

// Fetch Quote_Page content and combine with quote item data
export async function fetchData(lang: Language) {
  // Fetch Quote_Page content
  const page = await sanityFetch<{
    name: string
    additionalInfo: PortableTextValue
    slug: string
  }>({
    query: `
      *[_type == "Quote_Page" && language == $language][0] {
        name,
        "slug": slug.current,
        ${PortableTextQuery('additionalInfo')}
        seo,
      }
    `,
    params: { language: lang },
  })

  if (!page) return null

  // Fetch metadata with specific SEO from Quote_Page
  const metadata = await metadataFetch(page.slug)
  if (!metadata) return null

  // Set noindex since these are personal quote pages
  const enhancedMetadata = {
    ...metadata,
    doNotIndex: true,
  }

  return {
    metadata: enhancedMetadata,
    page,
  }
}

const lang = (getLangFromPath(Astro.url.pathname) as Language) || 'pl'
const { metadata, page, quote } = Astro.props

const translations = {
  pl: {
    back: {
      content: 'Wróć do koszyka',
      url: '/pl/koszyk',
    },
    pageTitle: 'Twoja wstępna wycena',
    priceInfo:
      'Cena bazuje na danych historycznych i może różnić się o 10-20%, zależnie od terminu, logistyki i odległości.',
    brutto: 'Brutto',
    netto: 'Netto',
    getQuoteInfo: 'Otrzymaj ostateczną wycenę nawet do',
    hours: 'h',
    formEmail: 'Email',
    formPhone: 'Telefon (opcjonalnie)',
    formPhoneHelper: 'Kontaktujemy się wyłącznie w sprawie wyceny oraz doprecyzowania szczegółów oferty',
    formAdditionalInfo: 'Dodatkowe informacje (opcjonalnie)',
    formPrivacyPolicy: 'Wyrażam zgodę na',
    formPrivacyPolicyLink: 'politykę prywatności',
    formNewsletter: 'Zapisuję się do newslettera (opcjonalnie)',
    formSubmit: 'Wyślij i otrzymaj ostateczną wycenę',
    secureData: 'Twoje dane są bezpieczne',
    quoteDelivery: 'Wycena nawet do 24 h',
    total: 'Razem',
  },
  en: {
    back: {
      content: 'Back to cart',
      url: '/en/cart',
    },
    pageTitle: 'Your preliminary quote',
    priceInfo:
      'The price is based on historical data and may vary by 10-20%, depending on the date, logistics and distance.',
    brutto: 'Gross',
    netto: 'Net',
    getQuoteInfo: 'Get a final quote within',
    hours: 'h',
    formEmail: 'Email',
    formPhone: 'Phone (optional)',
    formPhoneHelper: 'We contact you only regarding the quote and to clarify the details of the offer',
    formAdditionalInfo: 'Additional information (optional)',
    formPrivacyPolicy: 'I agree to the',
    formPrivacyPolicyLink: 'privacy policy',
    formNewsletter: 'I subscribe to the newsletter (optional)',
    formSubmit: 'Send and get final quote',
    secureData: 'Your data is secure',
    quoteDelivery: 'Quote within 24 h',
    total: 'Total',
  },
}

const t = translations[lang]
---

<QuoteCartLayout
  metadata={metadata}
  class="Quote"
  backLink={{
    text: t.back.content,
    url: t.back.url,
  }}
>
  <div class="quote-container">
    <h1 class="title">{t.pageTitle}</h1>
    <AdditionalInfoBlock additionalInfo={page.additionalInfo} />
    <div class="quote-details">
      <div class="participants">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none"
          ><path
            fill="#F67258"
            d="M10.335 5a2.333 2.333 0 1 1-4.667 0 2.333 2.333 0 0 1 4.667 0ZM12 11c0 1.289-1.79 2.333-4 2.333S4 12.29 4 11c0-1.289 1.79-2.333 4-2.333S12 9.71 12 11ZM4.747 3.333c.118 0 .234.012.345.034A3.318 3.318 0 0 0 4.665 5c0 .579.148 1.123.407 1.598-.105.02-.214.03-.325.03-.943 0-1.708-.738-1.708-1.648 0-.91.765-1.647 1.708-1.647ZM3.63 12.657C3.252 12.205 3 11.65 3 11c0-.63.237-1.17.597-1.616-1.27.099-2.264.793-2.264 1.636 0 .85 1.012 1.55 2.298 1.637ZM11.333 5c0 .579-.148 1.123-.407 1.598.105.02.214.03.326.03.942 0 1.707-.738 1.707-1.648 0-.91-.764-1.647-1.707-1.647-.119 0-.234.012-.346.034.272.483.427 1.04.427 1.633ZM12.368 12.657c1.287-.088 2.298-.787 2.298-1.637 0-.842-.994-1.537-2.264-1.636.36.445.598.986.598 1.616 0 .65-.253 1.205-.632 1.657Z"
          ></path></svg
        >
        <span>
          {quote.participantCount}&nbsp;
          {getParticipantsText(quote.participantCount, lang)}
        </span>
      </div>
      <div class="dates">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
          <path
            fill="#F67258"
            d="M14.665 9.583V8.25c0-.56 0-1.056-.008-1.5H1.34c-.009.444-.009.94-.009 1.5v1.333c0 2.514 0 3.772.781 4.553.781.78 2.038.78 4.552.78h2.667c2.514 0 3.771 0 4.552-.78.781-.781.781-2.038.781-4.553ZM5.165 1.917a.5.5 0 1 0-1 0V2.97c-.96.076-1.59.265-2.052.728-.463.463-.651 1.092-.728 2.052h13.228c-.077-.96-.266-1.59-.729-2.052-.463-.463-1.092-.652-2.052-.728V1.917a.5.5 0 1 0-1 0v1.008c-.444-.008-.94-.008-1.5-.008H6.665c-.559 0-1.056 0-1.5.008V1.917Z"
          ></path>
        </svg>
        <div class="dates-wrapper">
          {
            quote.selectedDates.length === 1 ? (
              <span class="single-date">
                {formatDateWithShortcut(quote.selectedDates[0].start, lang)} -{' '}
                {formatDateWithShortcut(quote.selectedDates[0].end, lang)}
              </span>
            ) : (
              <div class="multiple-dates">
                <span class="visible-date">
                  {formatDateWithShortcut(quote.selectedDates[0].start, lang)} -{' '}
                  {formatDateWithShortcut(quote.selectedDates[0].end, lang)}
                  <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
                      <path
                        stroke="#600D2A"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="1.25"
                        d="m4 6.25 4 4 4-4"
                      />
                    </svg>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
                      <path
                        stroke="#600D2A"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="1.25"
                        d="m4 6.25 4 4 4-4"
                      />
                    </svg>
                  </div>
                </span>
                <div class="dates-dropdown">
                  {quote.selectedDates.map((date) => (
                    <span class="dropdown-date">
                      {formatDateWithShortcut(date.start, lang)} - {formatDateWithShortcut(date.end, lang)}
                    </span>
                  ))}
                </div>
              </div>
            )
          }
        </div>
      </div>
      <div class="price-toggle">
        <span class="price-type">{t.netto}</span>
        <Switch
          size="sm"
          asLabel
          inputProps={{
            id: 'price-toggle',
            name: 'price-toggle',
            'aria-label': `${t.netto} / ${t.brutto}`,
            checked: true,
          }}
        />
        <span class="price-type">{t.brutto}</span>
      </div>
    </div>

    <div class="quote-items">
      {quote.items.map((item, index) => <QuoteAccordion item={item} index={index} lang={lang} isFirst={index === 0} />)}
    </div>
  </div>
</QuoteCartLayout>

<style lang="scss">
  .Quote {
    padding: clamp(1rem, calc(3vw / 0.48), 3rem) 0 clamp(2rem, calc(4vw / 0.48), 6rem);
    .quote-container {
      min-height: 30rem;
      padding: clamp(1rem, calc(2.75vw / 0.48), 2.75rem) 2.75rem;

      .title {
        font-variant-numeric: lining-nums proportional-nums;
        font-family: 'Neue Haas Unica', 'Neue Haas Unica Fallback', sans-serif;
        font-weight: 700;
        color: var(--primary-800, #45051c);
        font-size: var(--typography-body-2xl, 1.5rem);
        line-height: 1.25;
        letter-spacing: -0.04em;
        margin-bottom: 0.75rem;
        text-transform: none;
      }

      :global(.additional-info-block) {
        margin-bottom: clamp(0.5rem, calc(1.75vw / 0.48), 1.75rem);
      }

      .quote-details {
        display: grid;
        grid-template-columns: repeat(2, auto) 1fr;
        gap: 0.25rem clamp(0.25rem, calc(1.25vw / 0.48), 1.25rem);
        margin-bottom: clamp(1.5rem, calc(2.25vw / 0.48), 2.25rem);

        .participants {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          color: var(--primary-800, #45051c);
          font-size: var(--typography-body-m, 0.875rem);
          letter-spacing: -0.01em;
          line-height: 1.7;
        }

        .dates {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          color: var(--primary-800, #45051c);
          font-size: var(--typography-body-m, 0.875rem);
          letter-spacing: -0.01em;
          line-height: 1.7;
          position: relative;

          .dates-wrapper {
            position: relative;

            .single-date {
              display: flex;
              align-items: center;
              gap: 0.25rem;
            }

            .multiple-dates {
              position: relative;

              .visible-date {
                display: flex;
                align-items: center;
                gap: 0.25rem;
                cursor: pointer;

                .icon {
                  position: relative;
                  overflow: hidden;
                  width: 1rem;
                  height: 1rem;
                  margin-left: 0.25rem;

                  svg {
                    transition: transform 300ms var(--easing);
                    &:nth-of-type(1) {
                      position: absolute;
                      left: 50%;
                      top: 50%;
                      transform: rotate(180deg) translate(50%, 150%);
                    }

                    &:nth-of-type(2) {
                      transition: transform 250ms cubic-bezier(0.18, 0.89, 0.32, 1.2);
                    }
                  }
                }
              }

              .dates-dropdown {
                position: absolute;
                top: calc(100% + 0.5rem);
                left: 0;
                background: var(--neutral-100);
                border-radius: 0.25rem;
                padding: 0.5rem;
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
                min-width: 100%;
                box-shadow: 0px 4px 24px -8px rgba(0, 0, 0, 0.15);
                z-index: 10;
                opacity: 0;
                visibility: hidden;
                transform: translateY(-0.5rem);
                transition: all 200ms var(--easing);

                &::before {
                  content: '';
                  position: absolute;
                  top: -0.5rem;
                  left: 0;
                  width: 100%;
                  height: 0.5rem;
                  background: transparent;
                }

                .dropdown-date {
                  white-space: nowrap;
                }
              }
            }
          }

          &:hover {
            .dates-wrapper {
              .multiple-dates {
                .visible-date {
                  .icon {
                    svg {
                      &:nth-of-type(1) {
                        transform: rotate(180deg) translate(50%, 50%);
                      }

                      &:nth-of-type(2) {
                        transform: translateY(100%);
                      }
                    }
                  }
                }

                .dates-dropdown {
                  opacity: 1;
                  visibility: visible;
                  transform: translateY(0);
                }
              }
            }
          }
        }

        .price-toggle {
          display: flex;
          align-items: center;
          gap: 0.625rem;
          justify-self: flex-end;

          .price-type {
            font-size: var(--typography-body-m, 0.875rem);
            line-height: 1.7;
            letter-spacing: -0.01em;
            transition:
              text-shadow 250ms,
              color 250ms;
            text-shadow: 0 0 0 var(--primary-400);
          }

          &:has(input:checked) {
            .price-type:last-child {
              color: var(--primary-800);
              text-shadow:
                0 0 0.65px var(--primary-800),
                0 0 0.65px var(--primary-800);
            }
          }

          &:not(:has(input:checked)) {
            .price-type:first-child {
              color: var(--primary-800);
              text-shadow:
                0 0 0.65px var(--primary-800),
                0 0 0.65px var(--primary-800);
            }
          }
        }
      }

      .quote-items {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
      }
    }

    @media (max-width: 767px) {
      .quote-container {
        padding: clamp(1rem, calc(2.75vw / 0.48), 2.75rem) clamp(1rem, calc(2.75vw / 0.48), 2.75rem);
      }
    }

    @media (max-width: 469px) {
      padding-top: clamp(1rem, calc(2vw / 0.48), 3rem);

      .quote-container {
        padding: clamp(1rem, calc(1.5vw / 0.48), 1.5rem) clamp(0.5rem, calc(1vw / 0.48), 1rem);

        .quote-details {
          grid-template-columns: repeat(2, 1fr);
          row-gap: 1.25rem;

          .participants {
            grid-column: 1 / 2;
            justify-items: center;
            padding: 0.5rem 0.625rem;
            background-color: var(--neutral-300, #ede6de);
            border-radius: 0.25rem;
          }

          .dates {
            grid-column: 2 / 3;
            justify-items: center;
            padding: 0.5rem 0.625rem;
            background-color: var(--neutral-300, #ede6de);
            border-radius: 0.25rem;
          }

          .price-toggle {
            grid-column: 1 / 3;
            grid-row: 2 / 3;
            justify-self: center;
          }
        }
      }
    }
  }
</style>

<script>
  // Price toggle functionality
  const priceToggle = document.getElementById('price-toggle') as HTMLInputElement

  if (priceToggle) {
    // No need to set checked property here as it's already set in the HTML

    priceToggle.addEventListener('change', () => {
      const isBrutto = priceToggle.checked

      // Get all price elements
      const priceElements = document.querySelectorAll('.item-price, .total-price, .price')

      priceElements.forEach((element) => {
        const bruttoPrice = element.getAttribute('data-brutto-price')
        const nettoPrice = element.getAttribute('data-netto-price')

        if (bruttoPrice && nettoPrice) {
          // Format as currency
          const formatter = new Intl.NumberFormat('pl-PL', {
            style: 'currency',
            currency: 'PLN',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0,
          })

          // Display either netto or brutto based on toggle state
          if (isBrutto) {
            element.textContent = formatter.format(parseInt(bruttoPrice, 10))
          } else {
            element.textContent = formatter.format(parseInt(nettoPrice, 10))
          }
        }
      })
    })

    // Still trigger the change event to ensure initial prices are displayed correctly
    priceToggle.dispatchEvent(new Event('change'))
  }
</script>
