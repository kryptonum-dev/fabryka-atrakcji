---
import { getLangFromPath, type Language } from '@/src/global/languages'
import QuoteCartLayout from '@/src/layouts/QuoteCartLayout.astro'
import metadataFetch from '@/src/utils/metadata.fetch'
import sanityFetch from '@/src/utils/sanity.fetch'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/src/components/ui/portable-text'
import AdditionalInfoBlock from '@/src/components/cart/AdditionalInfoBlock.astro'
import { getParticipantsText } from '@/src/utils/get-participants-text'
import { formatDateWithShortcut } from '@/src/utils/format-date'
import Switch from '@/src/components/ui/Switch.astro'
import QuoteAccordion from '@/src/components/cart/QuoteAccordion.astro'
import QuoteForm from '@/src/components/cart/quoteForm'
import Loader from '@/src/components/ui/Loader.astro'
import Button from '@/src/components/ui/Button/Button'
import { getOpenHours } from '@/src/utils/get-open-hours'

type AddonType = {
  id: string
  name: string
  count: number
  itemId: string
  pricing: {
    totalPrice: number
    nettoTotalPrice: number
    pricingModel?: 'fixed' | 'per_unit' | 'threshold' | 'individual'
    isTransport?: boolean
  }
}

type GastronomyType = {
  id: string
  name: string
  count: number
  pricing: {
    totalPrice: number
    nettoTotalPrice: number
    unavailable?: boolean
    pricingNotVisible?: boolean
  }
}

type HotelType = {
  itemId: string
  id: string
  name: string
  slug: string
  maxPeople: number
  pricing: {
    finalPrice: number
    nettoFinalPrice: number
    participantCount: number
    exceedsMaxPeople: boolean
    pricingModel?: string
    pricingNotVisible?: boolean
  }
  addons?: AddonType[]
  gastronomy?: GastronomyType[]
}

type ActivityType = {
  id: string
  itemId: string
  name: string
  slug: string
  participantsCount: {
    min: number
    max: number
  }
  pricing: {
    finalPrice: number
    nettoFinalPrice: number
    participantCount: number
    exceedsMaxPeople: boolean
    belowMinPeople: boolean
  }
  addons?: AddonType[]
}

type TransportType = {
  id: string
  itemId: string
  distance: number
  pricing: {
    basePrice: number
    distancePrice: number
    totalPrice: number
    nettoTotalPrice: number
    pricePerKm: number
  }
  transportAddressNotFound?: boolean
  noTransportAddress?: boolean
  hotelNoAddress?: boolean
  hotelAddressNotFound?: boolean
  bothAddressesNotFound?: boolean
  activityNoAddress?: boolean
}

type Props = NonNullable<Awaited<ReturnType<typeof fetchData>>> & { quote: QuoteItemType }

export type QuoteItemType = {
  quoteId: string
  language: string
  participantCount: number
  createdAt: string
  selectedDates: Array<{ start: string; end: string }>
  items: Array<{
    _type: string
    _key: string
    type: 'hotel' | 'activity'
    totalPrice: number
    totalNettoPrice: number
    hotels?: HotelType[]
    activities?: ActivityType[]
    transport?: TransportType
    extras?: AddonType[]
  }>
}

// Fetch quote item by ID
export async function fetchQuoteItem(quoteId: string, lang: Language) {
  // Fetch specific quote based on ID
  const quoteData = await sanityFetch<QuoteItemType>({
    query: `
      *[_type == "Quotes_Collection" && quoteId == $quoteId][0] {
        quoteId,
        language,
        participantCount,
        createdAt,
        selectedDates[] {
          start,
          end
        },
        items[] {
          id,
          itemId,
          _type,
          _key,
          type,
          totalPrice,
          totalNettoPrice,
          hotels[] {
            id,
            itemId,
            name,
            slug,
            maxPeople,
            pricing {
              finalPrice,
              nettoFinalPrice,
              participantCount,
              exceedsMaxPeople,
              pricingModel,
              pricingNotVisible
            },
            addons[] {
              id,
              itemId,
              name,
              count,
              pricing {
                totalPrice,
                nettoTotalPrice,
                pricingModel,
                isTransport
              }
            },
            gastronomy[] {
              id,
              name,
              count,
              pricing {
                totalPrice,
                nettoTotalPrice,
                unavailable,
                pricingNotVisible
              }
            }
          },
          activities[] {
            id,
            itemId,
            name,
            slug,
            participantsCount {
              min,
              max
            },
            pricing {
              finalPrice,
              nettoFinalPrice,
              participantCount,
              exceedsMaxPeople,
              belowMinPeople
            },
            addons[] {
              id,
              itemId,
              name,
              count,
              pricing {
                totalPrice,
                nettoTotalPrice,
                pricingModel,
                isTransport
              }
            }
          },
          transport {
            id,
            itemId,
            distance,
            pricing {
              basePrice,
              distancePrice,
              totalPrice,
              nettoTotalPrice,
              pricePerKm
            },
            transportAddressNotFound,
            noTransportAddress,
            hotelNoAddress,
            hotelAddressNotFound,
            bothAddressesNotFound,
            activityNoAddress
          },
          extras[] {
            id,
            itemId,
            name,
            count,
            pricing {
              totalPrice,
              nettoTotalPrice,
              pricingModel,
              isTransport
            }
          }
        },
      }
    `,
    params: { quoteId },
  })

  if (!quoteData) return null

  // Ensure language matches
  if (quoteData.language !== lang) return null

  return quoteData
}

// Fetch Quote_Page content and combine with quote item data
export async function fetchData(lang: Language) {
  // Fetch Quote_Page content
  const page = await sanityFetch<{
    name: string
    additionalInfo: PortableTextValue
    slug: string
    quoteRecipients: string[]
    form: {
      heading: PortableTextValue
      mailerliteGroupId?: string
      error: {
        heading: PortableTextValue
        paragraph: PortableTextValue
        button: string
      }
    }
  }>({
    query: `
      *[_type == "Quote_Page" && language == $language][0] {
        name,
        "slug": slug.current,
        ${PortableTextQuery('additionalInfo')}
        quoteRecipients,
        form{
          ${PortableTextQuery('heading')}
          mailerliteGroupId,
          error{
            ${PortableTextQuery('heading')}
            ${PortableTextQuery('paragraph')}
            button,
          },
        },
        seo,
      }
    `,
    params: { language: lang },
  })

  if (!page) return null

  // Fetch metadata with specific SEO from Quote_Page
  const metadata = await metadataFetch(page.slug)
  if (!metadata) return null

  // Set noindex since these are personal quote pages
  const enhancedMetadata = {
    ...metadata,
    doNotIndex: true,
  }

  const global = await sanityFetch<{
    email: string
    tel: string
    openHours: {
      from: string
      to: string
      closedWeekends: boolean
    }
  }>({
    query: `*[_type == "global" && language == $language][0]{
      email,
      tel,
      openHours {
        from,
        to,
        closedWeekends,
      }
    }`,
    params: {
      language: lang,
    },
  })

  return {
    metadata: enhancedMetadata,
    page,
    global,
  }
}

const lang = (getLangFromPath(Astro.url.pathname) as Language) || 'pl'
const { metadata, page, quote, global } = Astro.props

const translations = {
  pl: {
    back: {
      content: 'Wróć do koszyka',
      url: '/pl/koszyk/',
    },
    pageTitle: 'Twoja wstępna wycena',
    priceInfo:
      'Cena bazuje na danych historycznych i może różnić się o 10-20%, zależnie od terminu, logistyki i odległości.',
    brutto: 'Brutto',
    netto: 'Netto',
    total: 'Razem',
    form: {
      email: 'Email',
      phone: 'Telefon (opcjonalnie)',
      phoneHelper: 'Kontaktujemy się wyłącznie w sprawie wyceny oraz doprecyzowania szczegółów oferty',
      phonePlaceholder: 'Wprowadź numer telefonu',
      additionalInfo: 'Dodatkowe informacje (opcjonalnie)',
      combined: 'Akceptuję',
      combinedMiddle: 'i',
      privacyPolicyUrl: '/pl/polityka-prywatnosci/',
      privacyPolicySecond: 'Politykę Prywatności',
      termsUrl: '/pl/regulamin/',
      termsSecond: 'Regulamin',
      newsletter: 'Zapisuję się do newslettera (opcjonalnie)',
      submit: 'Wyślij i otrzymaj ostateczną wycenę',
      secureData: 'Twoje dane są bezpieczne',
      quoteDelivery: 'Wycena nawet do 24 h',
      // Validation messages
      emailRequired: 'Email jest wymagany',
      emailInvalid: 'Wprowadź poprawny adres email',
      phoneInvalid: 'Wprowadź poprawny numer telefonu (9 cyfr)',
      combinedRequired: 'Akceptacja regulaminu i polityki prywatności jest wymagana',

      // Thank you page URL
      thankYouUrl: '/pl/strona-podziekowania/',
      error: {
        quoteNumberHeading: 'Numer zamówienia',
        quoteNumberParagraph: 'Podaj go telefonicznie lub mailowo',
        phone: 'Skontaktuj się telefonicznie',
        email: 'Napisz do nas',
      },
    },
  },
  en: {
    back: {
      content: 'Back to cart',
      url: '/en/cart/',
    },
    pageTitle: 'Your preliminary quote',
    priceInfo:
      'The price is based on historical data and may vary by 10-20%, depending on the date, logistics and distance.',
    brutto: 'Gross',
    netto: 'Net',
    total: 'Total',
    form: {
      email: 'Email',
      phone: 'Phone (optional)',
      phoneHelper: 'We contact you only regarding the quote and to clarify the details of the offer',
      phonePlaceholder: 'Enter phone number',
      additionalInfo: 'Additional information (optional)',
      combined: 'I accept the',
      combinedMiddle: 'and',
      privacyPolicyUrl: '/en/privacy-policy/',
      privacyPolicySecond: 'Privacy Policy',
      termsUrl: '/en/terms-and-conditions/',
      termsSecond: 'Terms and Conditions',
      newsletter: 'I subscribe to the newsletter (optional)',
      submit: 'Send and get final quote',
      secureData: 'Your data is secure',
      quoteDelivery: 'Quote within 24 h',
      // Validation messages
      emailRequired: 'Email is required',
      emailInvalid: 'Please enter a valid email address',
      phoneInvalid: 'Please enter a valid phone number (9 digits)',
      combinedRequired: 'Terms and Conditions and Privacy Policy acceptance is required',

      // Thank you page URL
      thankYouUrl: '/en/thank-you/',
      error: {
        quoteNumberHeading: 'Order number',
        quoteNumberParagraph: 'Provide it by phone or email',
        phone: 'Contact us by phone',
        email: 'Contact us by email',
      },
    },
  },
}

const t = translations[lang]
---

<QuoteCartLayout
  minify
  metadata={metadata}
  class="Quote"
  backLink={{
    text: t.back.content,
    url: t.back.url,
  }}>
  <div class="quote-container">
    <div class="state state-content" style="">
      <h1 class="title">{t.pageTitle}</h1>
      <AdditionalInfoBlock additionalInfo={page.additionalInfo} />
      <div class="quote-details">
        <div class="participants">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
            <path
              fill="#F67258"
              d="M10.335 5a2.333 2.333 0 1 1-4.667 0 2.333 2.333 0 0 1 4.667 0ZM12 11c0 1.289-1.79 2.333-4 2.333S4 12.29 4 11c0-1.289 1.79-2.333 4-2.333S12 9.71 12 11ZM4.747 3.333c.118 0 .234.012.345.034A3.318 3.318 0 0 0 4.665 5c0 .579.148 1.123.407 1.598-.105.02-.214.03-.325.03-.943 0-1.708-.738-1.708-1.648 0-.91.765-1.647 1.708-1.647ZM3.63 12.657C3.252 12.205 3 11.65 3 11c0-.63.237-1.17.597-1.616-1.27.099-2.264.793-2.264 1.636 0 .85 1.012 1.55 2.298 1.637ZM11.333 5c0 .579-.148 1.123-.407 1.598.105.02.214.03.326.03.942 0 1.707-.738 1.707-1.648 0-.91-.764-1.647-1.707-1.647-.119 0-.234.012-.346.034.272.483.427 1.04.427 1.633ZM12.368 12.657c1.287-.088 2.298-.787 2.298-1.637 0-.842-.994-1.537-2.264-1.636.36.445.598.986.598 1.616 0 .65-.253 1.205-.632 1.657Z">
            </path>
          </svg>
          <span>
            {quote.participantCount}&nbsp;
            {getParticipantsText(quote.participantCount, lang)}
          </span>
        </div>
        <div class="dates">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
            <path
              fill="#F67258"
              d="M14.665 9.583V8.25c0-.56 0-1.056-.008-1.5H1.34c-.009.444-.009.94-.009 1.5v1.333c0 2.514 0 3.772.781 4.553.781.78 2.038.78 4.552.78h2.667c2.514 0 3.771 0 4.552-.78.781-.781.781-2.038.781-4.553ZM5.165 1.917a.5.5 0 1 0-1 0V2.97c-.96.076-1.59.265-2.052.728-.463.463-.651 1.092-.728 2.052h13.228c-.077-.96-.266-1.59-.729-2.052-.463-.463-1.092-.652-2.052-.728V1.917a.5.5 0 1 0-1 0v1.008c-.444-.008-.94-.008-1.5-.008H6.665c-.559 0-1.056 0-1.5.008V1.917Z">
            </path>
          </svg>
          <div class="dates-wrapper">
            {
              quote.selectedDates.length === 1 ? (
                <span class="single-date">
                  {formatDateWithShortcut(quote.selectedDates[0].start, lang)} -{' '}
                  {formatDateWithShortcut(quote.selectedDates[0].end, lang)}
                </span>
              ) : (
                <div class="multiple-dates">
                  <span class="visible-date">
                    {formatDateWithShortcut(quote.selectedDates[0].start, lang)} -{' '}
                    {formatDateWithShortcut(quote.selectedDates[0].end, lang)}
                    <div class="icon">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
                        <path
                          stroke="#600D2A"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="1.25"
                          d="m4 6.25 4 4 4-4"
                        />
                      </svg>
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
                        <path
                          stroke="#600D2A"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="1.25"
                          d="m4 6.25 4 4 4-4"
                        />
                      </svg>
                    </div>
                  </span>
                  <div class="dates-dropdown">
                    {quote.selectedDates.map((date) => (
                      <span class="dropdown-date">
                        {formatDateWithShortcut(date.start, lang)} - {formatDateWithShortcut(date.end, lang)}
                      </span>
                    ))}
                  </div>
                </div>
              )
            }
          </div>
        </div>
        <div class="price-toggle">
          <span class="price-type">{t.brutto}</span>
          <Switch
            size="sm"
            asLabel
            inputProps={{
              id: 'price-toggle',
              name: 'price-toggle',
              'aria-label': `${t.netto} / ${t.brutto}`,
              checked: true,
            }}
          />
          <span class="price-type">{t.netto}</span>
        </div>
      </div>

      <div class="quote-items">
        {
          quote.items.map((item, index) => (
            <QuoteAccordion item={item} index={index} lang={lang} isFirst={index === 0} />
          ))
        }
      </div>

      <!-- New form section -->
      <div class="form-section">
        <PortableText value={page.form.heading} heading="h2" class="form-heading" />
        <QuoteForm
          client:load
          translations={t.form as any}
          quoteId={quote.quoteId}
          mailerliteGroupId={page.form.mailerliteGroupId}
          quoteRecipients={page.quoteRecipients}
          quote={quote}
        />
        <div class="form-benefits">
          <div class="form-benefit">
            <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 17 17" fill="none">
              <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M2.75168 3.88828C2.5 4.24686 2.5 5.31272 2.5 7.44445V8.49425C2.5 12.253 5.32597 14.077 7.09904 14.8515C7.58001 15.0616 7.82049 15.1667 8.5 15.1667C9.17951 15.1667 9.41999 15.0616 9.90096 14.8515C11.674 14.077 14.5 12.253 14.5 8.49425V7.44445C14.5 5.31272 14.5 4.24686 14.2483 3.88828C13.9966 3.5297 12.9945 3.18665 10.9901 2.50054L10.6082 2.36982C9.56335 2.01217 9.04093 1.83334 8.5 1.83334C7.95907 1.83334 7.43666 2.01217 6.39182 2.36982L6.00994 2.50054C4.00555 3.18665 3.00335 3.5297 2.75168 3.88828ZM10.5396 7.49968C10.7236 7.2937 10.7057 6.97762 10.4997 6.79371C10.2937 6.60979 9.97761 6.62768 9.7937 6.83367L7.78571 9.08261L7.2063 8.43367C7.02239 8.22768 6.70631 8.20979 6.50033 8.39371C6.29434 8.57762 6.27645 8.8937 6.46036 9.09968L7.41275 10.1664C7.50761 10.2726 7.64328 10.3333 7.78571 10.3333C7.92815 10.3333 8.06382 10.2726 8.15868 10.1664L10.5396 7.49968Z"
                fill="#F67258">
              </path>
            </svg>
            <span>{t.form.secureData}</span>
          </div>
          <div class="form-benefit">
            <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="none">
              <path
                fill="#F67258"
                fill-rule="evenodd"
                d="M3.964 2.7c.402-.867 1.78-.867 4.535-.867s4.133 0 4.534.866c.035.075.064.152.087.232.273.925-.701 1.996-2.65 4.14L9.165 8.5l1.306 1.429c1.948 2.144 2.922 3.216 2.65 4.14-.024.08-.053.157-.088.232-.401.866-1.779.866-4.534.866-2.756 0-4.133 0-4.535-.866a1.683 1.683 0 0 1-.087-.232c-.273-.925.702-1.996 2.65-4.14L7.832 8.5 6.527 7.071c-1.948-2.144-2.923-3.215-2.65-4.14.024-.08.053-.157.087-.232Zm3.201 9.633a.5.5 0 0 0 0 1h2.667a.5.5 0 1 0 0-1H7.165Zm-.5-8.166a.5.5 0 0 1 .5-.5h2.667a.5.5 0 1 1 0 1H7.165a.5.5 0 0 1-.5-.5Z"
                clip-rule="evenodd">
              </path>
            </svg>
            <span>{t.form.quoteDelivery}</span>
          </div>
        </div>
      </div>
    </div>

    <div class="state state-loading" style="display: none;">
      <Loader />
    </div>

    <div class="state state-error" style="display: none;">
      <header class="header">
        <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="none">
          <path
            fill="#FF763C"
            d="m15.903 23.884-.633 1.069c-.563.952-1.971.952-2.535 0l-.633-1.069c-.49-.828-.736-1.243-1.13-1.472-.393-.229-.89-.238-1.882-.255-1.464-.025-2.383-.115-3.153-.434a5.834 5.834 0 0 1-3.157-3.157c-.444-1.072-.444-2.43-.444-5.149v-1.166c0-3.82 0-5.729.86-7.132A5.833 5.833 0 0 1 5.12 3.194c1.403-.86 3.313-.86 7.132-.86h3.5c3.819 0 5.728 0 7.13.86a5.833 5.833 0 0 1 1.927 1.925c.86 1.403.86 3.313.86 7.132v1.166c0 2.718 0 4.077-.445 5.15a5.833 5.833 0 0 1-3.157 3.156c-.77.32-1.689.41-3.153.434-.992.017-1.488.026-1.882.255-.394.23-.64.644-1.13 1.473Z">
          </path><path stroke="#F5F1EC" stroke-linecap="round" stroke-width="1.5" d="m16 10-4 4m0-4 4 4"></path>
        </svg>
        <PortableText value={page.form.error.heading} class="heading" />
        <PortableText value={page.form.error.paragraph} class="paragraph" />
      </header>
      <Button id="return-to-form">{page.form.error.button}</Button>
      <div class="contact-list">
        <div class="quote-id item">
          <div class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="none">
              <path fill="#F67258" d="m12.245 9.458-.625 2.083H8.758l.625-2.083h2.862Z"></path><path
                fill="#F67258"
                fill-rule="evenodd"
                d="M10.501 2.166a8.333 8.333 0 1 0 0 16.667 8.333 8.333 0 0 0 0-16.667Zm-.653 3.568c.33.1.518.448.419.778l-.509 1.696h2.862l.616-2.055a.625.625 0 1 1 1.197.36l-.508 1.695H15.5a.625.625 0 1 1 0 1.25H13.55l-.625 2.083h1.743a.625.625 0 0 1 0 1.25H12.55l-.617 2.055a.625.625 0 0 1-1.197-.36l.509-1.695H8.383l-.616 2.055a.625.625 0 1 1-1.198-.36l.509-1.695H5.501a.625.625 0 1 1 0-1.25h1.952l.625-2.083H6.335a.625.625 0 0 1 0-1.25h2.118l.616-2.055c.1-.33.448-.518.779-.419Z"
                clip-rule="evenodd">
              </path>
            </svg>
          </div>
          <span>{t.form.error.quoteNumberHeading}</span>
          <span>{t.form.error.quoteNumberParagraph}</span>
          <strong>{quote.quoteId}</strong>
        </div>
        <a href={`tel:${global.tel}`} class="item phone">
          <div class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none">
              <path
                fill="#F67258"
                d="m13.796 10.755-.38.377s-.902.897-3.365-1.552c-2.462-2.448-1.56-3.345-1.56-3.345l.239-.238c.589-.585.644-1.525.13-2.211L7.81 2.382c-.636-.85-1.865-.962-2.593-.237l-1.308 1.3c-.362.36-.604.826-.575 1.342.076 1.322.674 4.166 4.01 7.484 3.54 3.52 6.86 3.66 8.218 3.533.43-.04.803-.26 1.104-.558l1.184-1.178c.8-.794.574-2.156-.449-2.712l-1.592-.865c-.67-.365-1.489-.258-2.013.264Z">
              </path>
            </svg>
          </div>
          <span>{t.form.error.phone}</span>
          <strong>+48 {global.tel}</strong>
          <span>{getOpenHours(global.openHours)}</span>
        </a>
        <a href={`mailto:${global.email}`} class="item mail">
          <div class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="21" fill="none">
              <path
                fill="#F67258"
                d="M7.918 17.166v1.667a.625.625 0 1 0 1.25 0v-1.667h-1.25ZM12.501 17.166h-1.25v1.667a.625.625 0 1 0 1.25 0v-1.667Z">
              </path><path
                fill="#F67258"
                fill-rule="evenodd"
                d="m14.486 5.987.213-.043c.347-.07.705-.036 1.034.095a2.93 2.93 0 0 0 1.804.124l.051-.013c.436-.11.744-.515.744-.981V3.393c0-.614-.553-1.067-1.129-.923-.33.082-.677.058-.994-.068l-.06-.025a2.931 2.931 0 0 0-1.668-.154l-.374.075c-.45.09-.775.499-.775.975v5.794c0 .33.258.599.577.599a.588.588 0 0 0 .577-.6v-3.08Z"
                clip-rule="evenodd">
              </path><path
                fill="#F67258"
                d="M12.085 5.5v3.567c0 .976.773 1.85 1.827 1.85 1.053 0 1.826-.874 1.826-1.85v-1.71c.635.17 1.3.19 1.947.055.41.702.65 1.55.65 2.463v5.146c0 1.185-.824 2.146-1.84 2.146h-6.077V9.875c0-1.692-.693-3.312-1.848-4.375h3.515Z">
              </path><path
                fill="#F67258"
                fill-rule="evenodd"
                d="M1.668 9.875c0-2.416 1.679-4.375 3.75-4.375 2.071 0 3.75 1.959 3.75 4.375v7.292h-5.64c-1.027 0-1.86-.972-1.86-2.17V9.874Zm1.875 3.958c0-.345.28-.625.625-.625h2.5a.625.625 0 0 1 0 1.25h-2.5a.625.625 0 0 1-.625-.625Z"
                clip-rule="evenodd">
              </path>
            </svg>
          </div>
          <span>{t.form.error.email}</span>
          <strong>{global.email}</strong>
        </a>
      </div>
    </div>
  </div>
</QuoteCartLayout>

<style lang="scss">
  .Quote {
    padding: clamp(1rem, calc(3vw / 0.48), 3rem) 0 clamp(2rem, calc(4vw / 0.48), 6rem);
    .quote-container {
      min-height: 30rem;
      padding: clamp(1rem, calc(2.75vw / 0.48), 2.75rem) 2.75rem;
      display: flex;
      flex-direction: column;
      justify-content: center;

      // State container styles
      .state {
        width: 100%;

        &.state-loading {
          display: flex;
          justify-content: center;
          align-items: center;
          min-height: 20rem;

          :global([role='status']) {
            background-color: transparent;
            backdrop-filter: none;
          }
        }

        &.state-error {
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          justify-content: space-between;
          column-gap: clamp(2rem, calc(3vw / 0.48), 4rem);
          animation: fade-in-default 250ms forwards;
          animation-play-state: paused;
          .header {
            display: grid;
            grid-template-columns: auto 1fr;
            justify-items: start;
            column-gap: 1rem;
            // max-width: 22.15625rem;
            grid-row: 1 / 2;
            grid-column: 1/2;
            margin-bottom: clamp(1.5rem, calc(2.5vw / 0.48), 3rem);

            :global(svg) {
              grid-row: 1 / 3;
              align-self: start;
              margin-top: 3px;
            }

            .heading {
              margin-bottom: 0.75rem;
              color: var(--primary-800, #45051c);
              font-size: var(--typography-body-2xl, 1.5rem);
              font-weight: 700;
              line-height: 1.25;
              letter-spacing: -0.04em;
            }

            .paragraph {
            }
          }

          :global(> button) {
            // max-width: 22.15625rem;
            grid-row: 2 / 3;
            grid-column: 1 / 2;
            width: 100%;
            max-width: 100%;
            :global(span) {
              margin: 0 auto;
              padding-right: 1.75rem;
            }
          }

          .contact-list {
            grid-row: 1 / 3;
            grid-column: 2 / 3;
            display: flex;
            flex-direction: column;
            gap: 0.375rem;

            .item {
              padding: clamp(0.75rem, calc(1.25vw / 0.48), 1.25rem) clamp(0.5rem, calc(1.25vw / 0.48), 1.25rem);
              background-color: var(--neutral-100, #faf7f7);
              display: grid;
              column-gap: 0.75rem;
              font-size: var(--typography-body-m, 0.875rem);
              line-height: 1.6;
              letter-spacing: -0.01em;

              .icon {
                width: 2.25rem;
                height: 2.25rem;
                background-color: var(--neutral-200, #f5f1ec);
                border-radius: 50%;
                display: grid;
                place-items: center;
                grid-column: 1/2;
                align-self: start;
              }

              :global(strong) {
                color: var(--primary-800, #45051c);
                font-size: var(--typography-body-m, 0.875rem);
                font-weight: 700;
                line-height: 1.6;
              }
            }

            .phone,
            .mail {
              .icon {
                transition: transform 350ms var(--easing);

                svg {
                  transition: transform 350ms var(--easing);
                }
              }
              :global(strong) {
                position: relative;
                max-width: fit-content;

                &::before {
                  position: absolute;
                  bottom: 0;
                  left: 0;
                  display: block;
                  width: 100%;
                  height: 4%;
                  background: var(--primary-400, #74535e);
                  transform: scaleX(0);
                  transform-origin: left;
                  transition: transform 350ms var(--easing);
                  content: '';
                }
              }
              &:hover {
                :global(strong)::before {
                  transform: scaleX(1);
                  transition: transform 350ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
                }
              }
            }

            .quote-id {
              grid-template-columns: auto auto 1fr;
              padding-top: 0.625rem;
              padding-bottom: 0.625rem;
              position: relative;

              &::before {
                content: '';
                position: absolute;
                inset: 0;
                border: 1px dashed var(--neutral-300, #ede6de);
              }

              .icon {
                grid-row: 1/3;
                align-self: center;
              }

              :global(span) {
                &:first-of-type {
                  color: var(--primary-800, #45051c);
                  grid-column: 2/3;
                  grid-row: 1/2;
                }

                &:last-of-type {
                  font-size: var(--typography-body-s, 0.75rem);
                  line-height: 1.6;
                  grid-column: 2/3;
                  grid-row: 2/3;
                }
              }

              :global(strong) {
                grid-column: 3/4;
                grid-row: 1/3;
                align-self: center;
                justify-self: flex-end;
              }
            }

            .phone {
              justify-content: start;

              .icon {
                grid-row: 1/4;
              }

              :global(span) {
                &:first-of-type {
                  grid-row: 1/2;
                  grid-column: 2/3;
                }

                &:last-of-type {
                  grid-row: 3/4;
                  grid-column: 2/3;
                }
              }

              :global(strong) {
                grid-row: 2/3;
                grid-column: 2/3;
              }

              &:hover {
                .icon {
                  transform: scale(1.05);
                  svg {
                    animation: ring-low 700ms var(--easing) infinite alternate;
                  }
                }
              }

              &:active {
                .icon {
                  transform: scale(1.1);
                  svg {
                    animation: ring-high 600ms var(--easing) infinite alternate;
                  }
                }
              }
            }

            .mail {
              justify-content: start;

              .icon {
                grid-row: 1/3;
              }

              :global(strong) {
                grid-row: 2/3;
                grid-column: 2/3;
              }

              :global(span) {
                &:first-of-type {
                  grid-row: 1/2;
                  grid-column: 2/3;
                }
              }

              &:hover {
                .icon {
                  transform: scale(1.05);
                  svg {
                    animation: email-notification 1800ms var(--easing) infinite;
                  }
                }
              }

              &:active {
                .icon {
                  transform: scale(1.1);
                  svg {
                    animation: email-notification-high 1400ms var(--easing) infinite;
                  }
                }
              }
            }
          }
        }
      }

      .title {
        font-variant-numeric: lining-nums proportional-nums;
        font-family: 'Neue Haas Unica', 'Neue Haas Unica Fallback', sans-serif;
        font-weight: 700;
        color: var(--primary-800, #45051c);
        font-size: var(--typography-body-2xl, 1.5rem);
        line-height: 1.25;
        letter-spacing: -0.04em;
        margin-bottom: 0.75rem;
        text-transform: none;
      }

      :global(.additional-info-block) {
        margin-bottom: clamp(0.5rem, calc(1.75vw / 0.48), 1.75rem);
      }

      .quote-details {
        display: grid;
        grid-template-columns: repeat(2, auto) 1fr;
        gap: 0.25rem clamp(0.25rem, calc(1.25vw / 0.48), 1.25rem);
        margin-bottom: clamp(1.5rem, calc(2.25vw / 0.48), 2.25rem);

        .participants {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          color: var(--primary-800, #45051c);
          font-size: var(--typography-body-m, 0.875rem);
          letter-spacing: -0.01em;
          line-height: 1.7;
        }

        .dates {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          color: var(--primary-800, #45051c);
          font-size: var(--typography-body-m, 0.875rem);
          letter-spacing: -0.01em;
          line-height: 1.7;
          position: relative;

          .dates-wrapper {
            .single-date {
              display: flex;
              align-items: center;
              gap: 0.25rem;
            }

            .multiple-dates {
              .visible-date {
                display: flex;
                align-items: center;
                gap: 0.25rem;
                cursor: pointer;

                .icon {
                  position: relative;
                  overflow: hidden;
                  width: 1rem;
                  height: 1rem;
                  margin-left: 0.25rem;

                  svg {
                    transition: transform 300ms var(--easing);
                    &:nth-of-type(1) {
                      position: absolute;
                      left: 50%;
                      top: 50%;
                      transform: rotate(180deg) translate(50%, 150%);
                    }

                    &:nth-of-type(2) {
                      transition: transform 250ms cubic-bezier(0.18, 0.89, 0.32, 1.2);
                    }
                  }
                }
              }

              .dates-dropdown {
                position: absolute;
                top: calc(100% + 0.5rem);
                left: 0;
                background: var(--neutral-100);
                border-radius: 0.25rem;
                padding: 0.5rem;
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
                min-width: 100%;
                box-shadow: 0px 4px 24px -8px rgba(0, 0, 0, 0.15);
                z-index: 10;
                opacity: 0;
                visibility: hidden;
                transform: translateY(-0.5rem);
                transition: all 200ms var(--easing);

                &::before {
                  content: '';
                  position: absolute;
                  top: -0.5rem;
                  left: 0;
                  width: 100%;
                  height: 0.5rem;
                  background: transparent;
                }

                .dropdown-date {
                  white-space: nowrap;
                }
              }
            }
          }

          &:hover {
            .dates-wrapper {
              .multiple-dates {
                .visible-date {
                  .icon {
                    svg {
                      &:nth-of-type(1) {
                        transform: rotate(180deg) translate(50%, 50%);
                      }

                      &:nth-of-type(2) {
                        transform: translateY(100%);
                      }
                    }
                  }
                }

                .dates-dropdown {
                  opacity: 1;
                  visibility: visible;
                  transform: translateY(0);
                }
              }
            }
          }
        }

        .price-toggle {
          display: flex;
          align-items: center;
          gap: 0.625rem;
          justify-self: flex-end;

          .price-type {
            font-size: var(--typography-body-m, 0.875rem);
            line-height: 1.7;
            letter-spacing: -0.01em;
            transition:
              text-shadow 250ms,
              color 250ms;
            text-shadow: 0 0 0 var(--primary-400);
          }

          &:has(input:checked) {
            .price-type:last-child {
              color: var(--primary-800);
              text-shadow:
                0 0 0.65px var(--primary-800),
                0 0 0.65px var(--primary-800);
            }
          }

          &:not(:has(input:checked)) {
            .price-type:first-child {
              color: var(--primary-800);
              text-shadow:
                0 0 0.65px var(--primary-800),
                0 0 0.65px var(--primary-800);
            }
          }
        }
      }

      .quote-items {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
      }

      .form-section {
        max-width: 25.5625rem;
        margin: clamp(1.5rem, calc(2.5vw / 0.48), 2.5rem) auto 0;

        .form-heading {
          margin-bottom: clamp(1rem, calc(1.5vw / 0.48), 1.5rem);
          font-size: var(--typography-body-2xl, 1.5rem);
          font-weight: 700;
          color: var(--primary-800, #45051c);
          font-family: 'Neue Haas Unica', 'Neue Haas Unica Fallback', sans-serif;
          line-height: 1.25;
          letter-spacing: -0.04em;
          text-transform: none;
        }
      }

      .form-benefits {
        display: flex;
        justify-content: center;
        gap: 0.25rem 1.25rem;
        margin-top: 0.375rem;
        flex-wrap: wrap;

        .form-benefit {
          display: flex;
          align-items: flex-start;
          font-size: var(--typography-body-m, 0.875rem);
          letter-spacing: -0.01em;
          line-height: 1.7;
          gap: 0.375rem;

          svg {
            flex-shrink: 0;
            margin-top: 3px;
          }
        }
      }
    }

    @media (max-width: 49.9375rem) {
      .quote-container {
        .state.state-error {
          grid-template-columns: 1fr;
          max-width: 38rem;
          margin: 0 auto;

          .header {
            grid-column: 1 / 2;
            grid-row: 1 / 2;
            display: flex;
            flex-direction: column;
            align-items: flex-start;

            :global(svg) {
              margin-bottom: clamp(0.75rem, calc(1.5vw / 0.48), 1.5rem);
            }
          }

          :global(> button) {
            grid-column: 1 / 2;
            grid-row: 2 / 3;
            margin-bottom: clamp(2rem, calc(3.5vw / 0.48), 3.5rem);
          }

          .contact-list {
            grid-column: 1 / 2;
            grid-row: 3 / 4;
            display: grid;
            grid-template-columns: repeat(2, 1fr);

            .quote-id {
              grid-column: 1 / 3;
              grid-row: 1 / 2;
            }

            .phone {
              grid-column: 1 / 2;
              grid-row: 2 / 3;
              align-content: flex-start;
            }

            .mail {
              grid-column: 2 / 3;
              grid-row: 2 / 3;
              align-content: flex-start;
            }
          }
        }
      }
    }

    @media (max-width: 47.9375rem) {
      padding-top: clamp(1rem, calc(2vw / 0.48), 3rem);

      .quote-container {
        padding: clamp(0rem, calc(1.5vw / 0.48), 1.5rem) clamp(0.5rem, calc(2vw / 0.48), 2rem);

        .quote-details {
          grid-template-columns: repeat(2, 1fr);
          row-gap: 1.25rem;

          .participants {
            grid-column: 1 / 2;
            justify-items: center;
            padding: 0.5rem 0.625rem;
            background-color: var(--neutral-300, #ede6de);
            border-radius: 0.25rem;
          }

          .dates {
            grid-column: 2 / 3;
            justify-items: center;
            padding: 0.5rem 0.625rem;
            background-color: var(--neutral-300, #ede6de);
            border-radius: 0.25rem;
          }

          .price-toggle {
            grid-column: 1 / 3;
            grid-row: 2 / 3;
            justify-self: center;
          }
        }
      }
    }

    @media (max-width: 31.1875rem) {
      .quote-container {
        padding-right: 0.5rem;
        padding-left: 0.5rem;
      }
    }

    @media (max-width: 28.6875rem) {
      .quote-container .state.state-error .contact-list {
        display: flex;
        flex-direction: column;

        .quote-id {
          padding-top: 0.75rem;
          padding-bottom: 0.75rem;
        }
      }
    }
  }
</style>

<script>
  // Price toggle functionality
  const priceToggle = document.getElementById('price-toggle') as HTMLInputElement

  if (priceToggle) {
    // The toggle is initially checked (showing netto)

    priceToggle.addEventListener('change', () => {
      const isNetto = priceToggle.checked

      // Get all price elements including gastronomy items
      const priceElements = document.querySelectorAll('.item-price, .total-price, .price, .addon-price')

      priceElements.forEach((element) => {
        const bruttoPrice = element.getAttribute('data-brutto-price')
        const nettoPrice = element.getAttribute('data-netto-price')
        const isUnavailable = element.getAttribute('data-unavailable') === 'true'
        const isPriceHidden = element.getAttribute('data-price-hidden') === 'true'

        // Skip elements that show individual pricing text or special gastronomy states
        const currentText = element.textContent?.trim() || ''
        if (
          currentText === 'Wycena indywidualna' ||
          currentText === 'Individual pricing' ||
          currentText === 'Niedostępne' ||
          currentText === 'Unavailable' ||
          currentText === 'Cena ukryta' ||
          currentText === 'Price hidden' ||
          isUnavailable ||
          isPriceHidden
        ) {
          return
        }

        if (bruttoPrice && nettoPrice) {
          // Format as currency
          const formatter = new Intl.NumberFormat('pl-PL', {
            style: 'currency',
            currency: 'PLN',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0,
          })

          // Display either netto or brutto based on toggle state
          if (isNetto) {
            element.textContent = formatter.format(parseInt(nettoPrice, 10))
          } else {
            element.textContent = formatter.format(parseInt(bruttoPrice, 10))
          }
        }
      })
    })

    // Trigger the change event to ensure initial prices are displayed correctly
    priceToggle.dispatchEvent(new Event('change'))
  }
</script>

<script>
  // State management functionality
  function showState(state: 'content' | 'loading' | 'error') {
    const states = document.querySelectorAll('.quote-container .state')
    states.forEach((el) => {
      ;(el as HTMLElement).style.display = 'none'
    })

    const stateEl = document.querySelector(`.state-${state}`)
    if (stateEl) {
      ;(stateEl as HTMLElement).style.display = 'grid'
      ;(stateEl as HTMLElement).style.animationPlayState = 'running'
    }

    // Scroll to top
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    })
  }

  // Listen for form submission start
  document.addEventListener('quote-form-submitting', () => {
    showState('loading')
  })

  // Listen for form submission error
  document.addEventListener('quote-form-error', () => {
    showState('error')
  })

  // Setup return button
  document.getElementById('return-to-form')?.addEventListener('click', () => {
    showState('content')
  })
</script>

<script>
  // [Request quote] Google Ads Conversion
  window.gtag('event', 'conversion', { send_to: 'AW-881393838/Iv6wCLa974QbEK6BpKQD' })
</script>
