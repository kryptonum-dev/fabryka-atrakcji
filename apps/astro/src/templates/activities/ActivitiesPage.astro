---
import Layout from '@/src/layouts/Layout.astro'
import { sanityFetchWithCdn } from '@/utils/sanity.fetch'
import metadataFetch from '@/utils/metadata.fetch'
import Breadcrumbs from '@/src/layouts/Breadcrumbs.astro'
import { PortableTextQuery, type PortableTextValue } from '@/src/components/ui/portable-text'
import Components, { Components_Query, type ComponentsProps } from '@/src/components/Components.astro'
import { getLangFromPath, type Language } from '@/global/languages'
import Listing, { Listing_Query, type ListingProps } from '@/src/components/activites/category/Listing.astro'
import { NoSearchResults_Query } from '@/src/components/activites/NoSearchResults.astro'
import { parseFilters, getOrderClause } from '@/utils/filters'

export const ITEMS_PER_PAGE = 16

type Props = NonNullable<Awaited<ReturnType<typeof fetchData>>> & {
  currentPage: number
  currentCategory: string | null
  canonicalUrl?: string
}

export async function fetchData(
  lang: Language,
  category: string | null,
  pageNumber: number,
  searchParams?: URLSearchParams
) {
  const PAGINATION_BEFORE = ITEMS_PER_PAGE * (pageNumber - 1)
  const PAGINATION_AFTER = PAGINATION_BEFORE + ITEMS_PER_PAGE

  const filters = parseFilters(searchParams || new URLSearchParams())
  const orderClause = getOrderClause(filters.order)

  // Build the full category slug to match exactly (with trailing slash)
  const categorySlug = lang === 'pl' ? `/pl/integracje/kategoria/${category}/` : `/en/activities/category/${category}/`

  const page = await sanityFetchWithCdn<
    {
      name: string
      slug: string
      selectedCategory: {
        name: string
        slug: string
        heading: PortableTextValue
        description: {
          long: string
        }
        overwriteActivityPageComponents?: boolean
        components?: ComponentsProps
      }
      components: ComponentsProps
    } & ListingProps
  >({
    query: `
      *[_type == "Activities_Page" && language == $language][0] {
        name,
        "slug": slug.current,
        ${NoSearchResults_Query}
        "selectedCategory": *[_type == "ActivitiesCategory_Collection" && slug.current == $categorySlug][0] {
          name,
          "slug": slug.current,
          ${PortableTextQuery('heading')}
          description{
            long,
          },
          overwriteActivityPageComponents,
          ${Components_Query}
        },
        ${Listing_Query(orderClause)}
        ${Components_Query}
      }
    `,
    params: {
      language: lang,
      category,
      categorySlug,
      PAGINATION_BEFORE,
      PAGINATION_AFTER,
      minParticipants: filters.minParticipants,
      maxParticipants: filters.maxParticipants,
      minPrice: filters.minPrice,
      maxPrice: filters.maxPrice,
      activityType: filters.activityType,
      duration: filters.duration,
      embeddingResults: null,
    },
  })

  if (!page || (pageNumber > 1 && !page.listing.length) || (category && !page.selectedCategory)) return null

  const metadata = await metadataFetch(page?.selectedCategory?.slug || page.slug)
  return { page, metadata }
}

export async function staticPathsCategory(lang: Language) {
  const categories = await sanityFetchWithCdn<{ lang: Language; slug: string }[]>({
    query: `
      *[_type == "ActivitiesCategory_Collection" && language == $language][] {
        "lang": language,
        "slug": slug.current,
      }
    `,
    params: { language: lang },
  })

  return categories.map(({ slug }) => ({
    params: {
      category: slug.split('/').slice(-2).join('/'),
    },
  }))
}

export async function staticPathsCategoryPage(lang: Language) {
  const categories = await sanityFetchWithCdn<{ lang: Language; slug: string; postCount: number }[]>({
    query: `
      *[_type == 'ActivitiesCategory_Collection' && language == $language][] {
        "slug": slug.current,
        "postCount": count(*[_type == "Activities_Collection" && references(^._id) && defined(categories)]),
      }
    `,
    params: { language: lang },
  })

  return categories
    .map(({ slug, postCount }) => {
      const totalPages = Math.ceil(postCount / 16)
      return Array.from({ length: totalPages - 1 }, (_, i) => ({
        params: {
          category: slug.split('/').slice(-2).join('/'),
          page: `${(i + 2).toString()}/`,
        },
      }))
    })
    .flat()
}

const { page, metadata: _metadata, currentPage, currentCategory, canonicalUrl } = Astro.props

const lang = getLangFromPath(Astro.url.pathname) as Language
const totalPages = Math.ceil(page.totalActivitiesByCategory / ITEMS_PER_PAGE)

const translation = {
  pl: {
    pageUpper: 'Strona',
    pageLower: 'strona',
    categoryLower: 'kategoria',
    prefix: '/pl/intergracje',
  },
  en: {
    pageUpper: 'Page',
    pageLower: 'page',
    categoryLower: 'category',
    prefix: '/en/activities',
  },
} as const

const t = translation[lang]

const metadata = {
  ..._metadata,
  title: `${_metadata.title} | ${t.pageUpper} ${currentPage}`,
  description: _metadata.description,
  openGraphImage: _metadata.openGraphImage,
  path: Astro.url.pathname,
  ...(canonicalUrl && { canonicalUrl }),
}
const getPaginationUrl = (page: number) => {
  return currentCategory
    ? `${t.prefix}/${t.categoryLower}/${currentCategory}/${t.pageLower}/${page}`
    : `${t.prefix}/${t.pageLower}/${page}`
}

const breadcrumbs = [
  { name: page.name, path: page.slug },
  ...(page?.selectedCategory ? [{ name: page.selectedCategory.name, path: page.selectedCategory.slug }] : []),
  ...(currentPage > 1 ? [{ name: `${t.pageUpper} ${currentPage}`, path: getPaginationUrl(currentPage) }] : []),
]

// Determine which components to use based on the category settings
const componentsToRender = (() => {
  const categoryComponents = page.selectedCategory?.components || []
  const activityPageComponents = page.components || []

  // If category has no components, always use activity page components
  if (categoryComponents.length === 0) {
    return activityPageComponents
  }

  // If category has components and overwrite is explicitly enabled (true), use only category components
  if (page.selectedCategory?.overwriteActivityPageComponents === true) {
    return categoryComponents
  }

  // Default behavior: append category components after activity page components
  // This handles cases where overwriteActivityPageComponents is false, null, or undefined
  return [...activityPageComponents, ...categoryComponents]
})()
---

<Layout {...metadata}>
  <Fragment slot="Head">
    {currentPage > 2 && <link rel="prev" href={getPaginationUrl(currentPage - 1)} />}
    {currentPage < totalPages && <link rel="next" href={getPaginationUrl(currentPage + 1)} />}
  </Fragment>
  <Breadcrumbs data={breadcrumbs} firstItemType="ActivitiesListing" />
  <Listing
    selectedCategory={page.selectedCategory.name}
    heading={page.selectedCategory.heading}
    description={page.selectedCategory.description.long}
    totalActivitiesByCategory={page.totalActivitiesByCategory}
    listing={page.listing}
    currentPage={currentPage}
    currentCategory={currentCategory}
    participantRangeCounts={page.participantRangeCounts}
    activityTypes={page.activityTypes}
    durationCounts={page.durationCounts}
    priceRange={page.priceRange}
    noResults={page.noResults}
  />
  <Components data={page.listing.length > 0 ? componentsToRender : page.noResults.components} hasPreviousSections />
</Layout>

<script>
  import { trackEvent } from '@/src/pages/api/analytics/track-event'

  // Track activities list view
  document.addEventListener('DOMContentLoaded', () => {
    // Get activity items from the page
    const activityItems = document.querySelectorAll('[data-activity-card]') as NodeListOf<HTMLElement>
    if (!activityItems.length) return

    // Get category information
    const categoryName = (document.querySelector('.Listing') as HTMLElement)?.dataset.categoryName || ''

    // Create array of items for tracking
    const items = Array.from(activityItems)
      .slice(0, 10)
      .map((activity, index) => {
        const activityName = activity.dataset.activityName || ''
        const activityId = activity.dataset.activityId || ''
        const pricing = activity.dataset.pricing || 200

        return {
          item_name: activityName,
          item_id: activityId,
          item_price: pricing,
          index,
        }
      })

    // Track the event if we have items
    if (items.length > 0) {
      trackEvent({
        ga: {
          event_name: 'view_item_list',
          params: {
            items: items,
            currency: 'PLN',
            item_list_name: categoryName,
          },
        },
      })
    }
  })
</script>
