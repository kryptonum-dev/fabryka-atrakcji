---
import Layout from '@/src/layouts/Layout.astro'
import sanityFetch from '@/utils/sanity.fetch'
import metadataFetch from '@/utils/metadata.fetch'
import Breadcrumbs from '@/src/layouts/Breadcrumbs.astro'
import { PortableTextQuery, type PortableTextValue } from '@/src/components/ui/portable-text'
import Components, { Components_Query, type ComponentsProps } from '@/src/components/Components.astro'
import { getLangFromPath, type Language } from '@/global/languages'
import ActivitiesListing, {
  Listing_Query as ActivitiesListing_Query,
  type ListingProps as ActivitiesListingProps,
} from '@/src/components/activites/category/Listing.astro'
import { ITEMS_PER_PAGE as ACTIVITIES_PER_PAGE } from './ActivitiesPage.astro'
import Listing, { Listing_Query, type ListingProps } from '@/src/components/activites/Listing.astro'
import SearchBar from '@/src/components/ui/SearchBar.astro'
import { NoSearchResults_Query, type NoSearchResultsProps } from '@/src/components/activites/NoSearchResults.astro'
import { parseFilters, getOrderClause, fetchEmbeddings } from '@/utils/filters'
import { ButtonDataQuery } from '@/src/components/ui/Button'
import { ImageDataQuery } from '@/src/components/ui/image'
import ActivitiesCarousel, {
  type Props as ActivitiesCarouselProps,
} from '@/src/components/global/ActivitiesCarousel/index.astro'

export const ITEMS_PER_PAGE = 8

type BasePageProps = {
  name: string
  slug: string
  heading: PortableTextValue
  components: ComponentsProps
  activitiesCarousel: ActivitiesCarouselProps
}

type SearchPageProps = BasePageProps & ActivitiesListingProps & NoSearchResultsProps
type RegularPageProps = BasePageProps &
  ListingProps & {
    paragraph: PortableTextValue
  }

type Props = NonNullable<Awaited<ReturnType<typeof fetchData>>> & {
  currentPage: number
}

const translation = {
  pl: {
    pageUpper: 'Strona',
    pageLower: 'strona',
    prefix: '/pl/integracje/strona/',
    sort: {
      relevance: 'Trafność',
      popularity: 'Najpopularniejsze',
      priceDesc: 'Cena: od najwyższej',
      priceAsc: 'Cena: od najniższej',
      newest: 'Od najnowszych',
    },
  },
  en: {
    pageUpper: 'Page',
    pageLower: 'page',
    prefix: '/en/activities/page/',
    sort: {
      relevance: 'Relevance',
      popularity: 'Most popular',
      priceDesc: 'Price: highest first',
      priceAsc: 'Price: lowest first',
      newest: 'Newest first',
    },
  },
} as const

export async function fetchData(lang: Language, pageNumber: number, searchParams?: URLSearchParams) {
  const searchQuery = searchParams?.get('search')
  const PAGINATION_BEFORE = (searchQuery ? ACTIVITIES_PER_PAGE : ITEMS_PER_PAGE) * (pageNumber - 1)
  const PAGINATION_AFTER = PAGINATION_BEFORE + (searchQuery ? ACTIVITIES_PER_PAGE : ITEMS_PER_PAGE)

  const filters = parseFilters(searchParams || new URLSearchParams())

  // In search mode, if no order specified, default to searchMatching
  if (searchQuery && !filters.order) {
    filters.order = 'searchMatching'
  }

  const orderClause = getOrderClause(filters.order, !!searchQuery)

  const data = searchQuery ? await fetchEmbeddings(searchQuery, 'activities') : null

  const page = await sanityFetch<SearchPageProps | RegularPageProps>({
    query: `
      *[_type == "Activities_Page" && language == $language][0] {
        name,
        "slug": slug.current,
        ${PortableTextQuery('heading')}
        ${PortableTextQuery('paragraph')}
        ${NoSearchResults_Query}
        ${searchQuery ? ActivitiesListing_Query(orderClause) : Listing_Query}
        ${Components_Query}
        activitiesCarousel {
          "labelIcon": labelIcon.asset->url,
          ${PortableTextQuery('heading')}
          ${PortableTextQuery('paragraph')}
          ${ButtonDataQuery('ctas[]')}
          activities[]->{
            name,
            ${ImageDataQuery('imageList[0]')}
            description,
              participantsCount{
                min,
                max,
              },
            "slug": slug.current,
            _createdAt,
          },
        },
      }
    `,
    params: {
      language: lang,
      PAGINATION_BEFORE,
      PAGINATION_AFTER,
      minParticipants: filters.minParticipants,
      maxParticipants: filters.maxParticipants,
      minPrice: filters.minPrice,
      maxPrice: filters.maxPrice,
      category: null,
      activityType: filters.activityType,
      duration: filters.duration,
      embeddingResults: data ?? null,
    },
  })

  if (!page || (pageNumber > 1 && !page.listing.length)) return null
  const metadata = await metadataFetch(page.slug)
  return { page, metadata }
}

export async function staticPaths(lang: Language) {
  const pages = await sanityFetch<number>({
    query: `count(*[_type == "Activities_Collection" && language == $language])`,
    params: { language: lang },
  })

  const totalPages = Math.ceil(pages / ITEMS_PER_PAGE)

  return Array.from({ length: totalPages - 1 }, (_, i) => ({
    params: { page: (i + 1).toString() },
  }))
}

const { page, metadata: _metadata, currentPage } = Astro.props
const lang = getLangFromPath(Astro.url.pathname) as Language
const isSearchMode = Astro.url.searchParams.has('search')
const searchQuery = Astro.url.searchParams.get('search') || ''

const t = translation[lang]

const metadata = {
  ..._metadata,
  title: `${_metadata.title} | ${t.pageUpper} ${currentPage}`,
  description: _metadata.description,
  openGraphImage: _metadata.openGraphImage,
  path: Astro.url.pathname,
}

const getPaginationUrl = (page: number) => {
  return `${t.prefix}${page}`
}

const breadcrumbs = [
  { name: page.name, path: page.slug },
  ...(currentPage > 1 ? [{ name: `${t.pageUpper} ${currentPage}`, path: getPaginationUrl(currentPage) }] : []),
]

// Type guard to check if we're in search mode
const isSearchPage = (page: SearchPageProps | RegularPageProps): page is SearchPageProps => {
  return 'totalActivitiesByCategory' in page
}

// Type guard to check if we're in regular mode
const isRegularPage = (page: SearchPageProps | RegularPageProps): page is RegularPageProps => {
  return 'totalItems' in page
}

// Get the total pages based on the page type
const totalPages = isSearchPage(page)
  ? Math.ceil(page.totalActivitiesByCategory / ITEMS_PER_PAGE)
  : Math.ceil(page.totalItems / ITEMS_PER_PAGE)

console.log(page.activitiesCarousel)
---

<Layout {...metadata}>
  <Fragment slot="Head">
    {currentPage > 2 && <link rel="prev" href={getPaginationUrl(currentPage - 1)} />}
    {currentPage < totalPages && <link rel="next" href={getPaginationUrl(currentPage + 1)} />}
  </Fragment>

  {
    isSearchMode
      ? isSearchPage(page) && (
          <>
            <SearchBar value={searchQuery} hasWrapper />
            <ActivitiesListing
              totalActivitiesByCategory={page.totalActivitiesByCategory}
              listing={page.listing}
              currentCategory={null}
              currentPage={currentPage}
              participantRangeCounts={page.participantRangeCounts}
              activityTypes={page.activityTypes}
              durationCounts={page.durationCounts}
              priceRange={page.priceRange}
              noResults={page.noResults}
            />
            <Components
              data={page.listing.length > 0 ? page.components : page.noResults.components}
              hasPreviousSections
            />
          </>
        )
      : isRegularPage(page) && (
          <>
            <Breadcrumbs data={breadcrumbs} firstItemType="ActivitiesCategoriesListing" />
            <Listing
              heading={page.heading}
              paragraph={page.paragraph}
              totalItems={page.totalItems}
              listing={page.listing}
              currentPage={currentPage}
            />
            <ActivitiesCarousel {...page.activitiesCarousel} />
            <Components data={page.components} hasPreviousSections />
          </>
        )
  }
</Layout>
