---
import Layout from '@/src/layouts/Layout.astro'
import sanityFetch from '@/utils/sanity.fetch'
import metadataFetch from '@/utils/metadata.fetch'
import Breadcrumbs from '@/src/layouts/Breadcrumbs.astro'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/src/components/ui/portable-text'
import Components, { Components_Query, type ComponentsProps } from '@/src/components/Components.astro'
import { getLangFromPath, type Language } from '@/global/languages'
import Listing, { Listing_Query, type ListingProps } from '@/src/components/blog/Listing.astro'
import Hero from '@/src/components/blog/Hero.astro'
import { BlogCardQuery, type BlogCardProps } from '@/src/components/ui/BlogCard'
import { getEstimatedReadingTime } from '@/src/utils/get-estimated-reading-time'
import BlogPageSchema, { type BlogPageSchemaProps } from '@/src/Schema/BlogPageSchema.astro'

export const ITEMS_PER_PAGE = 16

type Props = NonNullable<Awaited<ReturnType<typeof fetchData>>> & {
  currentPage: number
  currentCategory: string | null
}

export async function fetchData(lang: Language, category: string | null, pageNumber: number) {
  const PAGINATION_BEFORE = ITEMS_PER_PAGE * (pageNumber - 1)
  const PAGINATION_AFTER = PAGINATION_BEFORE + ITEMS_PER_PAGE
  const page = await sanityFetch<
    {
      name: string
      slug: string
      heading: PortableTextValue
      selectedCategory?: {
        name: string
        slug: string
      }
      components: ComponentsProps
      hero: BlogCardProps
    } & ListingProps
  >({
    query: `
      *[_type == "Blog_Page" && language == $language][0] {
        name,
        "slug": slug.current,
        ${PortableTextQuery('heading')}
        ${PortableTextQuery('subheading')}
        ${PortableTextQuery('paragraph')}
        "hero": *[_type == 'BlogPost_Collection' && language == $language] | order(coalesce(publishedDate, _createdAt) desc)[0] {
          ${BlogCardQuery}
        },
        "selectedCategory": *[_type == "BlogCategory_Collection" && slug.current match $category + "$"][0] {
          name,
          "slug": slug.current,
        },
        ${Listing_Query}
        ${Components_Query}
      }
    `,
    params: {
      language: lang,
      category: category,
      PAGINATION_BEFORE: PAGINATION_BEFORE,
      PAGINATION_AFTER: PAGINATION_AFTER,
    },
  })
  if (!page || (pageNumber > 1 && !page.listing.length) || (category && !page.selectedCategory)) return null
  const metadata = await metadataFetch(page?.selectedCategory?.slug || page.slug)
  return { page, metadata }
}

export async function staticPathsPage(lang: Language) {
  const pages = await sanityFetch<number>({
    query: `count(*[_type == "BlogPost_Collection" && language == $language])`,
    params: { language: lang },
  })

  const totalPages = Math.ceil(pages / ITEMS_PER_PAGE)

  return Array.from({ length: totalPages - 1 }, (_, i) => ({
    params: { page: (i + 1).toString() },
  }))
}

export async function staticPathsCategory(lang: Language) {
  const categories = await sanityFetch<{ lang: Language; slug: string }[]>({
    query: `
      *[_type == "BlogCategory_Collection" && language == $language][] {
        "lang": language,
        "slug": slug.current,
      }
    `,
    params: { language: lang },
  })

  return categories.map(({ slug }) => ({
    params: {
      category: slug.split('/').slice(-2)[0],
    },
  }))
}

export async function staticPathsCategoryPage(lang: Language) {
  const categories = await sanityFetch<{ lang: Language; slug: string; postCount: number }[]>({
    query: `
      *[_type == 'BlogCategory_Collection' && language == $language][] {
        "slug": slug.current,
        "postCount": count(*[_type == "BlogPost_Collection" && references(^._id) && defined(category)]),
      }
    `,
    params: { language: lang },
  })

  return categories.map(({ slug, postCount }) => {
    const totalPages = Math.ceil(postCount / ITEMS_PER_PAGE)
    return Array.from({ length: totalPages - 1 }, (_, i) => ({
      params: {
        category: slug.split('/').slice(-2)[0],
        page: (i + 2).toString(),
      },
    }))
  })
}

const { page, metadata: _metadata, currentPage, currentCategory } = Astro.props
const lang = getLangFromPath(Astro.url.pathname) as Language
const totalPages = Math.ceil(page.totalBlogPostsByCategory / ITEMS_PER_PAGE)

const translation = {
  pl: {
    page: 'Strona',
    prefix: '/pl/blog',
  },
  en: {
    page: 'Page',
    prefix: '/en/blog',
  },
} as const

const t = translation[lang]

const metadata = {
  ..._metadata,
  title: `${_metadata.title} | ${t.page} ${currentPage}`,
  description: _metadata.description,
  openGraphImage: _metadata.openGraphImage,
  path: Astro.url.pathname,
}
const getPaginationUrl = (page: number) => {
  if (lang === 'pl')
    return currentCategory ? `${t.prefix}/kategoria/${currentCategory}/strona/${page}/` : `${t.prefix}/strona/${page}/`
  return currentCategory ? `${t.prefix}/kategoria/${currentCategory}/strona/${page}/` : `${t.prefix}/page/${page}/`
}

const breadcrumbs = [
  { name: page.name, path: page.slug },
  ...(page?.selectedCategory ? [{ name: page.selectedCategory.name, path: page.selectedCategory.slug }] : []),
  ...(currentPage > 1 ? [{ name: `${t.page} ${currentPage}`, path: getPaginationUrl(currentPage) }] : []),
]

const blogSchema = {
  name: metadata?.title,
  description: metadata?.description,
  url: Astro.url.pathname,
  posts: page.listing.map((post) => ({
    name: post.name,
    url: `${page.slug}${post.slug}`,
    description: post.seo?.description,
    image: post.image?.asset?.url,
    title: post.seo?.title,
    datePublished: post._createdAt,
  })),
} as BlogPageSchemaProps
---

<Layout {...metadata}>
  <BlogPageSchema slot="head" {...blogSchema} />
  <Fragment slot="head">
    {currentPage > 2 && <link rel="prev" href={getPaginationUrl(currentPage - 1)} />}
    {currentPage < totalPages && <link rel="next" href={getPaginationUrl(currentPage + 1)} />}
  </Fragment>
  <Breadcrumbs data={breadcrumbs} firstItemType="BlogPage" />
  <PortableText value={page.heading} heading="h1" class="visually-hidden" />
  <Hero {...page.hero} readingTime={getEstimatedReadingTime({ content: page.hero.content, lang })} />
  <Listing
    categories={page.categories}
    subheading={page.subheading}
    paragraph={page.paragraph}
    totalBlogPosts={page.totalBlogPosts}
    totalBlogPostsByCategory={page.totalBlogPostsByCategory}
    listing={page.listing}
    currentPage={currentPage}
    currentCategory={currentCategory}
  />
  <Components data={page.components} hasPreviousSections />
</Layout>
