---
import { getLangFromPath, type Language } from '@/src/global/languages'
import Layout from '@/src/layouts/Layout.astro'
import metadataFetch from '@/src/utils/metadata.fetch'
import sanityFetch from '@/src/utils/sanity.fetch'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/src/components/ui/portable-text'
import ActivityTemplate from './ActivityTemplate.astro'
import HotelTemplate from './HotelTemplate.astro'
import ExtrasTemplate from './ExtrasTemplate.astro'
import Button from '@/src/components/ui/Button'
import Loader from '@/src/components/ui/Loader.astro'
import AddonsPopup from '@/src/components/offer/AddonsPopup.astro'
import RemoveConfirmation from '@/src/components/ui/RemoveConfirmation.astro'
import DatePicker from '@/src/components/ui/DatePicker.astro'
import AlertTemplate from './AlertTemplate.astro'
import { ImageDataQuery } from '@/src/components/ui/image'
import PopupWindow from '@/src/components/ui/PopupWindow/index.astro'
import CloseButton from '@/src/components/ui/PopupWindow/CloseButton.astro'
import AddressForm from '@/src/components/cart/form'

type Props = NonNullable<Awaited<ReturnType<typeof fetchData>>>

export async function fetchData(lang: Language) {
  const page = await sanityFetch<{
    name: string
    slug: string
    infoParagraph: PortableTextValue
    noResults: {
      heading: PortableTextValue
      paragraph: PortableTextValue
    }
    orderAddons: {
      transportOptions: {
        image: any
        pricing: {
          type: string
          fixedPrice: number
          threshold: {
            basePrice: number
            maxUnits: number
            additionalPrice: number
            singular: boolean
          }
        }
      }
      addonsList: Array<{
        _key: string
        name: string
        image: any
        pricing: {
          type: string
          fixedPrice: number
          threshold: {
            basePrice: number
            maxUnits: number
            additionalPrice: number
            singular: boolean
          }
        }
      }>
    }
  }>({
    query: `
      *[_type == "Cart_Page" && language == $language][0] {
        name,
        "slug": slug.current,
        ${PortableTextQuery('infoParagraph')}
        noResults {
          ${PortableTextQuery('heading')}
          ${PortableTextQuery('paragraph')}
        },
        orderAddons {
          transportOptions {
            ${ImageDataQuery('image')}
            pricing {
              type,
              fixedPrice,
              threshold {
                basePrice,
                maxUnits,
                additionalPrice,
                singular,
              },
            },
          },
          addonsList[] {
            _key,
            name,
            ${ImageDataQuery('image')}
            pricing {
              type,
              fixedPrice,
              threshold {
                basePrice,
                maxUnits,
                additionalPrice,
                singular,
              },
            },
          },
        },
      }
    `,
    params: { language: lang },
  })

  if (!page) return null

  const metadata = await metadataFetch(page.slug)

  if (!metadata) return null

  return {
    metadata,
    page,
  }
}

const lang = (getLangFromPath(Astro.url.pathname) as Language) || 'pl'

const translations = {
  pl: {
    back: {
      content: 'Wróć do przeglądania integracji i hoteli',
      url: '/pl',
    },
    cartHeading: 'Twój koszyk',
    activitiesHeading: 'Integracje',
    hotelsHeading: 'Hotele',
    extrasHeading: 'Dodaj coś ekstra',
    optional: '(opcjonalne)',
    howManyParticipants: 'Ile osób bierze udział?',
    whichDate: 'Kiedy planujecie pobyt i/lub event?',
    getQuote: {
      text: 'Otrzymaj wstępną wycenę',
      additionalInfo: 'W następnym kroku poznasz wycenę. Nie oznacza to rezerwacji hotelu ani integracji',
    },
    hotels: 'Hotele',
    hotelsPrefix: '/pl/hotele/',
    activities: 'Integracje',
    activitiesPrefix: '/pl/integracje/',
    people: 'osób',
    person: 'osoba',
    to: 'do',
    from: 'od',
    additionalPerson: 'Każda dodatkowa osoba',
    currency: 'zł',
    perNight: 'zł/noc za osobę',
    max: 'Maks.',
    addons: 'Dobierz dodatki',
    editAddons: 'Edytuj dodatki',
    transportAddonName: 'Transport',
    selectAddon: 'Wybierz',
    showMoreExtras: 'Zobacz wszystkie dodatki',
    selectExtrasHeading: 'Wybierz dodatki',
    confirmAddons: 'Zatwierdź wybór',
    allAddons: 'Wszystkie <strong>dodatki</strong>',
    addressForm: {
      title: 'Edytuj adres',
      street: 'Ulica i numer*',
      streetPlaceholder: 'np. Kwiatowa 56/23b',
      streetRequired: 'Ulica i numer są wymagane',
      postal: 'Kod pocztowy*',
      postalPlaceholder: '__ - ___',
      postalRequired: 'Kod pocztowy jest wymagany',
      postalPattern: 'Wprowadź kod w formacie: XX-XXX',
      city: 'Miasto*',
      cityRequired: 'Miasto jest wymagane',
      submit: 'Zapisz adres',
      editButton: 'Edytuj adres',
    },
    transportRemoval: {
      title: 'Czy na pewno chcesz usunąć <strong>Transport</strong>?',
      message: 'Usunięcie transportu spowoduje również usunięcie wprowadzonego adresu.',
      confirm: 'Tak, usuń',
      cancel: 'Anuluj',
      successToast: 'Transport został usunięty',
    },
    participantExceedsMaxAlert: {
      heading: 'Ten hotel jest maksymalnie dla <strong>{maxPeople}</strong> osób',
      paragraph: 'Możesz kontynuować wycenę albo zmienić hotel, który pomieści więcej osób.',
      cta: {
        text: 'Przeglądaj hotele',
        href: '/pl/hotele',
      },
    },
  },
  en: {
    back: {
      content: 'Back to activities and hotels',
      url: '/en',
    },
    cartHeading: 'Your cart',
    activitiesHeading: 'Activities',
    hotelsHeading: 'Hotels',
    extrasHeading: 'Add something extra',
    optional: '(optional)',
    howManyParticipants: 'How many participants?',
    whichDate: 'Which date?',
    getQuote: {
      text: 'Get a quote',
      additionalInfo:
        'In the next step, you will receive a quote. This does not mean a hotel reservation or integration reservation',
    },
    hotels: 'Hotels',
    hotelsPrefix: '/en/hotels/',
    activities: 'Activities',
    activitiesPrefix: '/en/activities/',
    people: 'people',
    person: 'person',
    from: 'from',
    to: 'to',
    currency: 'PLN',
    additionalPerson: 'Each additional person',
    perNight: 'PLN/night per person',
    max: 'Max.',
    addons: 'Add add-ons',
    editAddons: 'Edit add-ons',
    transportAddonName: 'Transport',
    selectAddon: 'Select',
    showMoreExtras: 'Show all extras',
    selectExtrasHeading: 'Select extras',
    confirmAddons: 'Confirm selection',
    allAddons: 'All <strong>extras</strong>',
    addressForm: {
      title: 'Edit address',
      street: 'Street and number*',
      streetPlaceholder: 'e.g. Flower 56/23b',
      streetRequired: 'Street and number are required',
      postal: 'Postal code*',
      postalPlaceholder: '__ - ___',
      postalRequired: 'Postal code is required',
      postalPattern: 'Enter code in the format: XX-XXX',
      city: 'City*',
      cityRequired: 'City is required',
      submit: 'Save address',
      editButton: 'Edit address',
    },
    transportRemoval: {
      title: 'Are you sure you want to remove <strong>Transport</strong>?',
      message: 'Removing transport will also remove the address you entered.',
      confirm: 'Yes, remove',
      cancel: 'Cancel',
      successToast: 'Transport has been removed',
    },
    participantExceedsMaxAlert: {
      heading: 'This hotel is maxed out for <strong>{maxPeople}</strong> people',
      paragraph: 'You can continue with the quote or change the hotel to one that can accommodate more people.',
      cta: {
        text: 'Browse hotels',
        href: '/en/hotels',
      },
    },
  },
} as const

const t = translations[lang]

const { metadata, page } = Astro.props
---

<Layout {...metadata}>
  <section class="Cart" data-lang={lang} data-translations={JSON.stringify(translations[lang])}>
    <a href={t.back.url} class="back-link"
      ><span class="icons">
        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="13" viewBox="0 0 12 13" fill="none">
          <path
            d="M7.5 2.75L4.5 6.25L7.5 9.75"
            stroke="#74535E"
            stroke-width="1.25"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="13" viewBox="0 0 12 13" fill="none">
          <path
            d="M7.5 2.75L4.5 6.25L7.5 9.75"
            stroke="#74535E"
            stroke-width="1.25"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </span>
      <span>{t.back.content}</span>
    </a>
    <div class="cart-container">
      <Loader />
      <div class="empty">
        <PortableText value={page.noResults.heading} heading="h1" />
        <PortableText value={page.noResults.paragraph} />
      </div>
      <div class="items-wrapper">
        <header class="header">
          <div class="info-box">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none"
              ><path
                fill="#F67258"
                fill-rule="evenodd"
                d="M14.67 8A6.667 6.667 0 1 1 1.335 8a6.667 6.667 0 0 1 13.333 0Zm-6.667 3.834a.5.5 0 0 0 .5-.5v-4a.5.5 0 1 0-1 0v4a.5.5 0 0 0 .5.5Zm0-7.167a.667.667 0 1 1 0 1.333.667.667 0 0 1 0-1.333Z"
                clip-rule="evenodd"></path></svg
            >
            <PortableText value={page.infoParagraph} />
          </div>
          <h1 class="cart-heading">
            <span class="text">{t.cartHeading}</span>
            <span class="count">0</span>
          </h1>
          <div class="inputs">
            <div class="input-field participants">
              <label for="participantCount">
                <span class="label">{t.howManyParticipants}</span>
              </label>
              <div class="input-box">
                <div class="gradient"></div>
                <input type="number" id="participantCount" class="participant-input" min="1" step="1" value="50" />
              </div>
            </div>
            <DatePicker lang={lang} />
          </div>
        </header>
        <div class="hotels-section">
          <h2 class="cart-heading cart-heading-s">
            <span class="title">{t.hotelsHeading}</span>
            <span class="count">0</span>
          </h2>
          <ul class="list"></ul>
        </div>
        <div class="activities-section">
          <h2 class="cart-heading cart-heading-s">
            <span class="title">{t.activitiesHeading}</span>
            <span class="count">0</span>
          </h2>
          <ul class="list"></ul>
        </div>
        <div class="extras">
          <h2 class="cart-heading cart-heading-s">
            <span class="title">{t.extrasHeading} <strong>{t.optional}</strong></span>
            <span class="count">0</span>
          </h2>
          <ul class="list" data-addons-data={JSON.stringify(page.orderAddons)}></ul>
          <div class="show-more-wrapper">
            <Button className="show-more-extras" theme="secondary">
              {t.showMoreExtras}{' '}
              <strong>({page.orderAddons.addonsList.length + 1})</strong>
            </Button>
          </div>
        </div>
        <div class="actions">
          <Button>{t.getQuote.text}</Button>
          <p class="additional-info">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none"
              ><path
                fill="#F67258"
                fill-rule="evenodd"
                d="M6.398 2.382a3.817 3.817 0 0 1-.33.266 1.809 1.809 0 0 1-.657.272c-.103.02-.209.029-.422.046-.534.042-.801.063-1.024.142-.515.182-.92.588-1.103 1.103-.079.223-.1.49-.143 1.024-.017.213-.025.32-.045.422a1.809 1.809 0 0 1-.272.656 3.818 3.818 0 0 1-.266.33c-.348.409-.521.613-.623.826a1.809 1.809 0 0 0 0 1.56c.102.213.275.417.623.825.138.162.208.243.266.33.133.199.225.422.272.657.02.102.028.208.045.421.043.534.064.801.143 1.024.182.516.588.921 1.103 1.103.223.079.49.1 1.024.143.213.017.32.025.422.046.234.046.458.138.656.272.087.058.168.127.33.265.408.348.612.522.826.624a1.809 1.809 0 0 0 1.56 0c.213-.102.417-.276.825-.624a3.81 3.81 0 0 1 .33-.265 1.81 1.81 0 0 1 .656-.272c.103-.02.21-.03.422-.046.534-.043.801-.064 1.024-.143.516-.182.921-.587 1.103-1.103.079-.223.1-.49.143-1.024.017-.213.025-.319.046-.421.046-.235.138-.458.271-.657.059-.087.128-.168.266-.33.348-.408.521-.612.623-.825a1.809 1.809 0 0 0 0-1.56c-.102-.213-.275-.417-.623-.825a3.83 3.83 0 0 1-.266-.33 1.808 1.808 0 0 1-.271-.657c-.02-.103-.03-.209-.046-.422-.043-.534-.064-.801-.143-1.024a1.809 1.809 0 0 0-1.103-1.103c-.223-.079-.49-.1-1.024-.142a3.817 3.817 0 0 1-.421-.046 1.808 1.808 0 0 1-.657-.272 3.817 3.817 0 0 1-.33-.266c-.408-.347-.612-.521-.825-.623a1.809 1.809 0 0 0-1.56 0c-.214.102-.418.276-.825.623Zm4.52 4.442a.543.543 0 0 0-.767-.767L6.917 9.29 5.854 8.227a.543.543 0 1 0-.767.767l1.447 1.447a.543.543 0 0 0 .767 0l3.617-3.617Z"
                clip-rule="evenodd"></path></svg
            ><span>{t.getQuote.additionalInfo}</span>
          </p>
        </div>
      </div>
      <div class="error-wrapper"></div>
    </div>
  </section>

  <HotelTemplate />
  <ActivityTemplate />
  <AlertTemplate />
  <ExtrasTemplate />
  <AddonsPopup type="hotels" addons={{ hasAddons: true, addonsList: [] }} />
  <RemoveConfirmation itemId="" itemType="hotels" hasAddons={false} lang={lang} itemName="" />
  <PopupWindow>
    <Button slot="open" data-popup-id="extras-popup" className="hidden-trigger" id="extras-popup-trigger">Open</Button>
    <div slot="content" class="popup-content" data-popup-id="extras-popup-container">
      <h2><Fragment set:html={t.allAddons} /></h2>
      <CloseButton />
      <ul class="extras-list"></ul>
    </div>
  </PopupWindow>

  <PopupWindow>
    <Button slot="open" className="hidden-trigger" id="transport-address-trigger">Open</Button>
    <div slot="content" class="popup-content address-popup">
      <h2>{t.addressForm.title}</h2>
      <CloseButton />
      <AddressForm client:idle translations={t.addressForm} />
    </div>
  </PopupWindow>

  <PopupWindow>
    <Button slot="open" className="hidden-trigger" id="transport-remove-trigger">Open</Button>
    <div slot="content" class="popup-content removal-confirmation">
      <h2><Fragment set:html={t.transportRemoval.title} /></h2>
      <CloseButton />
      <p>{t.transportRemoval.message}</p>
      <div class="confirmation-actions">
        <Button theme="primary" shade="light" className="cancel-transport-remove">{t.transportRemoval.cancel}</Button>
        <Button theme="primary" shade="dark" className="confirm-transport-remove">{t.transportRemoval.confirm}</Button>
      </div>
    </div>
  </PopupWindow>
</Layout>

<style lang="scss">
  .Cart {
    max-width: 55.5rem;
    margin: 0 auto;
    padding: clamp(1rem, calc(3vw / 0.48), 4rem) 0 clamp(2rem, calc(4vw / 0.48), 4rem);

    .back-link {
      margin-bottom: 0.25rem;
      display: flex;
      align-items: center;
      gap: 0.375rem;
      color: var(--primary-700, #600d2a);
      font-size: var(--typography-body-m, 0.875rem);
      letter-spacing: -0.01em;
      line-height: 1.7;
      min-height: 3rem;
      max-width: fit-content;
      position: relative;
      overflow: hidden;
      padding: 0 0.5rem;
      margin-left: -0.5rem;
      border-radius: 0.5rem;

      &::before {
        content: '';
        position: absolute;
        width: 100%;
        height: auto;
        aspect-ratio: 1/1;
        background: var(--neutral-200, #f5f1ec);
        z-index: -1;
        border-radius: 50%;
        transform: scale(0);

        transition: transform 300ms var(--easing);
      }

      .icons {
        position: relative;
        overflow: hidden;

        :global(svg) {
          transition: transform 350ms var(--easing);
          &:last-child {
            position: absolute;
            top: 0%;
            left: 0%;
            transform: rotate(40deg) translateX(100%);
          }
        }
      }

      > span:last-child {
        transition: transform 350ms var(--easing);
      }

      &:hover {
        .icons {
          :global(svg) {
            &:first-child {
              transform: translateX(-100%);
            }

            &:last-child {
              transition: transform 350ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
              transform: rotate(0deg) translateX(0%);
            }
          }
        }

        > span:last-child {
          transform: translateX(-2px);
        }
      }

      &:focus:not(:focus-visible) {
        &::before {
          transform: scale(1);
        }
      }

      &:focus-visible {
        outline-offset: 0px;
      }
    }

    .cart-container {
      position: relative;
      min-height: 30rem;
      padding: clamp(1rem, calc(2.75vw / 0.48), 2.75rem) 2.75rem;
      border-radius: clamp(0.5rem, calc(0.75vw / 0.48), 0.75rem);
      isolation: isolate;

      &::before,
      &::after {
        inset: 2px;
        position: absolute;
        content: '';
        background: var(--neutral-200, #f5f1ec);
        z-index: -1;
        border-radius: clamp(0.4rem, calc(0.6vw / 0.48), 0.6rem);
      }

      &::after {
        background: conic-gradient(
          from 135deg at 50% 50%,
          #798ddc 0deg,
          #e7c78f 90deg,
          #fa7468 266.40000343322754deg,
          #798ddc 360deg
        );
        z-index: -2;
        inset: 0;
        border-radius: clamp(0.5rem, calc(0.75vw / 0.48), 0.75rem);
      }

      .empty {
        display: none;
      }

      .items-wrapper {
        display: flex;
        flex-direction: column;
        gap: clamp(2rem, calc(2vw / 0.48), 2.25rem);
        .header {
          .info-box {
            background: var(--neutral-100, #faf7f7);
            border-radius: clamp(0.5rem, calc(0.75vw / 0.48), 0.75rem);
            padding: 0.5rem 0.75rem;
            gap: 0.5rem;
            display: flex;
            align-items: flex-start;
            font-size: var(--typography-body-m, 0.875rem);
            line-height: 1.7;
            letter-spacing: -0.01em;
            margin-bottom: clamp(1rem, calc(1vw / 0.48), 1.5rem);

            svg {
              flex-shrink: 0;
              margin-top: 4px;
            }
          }

          .inputs {
            margin-top: clamp(1rem, calc(1vw / 0.48), 1.5rem);
            display: flex;
            gap: 1rem;
            width: 100%;

            .input-field {
              flex: 1;
              display: flex;
              flex-direction: column;
              gap: 0.125rem;

              &.participants {
                max-width: 7.625rem;
              }

              .label {
                font-size: var(--typography-body-s, 0.75rem);
                line-height: 1.6;
                letter-spacing: -0.01em;
                color: var(--primary-800, #45051c);
              }

              .input-box {
                position: relative;
                isolation: isolate;
                background-color: var(--neutral-100, #faf7f7);
                border-radius: 0.25rem;

                &::before,
                &::after {
                  position: absolute;
                  z-index: -3;
                  inset: 0;
                  content: '';
                  background-color: var(--neutral-500, #d2c1b0);
                  border-radius: 0.25rem;
                  transition: background-color 275ms;
                }

                &::after {
                  z-index: -1;
                  inset: 0.125rem;
                  background: linear-gradient(var(--neutral-100, #faf7f7), var(--neutral-100, #faf7f7)) padding-box;
                  border-radius: 0.125rem;
                }

                &:hover::before {
                  background-color: var(--primary-400, #74535e);
                }

                .gradient {
                  position: absolute;
                  z-index: -2;
                  inset: 0;
                  overflow: hidden;
                  border-radius: 0.25rem;

                  &::before {
                    position: absolute;
                    inset: -0.0625rem;
                    content: '';
                    background: conic-gradient(
                      from 135deg at 50% 50%,
                      #798ddc 0deg,
                      #e7c78f 90deg,
                      #fa7468 266.40000343322754deg,
                      #798ddc 360deg
                    );
                    opacity: 0;
                    transform: scaleX(0);
                    transition:
                      opacity 125ms,
                      transform 475ms var(--easing);
                  }
                }

                input {
                  width: 100%;
                  min-height: 2.5rem;
                  padding: 0.625rem;
                  color: var(--primary-800, #45051c);
                  font-size: 1rem;
                  line-height: 1.4;
                  border-radius: 0.25rem;
                  border: none;
                  background: transparent;

                  &:focus-visible {
                    outline: none;
                  }

                  &::-webkit-outer-spin-button,
                  &::-webkit-inner-spin-button {
                    -webkit-appearance: none;
                    margin: 0;
                  }

                  /* Firefox */
                  &[type='number'] {
                    -moz-appearance: textfield;
                  }
                }

                &:has(input:focus-visible) {
                  .gradient {
                    &::before {
                      opacity: 1;
                      transform: scaleX(1);
                    }
                  }
                }
              }
            }
          }
        }

        .cart-heading {
          font-variant-numeric: lining-nums proportional-nums;
          font-size: var(--typography-body-2xl, 1.5rem);
          line-height: 1.25;
          font-weight: 700;
          font-family: 'Neue Haas Unica', 'Neue Haas Unica Fallback', sans-serif;
          color: var(--primary-800, #45051c);
          display: flex;
          align-items: center;
          letter-spacing: -0.04em;
          gap: 0.5rem;
          text-transform: none;

          :global(strong) {
            color: var(--primary-400, #74535e);
          }

          .count {
            display: grid;
            place-items: center;
            width: 1.75rem;
            height: 1.75rem;
            border-radius: 50%;
            background: var(--neutral-300, #faf7f7);
            font-size: var(--typography-body-l, 1rem);
            line-height: 1.55;
            letter-spacing: -0.03em;
            margin-top: 2px;
            padding-bottom: 2px;
            padding-right: 1px;
          }

          &-s {
            font-size: var(--typography-body-xl, 1.125rem);
            letter-spacing: -0.03em;
            line-height: 1.55;

            .count {
              font-size: var(--typography-body-m, 0.875rem);
              line-height: 1.7;
              letter-spacing: -0.02em;
            }
          }
        }

        .hotels-section,
        .activities-section {
          .cart-heading {
            margin-bottom: 1rem;
          }
          .list {
            display: flex;
            flex-direction: column;
            gap: clamp(0.375rem, calc(0.5vw / 0.48), 0.5rem);
          }
        }

        .hotels-section {
          padding-bottom: 0.75rem;
          border-bottom: 2px solid var(--neutral-300, #ede6de);
        }

        .extras {
          .cart-heading {
            margin-bottom: 0.75rem;
          }
          .list {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.5rem;
          }

          .show-more-wrapper {
            margin-top: clamp(0.5rem, calc(1vw / 0.48), 1rem);
            display: flex;
            justify-content: center;
            :global(> button) {
              :global(strong) {
                color: var(--primary-400, #74535e);
              }
            }

            :global(> button:hover),
            :global(> button:focus) {
              > :global(span) strong {
                color: var(--neutral-100) !important;
              }
            }
          }
        }

        .actions {
          display: flex;
          flex-direction: column;

          :global(button) {
            max-width: 100%;
            width: 100%;
            margin-bottom: clamp(0.375rem, calc(0.5vw / 0.48), 0.5rem);

            :global(span) {
              margin: 0 auto;
              padding-right: 1.75rem;
            }
          }

          .additional-info {
            gap: 0.375rem;
            display: flex;
            align-items: flex-start;
            justify-content: center;
            font-size: var(--typography-body-m, 0.875rem);
            line-height: 1.7;
            letter-spacing: -0.01em;

            :global(svg) {
              flex-shrink: 0;
              margin-top: 4px;
            }
          }
        }
      }

      .error-wrapper {
        display: none;
      }
    }
  }

  :global(.popup-content) {
    padding: 2.5rem;
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 1.5rem;
    max-width: 68rem;
    :global(h2) {
      grid-column: 1 / 2;
      grid-row: 1 / 2;
      align-self: center;
      margin-top: 0.75rem;
    }

    :global(.CloseButton) {
      grid-column: 2 / 3;
      grid-row: 1 / 2;
    }

    :global(.extras-list) {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 0.25rem;
      margin-top: 1rem;
      grid-column: 1 / 3;
      grid-row: 2 / 3;
    }
  }

  :global(.hidden-trigger) {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  :global(.address-popup) {
    h2 {
      margin-bottom: 1.5rem;
    }

    .address-form {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      max-width: 30rem;

      .input-fields-row {
        display: grid;
        grid-template-columns: 1fr 2fr;
        gap: 1rem;
      }

      .input-field {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;

        label {
          font-size: var(--typography-body-s, 0.75rem);
          color: var(--primary-800);
        }

        input {
          min-height: 2.75rem;
          padding: 0.625rem;
          border: 1px solid var(--neutral-400);
          border-radius: 0.25rem;
          background: var(--neutral-100);

          &:focus {
            border-color: var(--primary-500);
            outline: none;
          }
        }
      }

      :global(button[type='submit']) {
        margin-top: 1rem;
        align-self: flex-start;
      }
    }
  }

  :global(.removal-confirmation) {
    padding: 2rem;
    max-width: 36rem;
    margin: 0 auto;
    display: flex;
    flex-direction: column;

    h2 {
      margin-bottom: 1rem;
      color: var(--primary-800);
      font-size: var(--typography-body-xl, 1.125rem);
      letter-spacing: -0.03em;
      line-height: 1.55;

      :global(strong) {
        font-weight: 700;
      }
    }

    p {
      margin-bottom: 1.5rem;
      font-size: var(--typography-body-m, 0.875rem);
      line-height: 1.7;
      letter-spacing: -0.01em;
    }

    .confirmation-actions {
      display: flex;
      gap: 1rem;

      :global(button) {
        flex: 1;
      }
    }

    @media (max-width: 459px) {
      .confirmation-actions {
        flex-direction: column;
      }
    }
  }
</style>

<script>
  import type { Alert } from '@/src/global/types'
  import { cartStore } from '@/src/store/cart'
  import type { AddonItem } from '@/src/store/cart'
  import {
    renderHotel,
    renderActivity,
    renderAlerts,
    type ExtendedHotelData,
    type ExtendedActivityData,
  } from '@/src/utils/cart'
  import { optimizeImage } from '@/src/utils/optimize-images'
  import { showToast } from '@/src/utils/toast'

  const cartElement = document.querySelector('.Cart')
  const pageLang = cartElement?.getAttribute('data-lang') || 'pl'
  const t = JSON.parse(cartElement?.getAttribute('data-translations') || '{}') as Record<string, any>

  // Participant count handling
  function initParticipantInput() {
    const participantInput = document.getElementById('participantCount') as HTMLInputElement
    if (!participantInput) return

    // Load saved value from localStorage if available
    const savedCount = localStorage.getItem('cart_participant_count')
    if (savedCount) {
      participantInput.value = savedCount
    }

    // Handle input changes
    participantInput.addEventListener('input', () => {
      // Clean input - remove non-numeric values
      let value = participantInput.value.replace(/[^\d]/g, '')

      // Ensure value is at least 1
      if (!value || parseInt(value) < 1) {
        value = '1'
      }

      // Update input value
      participantInput.value = value

      // Store in localStorage
      localStorage.setItem('cart_participant_count', value)

      // Update alerts when participant count changes
      updateParticipantAlerts()
    })

    // Handle blur to format value properly
    participantInput.addEventListener('blur', () => {
      let value = participantInput.value

      // Convert to integer
      const intValue = parseInt(value)

      // Update with parsed integer value
      if (!isNaN(intValue)) {
        participantInput.value = intValue.toString()
        localStorage.setItem('cart_participant_count', intValue.toString())

        // Update alerts on blur
        updateParticipantAlerts()
      }
    })
  }

  // Function to update participant alerts based on current count
  function updateParticipantAlerts() {
    const participantInput = document.getElementById('participantCount') as HTMLInputElement

    // First check if we have value in localStorage, and use that if available
    const savedCount = localStorage.getItem('cart_participant_count')
    let participantCount = 0

    if (savedCount) {
      participantCount = parseInt(savedCount)
      // Make sure the input value matches localStorage
      if (participantInput) {
        participantInput.value = savedCount
      }
    } else if (participantInput) {
      // Fallback to the input value if no localStorage value exists
      participantCount = parseInt(participantInput.value || '0')
    }

    console.log('Checking participant alerts with count:', participantCount)

    // Find all hotel items in the cart
    const hotelItems = document.querySelectorAll('.hotel-item')
    console.log('Found hotel items:', hotelItems.length)

    hotelItems.forEach((item) => {
      const itemId = item.getAttribute('data-item-id')
      const maxPeople = parseInt(item.getAttribute('data-max-people') || '0')
      console.log('Hotel:', itemId, 'Max People:', maxPeople, 'Participant Count:', participantCount)

      if (!itemId || !maxPeople) return

      const alertsList = item.querySelector('.alerts')
      if (!alertsList) return

      // Remove any existing participant alerts
      const existingAlerts = alertsList.querySelectorAll('.participant-alert')
      existingAlerts.forEach((alert) => alert.remove())

      // If count exceeds max, add a new alert
      if (participantCount > maxPeople) {
        console.log('Adding alert for hotel:', itemId, 'max:', maxPeople, 'count:', participantCount)

        // Create a custom alert object
        const participantAlert: Alert = {
          heading: t.participantExceedsMaxAlert.heading.replace('{maxPeople}', String(maxPeople)),
          paragraph: t.participantExceedsMaxAlert.paragraph.replace('{maxPeople}', String(maxPeople)),
          cta: {
            text: t.participantExceedsMaxAlert.cta.text,
            internalReference: {
              slug: t.participantExceedsMaxAlert.cta.href,
            } as any,
          },
        }

        // Use the exported renderAlerts function with a custom class
        renderAlerts([participantAlert], alertsList, 'participant-alert')
      }
    })
  }

  // Create fetch functions for hotels and activities
  async function fetchHotelData(id: string, addonIds: string[] = []) {
    try {
      const addonIdsParam = addonIds.length > 0 ? `&addonIds=${addonIds.join(',')}` : ''
      const response = await fetch(`/api/cart/hotel?id=${id}&lang=${pageLang}${addonIdsParam}`)
      if (!response.ok) throw new Error('Failed to fetch hotel data')
      return await response.json()
    } catch (error) {
      console.error('Error fetching hotel:', error)
      return null
    }
  }

  async function fetchActivityData(id: string, addonIds: string[] = []) {
    try {
      const addonIdsParam = addonIds.length > 0 ? `&addonIds=${addonIds.join(',')}` : ''
      const response = await fetch(`/api/cart/activity?id=${id}&lang=${pageLang}${addonIdsParam}`)
      if (!response.ok) throw new Error('Failed to fetch activity data')
      return await response.json()
    } catch (error) {
      console.error('Error fetching activity:', error)
      return null
    }
  }

  // Function to render all cart items
  async function renderCartItems(hotels: ExtendedHotelData[], activities: ExtendedActivityData[]) {
    const cartContent = document.querySelector('.cart-container')! as HTMLDivElement
    const cartHeadingCount = cartContent.querySelector('.header .cart-heading .count')! as HTMLSpanElement

    if (!cartContent) return

    // Render hotels section if there are hotels
    if (hotels && hotels.length > 0) {
      const hotelsSection = cartContent.querySelector('.hotels-section')! as HTMLDivElement
      const hotelList = hotelsSection.querySelector('.list')! as HTMLDivElement
      const hotelsCount = hotelsSection.querySelector('.count')! as HTMLSpanElement
      const hotelPromises = hotels.map(async (hotel) => {
        const hotelElement = await renderHotel(hotel, t)
        return hotelElement
      })
      const hotelElements = await Promise.all(hotelPromises)
      hotelElements.forEach((hotelElement) => {
        if (hotelElement) {
          hotelList.appendChild(hotelElement)
        }
      })
      hotelsCount.textContent = hotels.length.toString()
    }

    // Render activities section if there are activities
    if (activities && activities.length > 0) {
      const activitiesSection = cartContent.querySelector('.activities-section')! as HTMLDivElement
      const activitiesList = activitiesSection.querySelector('.list')! as HTMLDivElement
      const activitiesCount = activitiesSection.querySelector('.count')! as HTMLSpanElement
      const activityPromises = activities.map(async (activity) => {
        const activityElement = await renderActivity(activity, t)
        return activityElement
      })
      const activityElements = await Promise.all(activityPromises)
      activityElements.forEach((activityElement) => {
        if (activityElement) {
          activitiesList.appendChild(activityElement)
        }
      })
      activitiesCount.textContent = activities.length.toString()
    }

    cartHeadingCount.textContent = `${hotels.length + activities.length}`
  }

  // Function to rebuild the extras list in real-time
  async function refreshExtrasList(): Promise<void> {
    // Re-get everything from the beginning to ensure correct order
    await loadCartExtras()
  }

  // Function to handle transport selection
  async function handleTransportToggle(item: HTMLElement, isSelected: boolean) {
    // isSelected is the target state - if true, we're adding transport, if false, we're removing it

    // If removing transport (unchecking), show confirmation popup
    if (!isSelected) {
      // Open confirmation popup
      const transportRemoveTrigger = document.getElementById('transport-remove-trigger')

      // Store reference to the item to remove if confirmed
      localStorage.setItem('pending_transport_removal', item.dataset.addonId || '')

      // Open the popup
      if (transportRemoveTrigger) {
        transportRemoveTrigger.click()
      }

      // Don't remove yet - wait for confirmation
      return false
    }

    // If adding transport (checking), open address popup
    const transportTrigger = document.getElementById('transport-address-trigger')
    if (transportTrigger) {
      // Store current item reference for the form submission handler
      localStorage.setItem('pending_transport_item', item.dataset.addonId || '')

      transportTrigger.click()
    }

    // Don't select yet - this will happen after address submission
    return false
  }

  // Setup transport removal confirmation
  function setupTransportRemovalConfirmation() {
    const confirmBtn = document.querySelector('.confirm-transport-remove')
    const cancelBtn = document.querySelector('.cancel-transport-remove')
    const closeBtn = document.querySelector('.removal-confirmation .CloseButton')
    const translations = JSON.parse(document.querySelector('.Cart')?.getAttribute('data-translations') || '{}')

    if (confirmBtn) {
      confirmBtn.addEventListener('click', () => {
        const pendingId = localStorage.getItem('pending_transport_removal')
        if (pendingId) {
          // Find the transport item
          const transportItem = document.querySelector(`.extra-item[data-addon-id="${pendingId}"]`) as HTMLElement

          if (transportItem) {
            // Actually remove transport
            toggleAddon(transportItem, false)

            // Remove the address data from localStorage
            localStorage.removeItem('transport_address')

            // Show toast notification with translated message
            showToast(translations.transportRemoval.successToast, 'success')
          }

          // Remove pending ID
          localStorage.removeItem('pending_transport_removal')
        }

        // Close the popup
        if (closeBtn && closeBtn instanceof HTMLElement) {
          closeBtn.click()
        }
      })
    }

    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => {
        // Reset any checkbox state that might have been visually changed
        const pendingId = localStorage.getItem('pending_transport_removal')
        if (pendingId) {
          const transportItems = document.querySelectorAll(`.extra-item[data-addon-id="${pendingId}"]`)
          transportItems.forEach((item) => {
            const checkbox = item.querySelector('input[type="checkbox"]') as HTMLInputElement
            if (checkbox) {
              checkbox.checked = true
            }
            item.setAttribute('data-selected', 'true')
          })

          // Remove pending ID
          localStorage.removeItem('pending_transport_removal')
        }

        // Close the popup
        if (closeBtn && closeBtn instanceof HTMLElement) {
          closeBtn.click()
        }
      })
    }
  }

  // Function to update transport cards with address display
  function updateTransportCardWithAddress() {
    const transportItems = document.querySelectorAll('.extra-item[data-addon-id="transport"]')
    const addressData = JSON.parse(localStorage.getItem('transport_address') || '{}')

    transportItems.forEach((item) => {
      // Remove existing address display if any
      const existingAddress = item.querySelector('[data-address-display]')
      if (existingAddress) existingAddress.remove()

      // Only add address display if transport is selected and address exists
      const isSelected = item.getAttribute('data-selected') === 'true'
      if (!isSelected || Object.keys(addressData).length === 0) return

      // Create address display
      const addressDisplay = document.createElement('div')
      addressDisplay.setAttribute('data-address-display', '')

      const addressText = document.createElement('p')
      addressText.setAttribute('data-address-text', '')
      addressText.innerHTML = `
        <span>${addressData.street}, ${addressData.city}, (${addressData.postal})</span>
      `

      const editIcon = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 17" fill="none"
              ><path
                fill="#F67258"
                d="M14.128 2.205a1.835 1.835 0 0 1 0 2.596l-.33.33a3.074 3.074 0 0 1-.356-.1 3.46 3.46 0 0 1-1.312-.828 3.46 3.46 0 0 1-.827-1.312 3.09 3.09 0 0 1-.1-.355l.33-.33a1.835 1.835 0 0 1 2.595 0ZM9.719 9.21c-.27.27-.404.404-.553.52a3.058 3.058 0 0 1-.565.349c-.17.081-.35.141-.712.262l-1.906.635a.495.495 0 0 1-.626-.626l.636-1.906c.12-.361.18-.542.261-.712.096-.2.213-.39.35-.565.115-.148.25-.283.52-.552L10.4 3.337a4.467 4.467 0 0 0 1.022 1.573c.538.538 1.11.847 1.573 1.022L9.72 9.21Z"
              ></path><path
                fill="#F67258"
                d="M13.69 14.025c.975-.976.975-2.548.975-5.69 0-1.033 0-1.895-.034-2.623l-4.242 4.241c-.234.235-.41.41-.608.565a4.057 4.057 0 0 1-.75.464c-.226.108-.463.186-.777.291l-1.954.652a1.495 1.495 0 0 1-1.891-1.891l.651-1.955c.105-.314.184-.55.292-.777.126-.266.282-.517.463-.75.155-.198.33-.374.565-.608l4.241-4.241c-.727-.035-1.59-.035-2.622-.035-3.143 0-4.714 0-5.69.976-.977.977-.977 2.548-.977 5.69 0 3.143 0 4.715.976 5.691.977.976 2.548.976 5.69.976 3.143 0 4.715 0 5.691-.976Z"
              ></path></svg
            >`

      const editButton = document.createElement('button')
      editButton.setAttribute('data-edit-address-button', '')
      editButton.innerHTML = `<div>${editIcon} ${editIcon}</div>  <span>${t.addressForm.editButton}</span>`
      editButton.addEventListener('click', (e) => {
        e.stopPropagation()
        // Open popup to edit address
        document.getElementById('transport-address-trigger')?.click()
      })

      // Add edit button first, then address text
      addressDisplay.appendChild(editButton)
      addressDisplay.appendChild(addressText)

      // Add to item after price info
      item.appendChild(addressDisplay)
    })
  }

  // Listen for the custom event from the React form
  document.addEventListener('address-form-submitted', (event: Event) => {
    const customEvent = event as CustomEvent
    const data = customEvent.detail?.data

    console.log('Address form submitted with data:', data)

    if (!data) return

    // Get pending transport item and select it
    const pendingItemId = localStorage.getItem('pending_transport_item')
    if (pendingItemId) {
      const transportItem = document.querySelector(`.extra-item[data-addon-id="${pendingItemId}"]`) as HTMLElement
      if (transportItem) {
        toggleAddon(transportItem, true)
      }
      localStorage.removeItem('pending_transport_item')
    }

    // Update transport card to show address with delay
    setTimeout(() => {
      updateTransportCardWithAddress()
    }, 200)
  })

  // Setup address form events
  function setupAddressForm() {
    // No need to do anything here as the React component handles everything
  }

  // Initialize document event listeners
  document.addEventListener('DOMContentLoaded', () => {
    // First initialize the participant input to ensure it has the correct value from localStorage
    initParticipantInput()

    // Setup address form
    setupAddressForm()

    // Setup extras popup events
    setupExtrasPopupEvents()

    // Setup transport removal confirmation
    setupTransportRemovalConfirmation()

    // Then load cart items and update alerts after everything is loaded
    loadCartItems().then(() => {
      // Give the DOM a moment to update before checking alerts
      setTimeout(() => {
        updateParticipantAlerts()
        // Update transport cards with address if needed
        updateTransportCardWithAddress()
      }, 100)
    })
  })

  // Function to open addons popup
  async function openAddonsPopup(sortedAddons: Array<{ _key: string; name: string; image: any; pricing: any }>) {
    const popupTrigger = document.getElementById('extras-popup-trigger')! as HTMLButtonElement | null
    const extrasList = document.querySelector('.extras-list')! as HTMLElement

    // Clear content
    extrasList.innerHTML = ''

    // Get the latest addon selections from localStorage
    const currentSelectedAddons: Array<{ id: string; count?: number }> = JSON.parse(
      localStorage.getItem('cart_order_addons') || '[]'
    )

    // Instead of creating new elements, clone the existing ones from the main list
    for (const addon of sortedAddons) {
      // Find existing element in the main list
      const existingElement = document.querySelector(`.extra-item[data-addon-id="${addon._key}"]`) as HTMLElement

      if (existingElement) {
        // Clone the existing element without event listeners
        const clonedElement = existingElement.cloneNode(true) as HTMLElement

        // Update selected state if needed
        const isSelected = currentSelectedAddons.some((item) => item.id === addon._key)
        const checkboxElem = clonedElement.querySelector('input[type="checkbox"]') as HTMLInputElement
        if (checkboxElem) {
          checkboxElem.checked = isSelected
        }
        clonedElement.dataset.selected = isSelected.toString()
        clonedElement.dataset.inPopup = 'true'

        extrasList.appendChild(clonedElement)
      } else {
        // If element doesn't exist yet (not in initial 6), create a new one
        const newIsSelected = currentSelectedAddons.some((item) => item.id === addon._key)
        const extraElement = await renderExtra(addon, newIsSelected, true)
        if (extraElement) {
          extrasList.appendChild(extraElement)
        }
      }
    }

    // Trigger the popup
    popupTrigger?.click()
  }

  // Modify renderExtra to handle transport special case - Fix address display insertion
  async function renderExtra(
    extra: {
      _key: string
      name: string
      image: any
      pricing: {
        type: string
        fixedPrice?: number
        threshold?: {
          basePrice: number
          maxUnits: number
          additionalPrice: number
          singular: string
        }
      }
    },
    isSelected: boolean = false,
    inPopup: boolean = false
  ): Promise<HTMLElement | null> {
    const templateElement = document.getElementById('extras-template') as HTMLTemplateElement | null
    if (!templateElement) return null

    const clone = templateElement.content.cloneNode(true) as DocumentFragment
    const item = clone.querySelector('.extra-item') as HTMLElement
    if (inPopup) {
      item.dataset.inPopup = 'true'
    }

    // Set data attributes
    item.dataset.addonId = extra._key
    item.dataset.selected = isSelected.toString()

    // Setup image
    if (extra.image) {
      const imgWrapper = item.querySelector('.img-wrapper')!
      const optimizedImage = await optimizeImage({
        image: extra.image.asset.url,
        width: extra.image.asset.metadata.dimensions.width,
        height: extra.image.asset.metadata.dimensions.height,
      })

      const img = document.createElement('img')
      img.src = optimizedImage.src
      img.srcset = optimizedImage.srcSet.attribute
      img.sizes = ''
      img.alt = extra.name
      img.loading = 'lazy'
      imgWrapper.appendChild(img)
    }

    // Set name and price
    const nameElement = item.querySelector('.name')!
    nameElement.textContent = extra.name

    const priceElement = item.querySelector('.price')!
    const priceDetailsElement = item.querySelector('.price-details')!

    const plusIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="12" height="13" fill="none"><path stroke="#F67258" stroke-linecap="round" d="M9 6.963H6m0 0H3m3 0v-3m0 3v3"/></svg>`

    // Handle different pricing types
    if (extra.pricing.type === 'fixed' && extra.pricing.fixedPrice) {
      priceElement.innerHTML = `<strong>${extra.pricing.fixedPrice} ${t.currency}</strong>`
      priceDetailsElement.textContent = ''
    } else if (extra.pricing.type === 'threshold' && extra.pricing.threshold) {
      const { basePrice, maxUnits, additionalPrice } = extra.pricing.threshold
      priceElement.innerHTML = `<strong>${t.from} ${basePrice} ${t.currency}</strong><span>/ ${t.to} ${maxUnits} ${t.people}</span>`
      priceDetailsElement.innerHTML = `${plusIcon} <span>${t.additionalPerson}</span><strong>${additionalPrice} ${t.currency}</strong>`
    }

    // Setup checkbox
    const checkbox = item.querySelector('input[type="checkbox"]') as HTMLInputElement
    if (checkbox) {
      checkbox.checked = isSelected

      // Add event listeners only if not in popup
      if (!inPopup) {
        // Special handling for transport
        if (extra._key === 'transport') {
          checkbox.addEventListener('change', async (e) => {
            e.stopPropagation()
            e.preventDefault() // Prevent default to handle manually

            // Determine the target state - if checkbox is currently checked, we want to uncheck (remove)
            // If it's unchecked, we want to check (add)
            const targetState = checkbox.checked
            await handleTransportToggle(item, targetState)
          })

          item.addEventListener('click', async (e) => {
            if (e.target === checkbox || (checkbox && checkbox.contains(e.target as Node))) {
              return
            }
            e.preventDefault()

            // Toggle from current state - if item is selected, the target state is unselected
            const currentState = item.dataset.selected === 'true'
            await handleTransportToggle(item, !currentState)
          })

          item.addEventListener('keydown', async (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault()

              // Toggle from current state
              const currentState = item.dataset.selected === 'true'
              await handleTransportToggle(item, !currentState)
            }
          })
        } else {
          // Regular addons
          checkbox.addEventListener('change', async (e) => {
            e.stopPropagation()
            await toggleAddon(item, checkbox.checked)
          })

          item.addEventListener('click', async (e) => {
            if (e.target === checkbox || (checkbox && checkbox.contains(e.target as Node))) {
              return
            }
            checkbox.checked = !checkbox.checked
            await toggleAddon(item, checkbox.checked)
          })

          item.addEventListener('keydown', async (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault()
              checkbox.checked = !checkbox.checked
              await toggleAddon(item, checkbox.checked)
            }
          })
        }
      }
    }

    // If it's a transport item and is selected, add address display
    if (extra._key === 'transport' && isSelected) {
      const addressData = JSON.parse(localStorage.getItem('transport_address') || '{}')
      if (Object.keys(addressData).length > 0) {
        // Create address display
        const addressDisplay = document.createElement('div')
        addressDisplay.setAttribute('data-address-display', '')

        const addressText = document.createElement('p')
        addressText.setAttribute('data-address-text', '')
        addressText.innerHTML = `
          <span>${addressData.street}, ${addressData.city}, (${addressData.postal})</span>
        `

        const editIcon = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 17" fill="none"
              ><path
                fill="#F67258"
                d="M14.128 2.205a1.835 1.835 0 0 1 0 2.596l-.33.33a3.074 3.074 0 0 1-.356-.1 3.46 3.46 0 0 1-1.312-.828 3.46 3.46 0 0 1-.827-1.312 3.09 3.09 0 0 1-.1-.355l.33-.33a1.835 1.835 0 0 1 2.595 0ZM9.719 9.21c-.27.27-.404.404-.553.52a3.058 3.058 0 0 1-.565.349c-.17.081-.35.141-.712.262l-1.906.635a.495.495 0 0 1-.626-.626l.636-1.906c.12-.361.18-.542.261-.712.096-.2.213-.39.35-.565.115-.148.25-.283.52-.552L10.4 3.337a4.467 4.467 0 0 0 1.022 1.573c.538.538 1.11.847 1.573 1.022L9.72 9.21Z"
              ></path><path
                fill="#F67258"
                d="M13.69 14.025c.975-.976.975-2.548.975-5.69 0-1.033 0-1.895-.034-2.623l-4.242 4.241c-.234.235-.41.41-.608.565a4.057 4.057 0 0 1-.75.464c-.226.108-.463.186-.777.291l-1.954.652a1.495 1.495 0 0 1-1.891-1.891l.651-1.955c.105-.314.184-.55.292-.777.126-.266.282-.517.463-.75.155-.198.33-.374.565-.608l4.241-4.241c-.727-.035-1.59-.035-2.622-.035-3.143 0-4.714 0-5.69.976-.977.977-.977 2.548-.977 5.69 0 3.143 0 4.715.976 5.691.977.976 2.548.976 5.69.976 3.143 0 4.715 0 5.691-.976Z"
              ></path></svg
            >`

        const editButton = document.createElement('button')
        editButton.setAttribute('data-edit-address-button', '')
        editButton.innerHTML = `<div>${editIcon} ${editIcon}</div>  <span>${t.addressForm.editButton}</span>`
        editButton.addEventListener('click', (e) => {
          e.stopPropagation()
          // Open popup to edit address
          document.getElementById('transport-address-trigger')?.click()
        })

        // Add edit button first, then address text
        addressDisplay.appendChild(editButton)
        addressDisplay.appendChild(addressText)

        // Add to item after price info
        item.appendChild(addressDisplay)
      }
    }

    return item
  }

  // Modify extras popup handling for transport items
  function setupExtrasPopupEvents() {
    const extrasList = document.querySelector('.extras-list')
    if (!extrasList) return

    extrasList.addEventListener('click', async (e) => {
      const target = e.target as HTMLElement
      const addonItem = target.closest('.extra-item') as HTMLElement

      if (!addonItem) return

      // Special handling for transport in popup
      if (addonItem.dataset.inPopup === 'true' && addonItem.dataset.addonId === 'transport') {
        e.preventDefault()
        e.stopPropagation()

        // Close extras popup first
        const closeButton = document.querySelector(
          '.popup-content[data-popup-id="extras-popup-container"] .CloseButton'
        )
        if (closeButton) {
          closeButton.dispatchEvent(new Event('click'))
        }

        // Then handle transport toggle
        setTimeout(() => {
          const isCurrentlySelected = addonItem.dataset.selected === 'true'
          // If currently selected, we want to remove it. If not selected, we want to add it.
          handleTransportToggle(addonItem, !isCurrentlySelected)
        }, 100) // Small delay to ensure extras popup closes first

        return
      }
    })
  }

  // Modified toggleAddon to update transport address display
  async function toggleAddon(item: HTMLElement, isSelected: boolean) {
    // Update data attribute
    item.dataset.selected = isSelected.toString()

    // Get addon ID
    const addonId = item.dataset.addonId
    if (!addonId) return

    // Update the checkbox to match the selected state
    const checkbox = item.querySelector('input[type="checkbox"]') as HTMLInputElement
    if (checkbox) {
      checkbox.checked = isSelected
    }

    // Update localStorage
    updateOrderAddons(addonId, isSelected)

    // Find and update all instances of this addon (both in main list and popup)
    document.querySelectorAll(`.extra-item[data-addon-id="${addonId}"]`).forEach((element) => {
      element.setAttribute('data-selected', isSelected.toString())
      const elementCheckbox = element.querySelector('input[type="checkbox"]') as HTMLInputElement
      if (elementCheckbox) {
        elementCheckbox.checked = isSelected
      }
    })

    // Update show more button visibility
    const showMoreWrapper = document.querySelector('.show-more-wrapper') as HTMLElement
    if (showMoreWrapper) {
      const allAddons = document.querySelectorAll('.extras .list .extra-item')
      const selectedAddons = document.querySelectorAll('.extras .list .extra-item[data-selected="true"]')

      // Show the button if not all addons are selected
      if (selectedAddons.length < allAddons.length) {
        showMoreWrapper.style.display = 'flex'
      } else {
        showMoreWrapper.style.display = 'none'
      }
    }

    // Special handling for transport
    if (addonId === 'transport') {
      // If deselecting, remove address from localStorage
      if (!isSelected) {
        localStorage.removeItem('transport_address')
      }

      // Update address display for transport with a delay to ensure the DOM is ready
      setTimeout(() => {
        updateTransportCardWithAddress()
      }, 100)
    }

    // Completely rebuild the addon list to ensure correct order
    await refreshExtrasList()
  }

  // Function to update order addons in localStorage
  function updateOrderAddons(addonId: string, isSelected: boolean): void {
    let orderAddons: Array<{ id: string; count?: number }> = JSON.parse(
      localStorage.getItem('cart_order_addons') || '[]'
    )

    if (isSelected) {
      // Add if not already in the list
      if (!orderAddons.some((addon) => addon.id === addonId)) {
        orderAddons.push({ id: addonId, count: 1 })
      }
    } else {
      // Remove if in the list
      orderAddons = orderAddons.filter((addon) => addon.id !== addonId)
    }

    localStorage.setItem('cart_order_addons', JSON.stringify(orderAddons))

    // Update count displayed
    updateExtrasCount()

    // Dispatch event for other components that might need to know
    document.dispatchEvent(
      new CustomEvent('order-addons-updated', {
        detail: { addons: orderAddons },
      })
    )
  }

  // Function to update the extras count display
  function updateExtrasCount(): void {
    const orderAddons = JSON.parse(localStorage.getItem('cart_order_addons') || '[]')
    const countElement = document.querySelector('.extras .count')
    if (countElement) {
      // Transport is no longer automatically included
      countElement.textContent = orderAddons.length.toString()
    }
  }

  // Function to load cart extras
  async function loadCartExtras() {
    const extrasList = document.querySelector('.extras .list')
    if (!extrasList) return

    // Get extras data
    const extrasData = JSON.parse(extrasList.getAttribute('data-addons-data') || '{}')
    const orderAddons: Array<{ id: string; count?: number }> = JSON.parse(
      localStorage.getItem('cart_order_addons') || '[]'
    )

    // Clear list first
    extrasList.innerHTML = ''

    // Prepare arrays for selected and unselected addons
    const selectedAddons: Array<{ _key: string; name: string; image: any; pricing: any }> = []
    const unselectedAddons: Array<{ _key: string; name: string; image: any; pricing: any }> = []

    // Create a combined list of all addons
    const allAddons: Array<{
      _key: string
      name: string
      image: any
      pricing: {
        type: string
        fixedPrice?: number
        threshold?: {
          basePrice: number
          maxUnits: number
          additionalPrice: number
          singular: string
        }
      }
    }> = []

    // Add transport option
    if (extrasData.transportOptions) {
      allAddons.push({
        _key: 'transport',
        name: t.transportAddonName,
        image: extrasData.transportOptions.image,
        pricing: extrasData.transportOptions.pricing,
      })
    }

    // Add regular addons from Sanity
    if (extrasData.addonsList && Array.isArray(extrasData.addonsList)) {
      allAddons.push(...extrasData.addonsList)
    }

    // Now sort addons into selected and unselected groups
    allAddons.forEach((addon) => {
      const isSelected = orderAddons.some((item) => item.id === addon._key)
      if (isSelected) {
        selectedAddons.push(addon)
      } else {
        unselectedAddons.push(addon)
      }
    })

    // First render ALL selected addons
    for (const addon of selectedAddons) {
      const extraElement = await renderExtra(addon, true)
      if (extraElement) {
        extrasList.appendChild(extraElement)
      }
    }

    // Calculate how many unselected addons to show initially
    // Show up to 6 total items in the initial view
    const maxInitialAddons = 6
    const remainingSlots = Math.max(0, maxInitialAddons - selectedAddons.length)

    // Then show some unselected addons (limited number)
    const visibleUnselectedAddons = unselectedAddons.slice(0, remainingSlots)
    const hiddenAddons = unselectedAddons.slice(remainingSlots)

    // Render visible unselected addons
    for (const addon of visibleUnselectedAddons) {
      const extraElement = await renderExtra(addon, false)
      if (extraElement) {
        extrasList.appendChild(extraElement)
      }
    }

    // Combine all addons for the popup, with selected first
    const sortedAddons = [...selectedAddons, ...unselectedAddons]

    // Setup show more button
    const showMoreButton = document.querySelector('.show-more-extras')
    if (showMoreButton) {
      showMoreButton.setAttribute('data-hidden-addons', JSON.stringify(hiddenAddons))

      // Hide button if no more addons to show
      const showMoreWrapper = document.querySelector('.show-more-wrapper')
      if (showMoreWrapper && hiddenAddons.length === 0) {
        if (showMoreWrapper instanceof HTMLElement) {
          showMoreWrapper.style.display = 'none'
        }
      }

      // Setup click event
      showMoreButton.addEventListener('click', () => {
        openAddonsPopup(sortedAddons)
      })
    }

    // Update count display
    updateExtrasCount()
  }

  // Main function to load cart items
  async function loadCartItems() {
    const cartLoader = document.querySelector('[data-loader]')! as HTMLDivElement
    const cartEmpty = document.querySelector('.empty')! as HTMLDivElement

    try {
      // Get cart data from store
      const cart = cartStore.get()

      // Show empty state if cart is empty
      if (!cart.hotels.length && !cart.activities.length) {
        cartLoader.style.display = 'none'
        cartEmpty.style.display = 'block'
        return
      }

      // Fetch all hotels
      const hotelPromises = cart.hotels.map(async (item) => {
        const addonIds = item.addOns.map((addon) => addon.id)
        const hotelData = await fetchHotelData(item.id, addonIds)
        if (hotelData) {
          const matchedAddons = item.addOns
            .map((addon: AddonItem) => {
              const fullAddon = hotelData.addons?.addonsList?.find((a: any) => a._key === addon.id)
              return {
                ...addon,
                fullData: fullAddon || null,
              }
            })
            .filter((addon) => addon.fullData !== null)

          return {
            ...hotelData,
            cartAddons: matchedAddons,
          }
        }
        return null
      })

      // Fetch all activities
      const activityPromises = cart.activities.map(async (item) => {
        const addonIds = item.addOns.map((addon) => addon.id)
        const activityData = await fetchActivityData(item.id, addonIds)
        if (activityData) {
          const matchedAddons = item.addOns
            .map((addon: AddonItem) => {
              const fullAddon = activityData.addons?.addonsList?.find((a: any) => a._key === addon.id)
              return {
                ...addon,
                fullData: fullAddon || null,
              }
            })
            .filter((addon) => addon.fullData !== null)

          return {
            ...activityData,
            cartAddons: matchedAddons,
          }
        }
        return null
      })

      // Wait for all fetches to complete
      const [hotels, activities] = await Promise.all([Promise.all(hotelPromises), Promise.all(activityPromises)])

      // Filter out null results
      const validHotels = hotels.filter(Boolean)
      const validActivities = activities.filter(Boolean)

      console.log('Fetched hotels:', validHotels)
      console.log('Fetched activities:', validActivities)

      // Hide loader when done
      cartLoader.style.display = 'none'

      // If nothing was fetched successfully, show empty state
      if (validHotels.length === 0 && validActivities.length === 0) {
        cartEmpty.style.display = 'block'
        return
      }

      // Render the cart items
      renderCartItems(validHotels, validActivities)

      // Load extras
      loadCartExtras()
    } catch (error) {
      console.error('Error loading cart items:', error)
      cartLoader.style.display = 'none'

      // Create error message
      const errorElement = document.querySelector('.error-wrapper')! as HTMLDivElement
      errorElement.style.display = 'block'
    }
  }

  // Listen for cart updates (both hotels and activities)
  document.addEventListener('cart-updated', async (event) => {
    type CartEventDetail = {
      itemId: string
      itemType: 'hotels' | 'activities'
      action: 'remove' | 'update'
    }

    type CartAddon = {
      id: string
      count?: number
    }

    type CartItem = {
      id: string
      addOns: CartAddon[]
    }

    const detail = (event as CustomEvent<CartEventDetail>).detail
    if (!detail || !detail.itemId || !detail.itemType || !detail.action) return

    const item = document.querySelector(`[data-item-id="${detail.itemId}"]`) as HTMLElement | null
    if (!item) return

    if (detail.action === 'remove') {
      const cartHeadingCount = document.querySelector(
        '.cart-container .header .cart-heading .count'
      )! as HTMLSpanElement
      // Animate removal and then remove from DOM
      item.classList.add('removing')
      setTimeout(() => {
        item.remove()

        // Check if there are no more items of this type
        const section = document.querySelector(`.${detail.itemType}-section`)
        const updatedItemType = detail.itemType === 'hotels' ? 'hotel' : 'activity'
        cartHeadingCount.textContent = `${cartStore.get().hotels.length + cartStore.get().activities.length}`
        if (section) {
          const remainingItems = section.querySelectorAll(`.${updatedItemType}-item`).length
          // Update count
          const countElement = section.querySelector('.count')
          if (countElement) {
            countElement.textContent = remainingItems.toString()
          }
          // Remove section if empty
          if (remainingItems === 0) {
            section.remove()
          }
        }

        // Update the main cart count
        const cartCount = document.querySelector('.cart-heading .count')
        if (cartCount) {
          const totalItems = document.querySelectorAll('.hotel-item, .activity-item').length
          cartCount.textContent = totalItems.toString()
        }

        // Check if cart is now empty
        if (!document.querySelector('.hotel-item') && !document.querySelector('.activity-item')) {
          const cartEmpty = document.querySelector('.empty')
          const itemsWrapper = document.querySelector('.items-wrapper')
          if (cartEmpty && itemsWrapper) {
            cartEmpty.setAttribute('style', 'display: block')
            itemsWrapper.setAttribute('style', 'display: none')
          }
        }
      }, 300)
    } else if (detail.action === 'update') {
      // Update addons list if it exists
      const addonList = item.querySelector('.addon-list')
      if (addonList) {
        const cart = cartStore.get()
        const cartItem = cart[detail.itemType].find((i: CartItem) => i.id === detail.itemId)
        addonList.innerHTML = ''

        if (cartItem && cartItem.addOns.length > 0) {
          const addonsNames = JSON.parse(item.getAttribute('data-addon-names') || '{}')
          cartItem.addOns.forEach((addon: CartAddon) => {
            const li = document.createElement('li')
            li.innerHTML = addon.count
              ? `${addonsNames.find((a: any) => a.id === addon.id)?.name}: <strong>${addon.count}</strong>`
              : addonsNames.find((a: any) => a.id === addon.id)?.name
            addonList.appendChild(li)
          })
        }

        // Update addons button state
        const addonsButton = item.querySelector('.addons')
        if (addonsButton) {
          const hasAddons = cartItem && cartItem.addOns.length > 0
          addonsButton.setAttribute('data-is-editing', hasAddons ? 'true' : 'false')
          const span = addonsButton.querySelector('.text')
          if (span) {
            span.innerHTML = hasAddons ? t.editAddons : `${t.addons} <strong>${t.optional}</strong>`
          }
        }
      }
    }
  })
</script>
