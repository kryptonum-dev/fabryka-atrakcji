---
import Layout from '@/src/layouts/Layout.astro'
import type { Language } from '@/global/languages'
import { getLangFromPath } from '@/src/global/languages'
import Breadcrumbs from '@/src/layouts/Breadcrumbs.astro'
import sanityFetch from '@/src/utils/sanity.fetch'
import metadataFetch from '@/src/utils/metadata.fetch'
import { ImageDataQuery } from '@/src/components/ui/image'
import { PortableTextQuery } from '@/src/components/ui/portable-text'
import Components, { Components_Query, type ComponentsProps } from '@/src/components/Components.astro'
import Hero from '@/src/components/offer/Hero.astro'
import ContentPT, { type Props as ContentPTProps, ContentPT_Query } from '@/src/components/ui/content-pt/index.astro'
import Faq, { Faq_Query } from '@/src/components/ui/content-pt/offer/Faq.astro'
import Testimonials, { Testimonials_Query } from '@/src/components/ui/content-pt/offer/Testimonials.astro'
import Amenities, { Amenities_Query } from '@/src/components/ui/content-pt/hotel/Amenities.astro'
import Location, { Location_Query } from '@/src/components/ui/content-pt/hotel/Location.astro'
import StayingRules, { StayingRules_Query } from '@/src/components/ui/content-pt/hotel/StayingRules.astro'
import Checklist, { Checklist_Query } from '@/src/components/ui/content-pt/shared/Checklist.astro'
import BlocksWithImage, { BlocksWithImage_Query } from '@/src/components/ui/content-pt/offer/BlocksWithImage.astro'
import ImageWithHeadingAndText, {
  ImageWithHeadingAndText_Query,
} from '@/src/components/ui/content-pt/offer/ImageWithHeadingAndText.astro'
import RowsWithIcons, { RowsWithIcons_Query } from '@/src/components/ui/content-pt/offer/RowsWithIcons.astro'
import Timeline, { Timeline_Query } from '@/src/components/ui/content-pt/offer/Timeline.astro'
import NextSteps, { NextSteps_Query } from '@/src/components/ui/content-pt/offer/NextSteps.astro'
import SubmitSidebar from '@/src/components/offer/SubmitSidebar.astro'
import AddonsPopup from '@/src/components/offer/AddonsPopup.astro'
import RemoveConfirmation from '@/src/components/ui/RemoveConfirmation.astro'
import type { BaseHotelProps } from '@/src/global/types'
import Image, { Image_Query } from '@/src/components/ui/content-pt/shared/Image.astro'

export type SingleHotelProps = BaseHotelProps & {
  hotelsPage: {
    name: string
    slug: string
  }
  _type: 'Hotels_Collection'
  components: ComponentsProps
  content: ContentPTProps['value']
}

export async function fetchData(slug: string, lang: Language) {
  const prefixes = {
    pl: '/pl/hotele/',
    en: '/en/hotels/',
  }

  const page = await sanityFetch<SingleHotelProps>({
    query: `
    *[_type == 'Hotels_Collection' && language == $language && slug.current == $slug][0] {
      _id,
      "hotelsPage": *[_type == "Hotels_Page" && language == $language][0] {
        name,
        "slug": slug.current
      },
      _type,
      name,
      "slug": slug.current,
      ${PortableTextQuery('title')}
      description,
      ${ImageDataQuery('imageList[]')}
      amenities[]->{
        _id,
        name,
      },
      location->{
        _id,
        name
      },
      stars,
      numberOfRooms,
      maxPeople,
      address,
      googleMaps{
        googleMapsLink,
      },
      popularityIndex,
      pricing,
      addons{
        hasAddons,
        ${PortableTextQuery('heading')}
        addonsChoice,
        minOneAddon,
        addonsLayout,
        addonsHaveImage,
        addonsList[] {
          _key,
          name,
          ${ImageDataQuery('image')}
          pricing {
            type,
            fixedPrice,
            perUnit {
              price,
              hasCount,
              singular,
              plural
            },
            threshold {
              basePrice,
              maxUnits,
              additionalPrice,
              singular,
              plural
            },
          },
          description
        },
        additionalInfo
      },
      ${ContentPT_Query([Faq_Query, Image_Query, Testimonials_Query, Amenities_Query, Location_Query, StayingRules_Query, Checklist_Query, BlocksWithImage_Query, ImageWithHeadingAndText_Query, RowsWithIcons_Query, Timeline_Query, NextSteps_Query])}
      ${Components_Query}
    }
  `,
    params: { language: lang, slug: `${prefixes[lang]}${slug}/` },
  })

  if (!page) return null

  const metadata = await metadataFetch(page.slug)

  if (!metadata) return null

  return {
    page,
    metadata,
  }
}

export async function staticPaths(lang: Language) {
  const pages = await sanityFetch<{ slug: string }[]>({
    query: `
      *[_type == 'Hotels_Collection' && language == $language][] {
        "slug": slug.current,
      }
    `,
    params: { language: lang },
  })
  return pages?.map(({ slug }) => ({
    params: { slug: slug.split('/').slice(-2)[0] },
  }))
}

const { page, metadata } = Astro.props as NonNullable<Awaited<ReturnType<typeof fetchData>>>
const lang = (getLangFromPath(Astro.url.pathname) as Language) || 'pl'
---

<Layout {...metadata}>
  <Breadcrumbs
    data={[
      { name: page.hotelsPage.name, path: page.hotelsPage.slug },
      { name: page.name, path: page.slug },
    ]}
    firstItemType="OfferHero"
  />
  <Hero {...page} _type="Hotels_Collection" />

  <article
    class="wrapper max-width"
    id="content"
    data-item-id={page._id}
    data-item-type="hotels"
    data-item-name={page.name}
    data-has-addons={page.addons?.hasAddons || false}
    data-requires-addons={page.addons?.minOneAddon || false}
    data-addons-choice={page.addons?.addonsChoice || 'unlimited'}
  >
    <div class="content">
      <ContentPT
        value={page.content}
        additionalComponents={{
          Faq,
          Testimonials,
          Amenities,
          Location,
          StayingRules,
          Checklist,
          BlocksWithImage,
          ImageWithHeadingAndText,
          RowsWithIcons,
          Timeline,
          NextSteps,
          Image,
        }}
      />
    </div>
    <SubmitSidebar
      id={page._id}
      type="hotels"
      basePrice={page.pricing?.pricingVisible && page.pricing.hasFixedGroupPrice
        ? {
            amount: page.pricing.groupPrice!,
            maxPeople: page.pricing.groupPeopleCount!,
          }
        : undefined}
      perPersonPrice={page.pricing?.pricingVisible ? page.pricing.pricePerPerson || 0 : 0}
      addons={page.addons}
      name={page.name}
      pricingVisible={page.pricing?.pricingVisible}
    />
  </article>
  <Components data={page.components} hasPreviousSections />
  <AddonsPopup addons={page.addons} type="hotels" />
  <RemoveConfirmation
    itemId={page._id}
    itemType="hotels"
    hasAddons={!!page.addons?.hasAddons}
    lang={lang}
    itemName={page.name}
  />
</Layout>

<style lang="scss">
  .wrapper {
    display: grid;
    grid-template-columns: auto 1fr;
    justify-content: space-between;
    gap: 1.5rem;
    padding: clamp(3rem, calc(3.5vw / 0.48), 3.5rem) 0;

    .content {
      max-width: clamp(20rem, calc(25vw / 0.48), 40.9375rem);
      justify-self: start;

      :global(> :first-child) {
        margin-top: 0;

        :global(> :first-child) {
          margin-top: 0 !important;
        }
      }

      :global(> :last-child) {
        margin-bottom: 0;
      }

      :global(strong:not(h1 strong, h2 strong)) {
        font-weight: 700;
        color: var(--primary-800, #45051c);
      }

      :global(> p),
      :global(> ul),
      :global(> ol),
      :global(> ul li),
      :global(> ol li),
      :global(> ul p),
      :global(> ol p) {
        font-size: var(--typography-body-xl, 1.125rem);
        line-height: 1.5;
        margin-bottom: clamp(0.625rem, calc(0.75vw / 0.48), 0.75rem);
      }

      :global(> h2) {
        margin: clamp(3rem, calc(3.25vw / 0.48), 3.25rem) 0 1.5rem;
        font-size: var(--typography-heading-l);
      }

      :global(> h3) {
        color: var(--primary-700, #600d2a);
        font-size: var(--typography-body-2xl, 1.5rem);
        line-height: 1.25;
        margin: 1.5rem 0 1rem;
        letter-spacing: -0.04em;
        font-variant-numeric: lining-nums proportional-nums;

        font-weight: 700;
        font-family: 'Neue Haas Unica', 'Neue Haas Unica Fallback', sans-serif;
      }

      :global(li:last-child) {
        margin-bottom: 0;
      }
    }

    .pricing {
      background: var(--neutral-200, #f5f1ec);
      border-radius: 0.75rem;
      max-width: 27.0625rem;
      width: 100%;
      padding: 1.5rem;
      height: 15.625rem;
      justify-self: end;
      position: sticky;
      top: 89px;
      max-height: calc(100vh - 89px);
    }

    @media (max-width: 68.0625rem) {
      grid-template-columns: 1fr;
      justify-items: center;
      max-width: 48rem;
      padding-top: 0;
      gap: 0;
      .pricing {
        grid-row: 1/2;
        position: static;
        max-width: 100%;
      }
      .content {
        grid-row: 2/3;
        max-width: 100%;
        padding-top: clamp(3rem, calc(3.5vw / 0.48), 3.5rem);
      }
    }
  }
</style>

<script>
  import { trackEvent } from '@/src/pages/api/analytics/track-event'

  // Track hotel view event
  document.addEventListener('DOMContentLoaded', () => {
    // Get hotel information
    const containerEl = document.querySelector('.Hero') as HTMLElement
    const hotelId = containerEl?.dataset.id || ''
    const hotelName = containerEl?.dataset.name || ''
    const price = containerEl?.getAttribute('data-price') || 0

    // Track view_item event
    trackEvent({
      ga: {
        event_name: 'view_item',
        params: {
          currency: 'PLN',
          value: price,
          items: [
            {
              item_id: hotelId,
              item_name: hotelName,
            },
          ],
        },
      },
      meta: {
        event_name: 'ViewContent',
        content_name: document.title,
        params: {
          content_ids: [hotelId],
        },
      },
    })
  })
</script>
