---
import Layout from '@/src/layouts/Layout.astro'
import type { Language } from '@/global/languages'
import Breadcrumbs from '@/src/layouts/Breadcrumbs.astro'
import sanityFetch from '@/src/utils/sanity.fetch'
import metadataFetch from '@/src/utils/metadata.fetch'
import Hero from '@/src/components/caseStudy/Hero.astro'
import { ImageDataQuery, type ImageDataProps } from '@/src/components/ui/image'
import { PortableTextQuery, type PortableTextValue } from '@/src/components/ui/portable-text'
import Gallery from '@/src/components/caseStudy/Gallery.astro'
import ChallengeSolution from '@/src/components/caseStudy/ChallengeSolution.astro'
import Testimonial from '@/src/components/caseStudy/Testimonial.astro'
import Components, { Components_Query, type ComponentsProps } from '@/src/components/Components.astro'

type Props = NonNullable<Awaited<ReturnType<typeof fetchData>>>

export async function fetchData(slug: string, lang: Language) {
  const prefixes = {
    pl: '/pl/realizacje/',
    en: '/en/case-studies/',
  }

  const page = await sanityFetch<{
    caseStudyPage: {
      name: string
      slug: string
    }
    slug: string
    name: string
    title: PortableTextValue
    primaryImage: ImageDataProps
    galleryHeading: PortableTextValue
    mediaArray: {
      image: ImageDataProps
      youtubeId: string
    }[]
    duration: number
    localization: string
    services: string[]
    challenge: PortableTextValue
    solution: PortableTextValue
    results: PortableTextValue
    testimonial?: {
      name: string
      position: string
      company: string
      logo: string
      photo: ImageDataProps
      content: PortableTextValue
      date: string
    }
    components: ComponentsProps
  }>({
    query: `
    *[_type == 'CaseStudy_Collection' && language == $language && slug.current == $slug][0] {
      "caseStudyPage": *[_type == "CaseStudy_Page" && language == $language][0] {
        name,
        "slug": slug.current
      },
      "slug": slug.current,
      name,
      ${PortableTextQuery('title')}
      ${ImageDataQuery('primaryImage')}
      ${PortableTextQuery('galleryHeading')}
      mediaArray[]{
        ${ImageDataQuery('image')}
        youtubeId
      },
      duration,
      localization,
      services,
      ${PortableTextQuery('challenge')}
      ${PortableTextQuery('solution')}
      ${PortableTextQuery('results')}
      testimonial{
        name,
        position,
        company,
        date,
        "logo": logo.asset->url,
        ${ImageDataQuery('photo')}
        ${PortableTextQuery('content')}
      },
      ${Components_Query}
    }
  `,
    params: { language: lang, slug: `${prefixes[lang]}${slug}/` },
  })

  if (!page) return null

  const metadata = await metadataFetch(page.slug)

  if (!metadata) return null

  return {
    page,
    metadata,
  }
}

export async function staticPaths(lang: Language) {
  const pages = await sanityFetch<{ slug: string }[]>({
    query: `
      *[_type == 'CaseStudy_Collection' && language == $language][] {
        "slug": slug.current,
      }
    `,
    params: { language: lang },
  })
  return pages?.map(({ slug }) => ({
    params: { slug: slug.split('/').pop() },
  }))
}

const { page, metadata } = Astro.props
---

<Layout {...metadata}>
  <Breadcrumbs
    data={[
      { name: page.caseStudyPage.name, path: page.caseStudyPage.slug },
      { name: page.name, path: page.slug },
    ]}
    firstItemType="CaseStudyHero"
  />
  <Hero {...page} />
  <Gallery mediaArray={page.mediaArray} galleryHeading={page.galleryHeading} />
  <ChallengeSolution {...page} />
  {page.testimonial && <Testimonial {...page.testimonial} />}
  <Components data={page.components} hasPreviousSections />
</Layout>
