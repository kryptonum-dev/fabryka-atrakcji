---
import Button from '../components/ui/Button'
import Switch from '../components/ui/Switch.astro'
import { DOMAIN } from '../global/constants'
import { getLangFromPath } from '../global/languages'
import sanityFetch from '../utils/sanity.fetch'

const lang = getLangFromPath(Astro.url.pathname)

const { GTM_ID, privacyPolicySlug } = await sanityFetch<{ GTM_ID: string; privacyPolicySlug: string }>({
  query: `
    {
      "GTM_ID": *[_type == "global" && language == $language][0].analytics.gtm_id,
      "privacyPolicySlug": *[_type == "PrivacyPolicy_Page" && language == $language][0].slug.current
    }
  `,
  params: { language: lang },
})
if (!GTM_ID) return null

const translations = {
  pl: {
    necessary: {
      name: 'Niezbędne',
      description:
        'Te pliki cookie są konieczne do działania strony i nie mogą być wyłączone. Umożliwiają podstawowe funkcje, takie jak nawigacja, dostęp do zabezpieczonych obszarów oraz prawidłowe działanie formularzy. Są niezbędne do zapewnienia funkcjonalności i bezpieczeństwa strony zgodnie z wymogami RODO.',
    },
    analytics: {
      name: 'Analityczne',
      description:
        'Pomagają nam zrozumieć, jak korzystasz z naszej strony, zbierając anonimowe dane o interakcjach, czasie spędzonym na stronie i odwiedzanych podstronach. Dzięki nim możemy identyfikować problemy, ulepszać strukturę i zawartość witryny oraz optymalizować doświadczenie użytkownika. Dane są przetwarzane w formie zagregowanej i pseudonimizowanej.',
    },
    preferences: {
      name: 'Preferencyjne',
      description:
        'Zapamiętują Twoje indywidualne wybory i ustawienia (np. preferowany język, rozmiar czcionki, układ strony) podczas Twojej sesji oraz między wizytami, aby dostosować wygląd i działanie strony do Twoich potrzeb. Zwiększają wygodę korzystania z witryny, eliminując potrzebę ponownego wprowadzania tych samych informacji.',
    },
    marketing: {
      name: 'Marketingowe',
      description:
        'Służą do śledzenia Twoich aktywności na naszej stronie i innych witrynach, aby tworzyć profile zainteresowań i wyświetlać Ci bardziej trafne i spersonalizowane reklamy. Przetwarzanie tych danych odbywa się wyłącznie za Twoją zgodą, zgodnie z przepisami RODO, i może być w każdej chwili wycofane.',
    },
    conversion_api: {
      name: 'API Konwersji',
      description:
        'Przesyła dane o Twoich działaniach bezpośrednio do platform reklamowych (takich jak Meta, LinkedIn, itp.), aby mierzyć skuteczność reklam zgodnie z RODO. Pozwala to na dokładniejsze śledzenie konwersji i optymalizację kampanii reklamowych.',
    },
    advanced_matching: {
      name: 'Zaawansowane Dopasowanie',
      description:
        'Umożliwia platformom reklamowym (takim jak Meta, LinkedIn, itp.) lepsze dopasowanie Twoich działań na stronie do Twojego profilu, co zwiększa trafność wyświetlanych reklam. Mechanizm ten działa w zgodzie z przepisami RODO, przetwarzając dane tylko za Twoją wyraźną zgodą.',
    },
    headerInitial: {
      heading: 'Korzystając ze strony zgadzasz się na użycie ciasteczek',
      description: {
        text: 'Korzystamy z cookie podobnych technologii, by analizować ruch na stronie, dopasować ją do Ciebie i wyświetlać trafniejsze reklamy.',
        linkText: 'Dowiedz się więcej',
      },
    },
    headerSettings: {
      heading: 'Ustawienia cookies',
      description: {
        text: 'Korzystając ze strony zgadzasz się na użycie tych ciasteczek.',
        linkText: 'Dowiedz się więcej',
      },
    },
    actions: {
      deny: 'Odmowa',
      setPreferences: 'Ustaw preferencje',
      agree: 'Zgoda na wszystkie',
    },
  },
}

const t = translations[lang]

const privacyPolicyUrl = `${DOMAIN}${privacyPolicySlug}`

const groups = [
  {
    id: 'necessary',
    name: t.necessary.name,
    description: t.necessary.description,
  },
  {
    id: 'analytics',
    name: t.analytics.name,
    description: t.analytics.description,
  },
  {
    id: 'preferences',
    name: t.preferences.name,
    description: t.preferences.description,
  },
  {
    id: 'marketing',
    name: t.marketing.name,
    description: t.marketing.description,
    subGroups: [
      {
        id: 'conversion_api',
        name: t.conversion_api.name,
        description: t.conversion_api.description,
      },
      {
        id: 'advanced_matching',
        name: t.advanced_matching.name,
        description: t.advanced_matching.description,
      },
    ],
  },
]
---

<noscript>
  <iframe
    src={`https://www.googletagmanager.com/ns.html?id=${GTM_ID}`}
    height="0"
    width="0"
    style="display:none;visibility:hidden;"
  >
  </iframe>
</noscript>
<aside class="cookie-consent" aria-hidden="true">
  <section class="content">
    <header class="header">
      <div data-header-initial>
        <h2 class="heading">{t.headerInitial.heading}</h2>
        <p class="description">
          {t.headerInitial.description.text}{' '}
          <a href={privacyPolicyUrl} target="_blank" rel="noopener" class="link" data-shade="light">
            {t.headerInitial.description.linkText}
          </a>
        </p>
      </div>
      <div data-header-settings style="display: none">
        <h3 class="heading">{t.headerSettings.heading}</h3>
        <p class="description">
          {t.headerSettings.description.text}{' '}
          <a href={privacyPolicyUrl} target="_blank" rel="noopener" class="link" data-shade="light">
            {t.headerSettings.description.linkText}
          </a>
        </p>
      </div>
    </header>
    <div class="settings" style="display: none">
      {
        groups.map(({ id, name, description, subGroups }) => (
          <div class="group" data-group={id}>
            <label for={id} style={{ ...(id === 'necessary' && { cursor: 'not-allowed' }) }}>
              <Switch
                {...(id === 'necessary' && {
                  style: { cursor: 'not-allowed' },
                })}
                inputProps={{
                  id,
                  ...(id === 'necessary' && {
                    disabled: true,
                    checked: true,
                  }),
                }}
                class="switch"
              />
              <p class="name">{name}</p>
              <p class="description">{description}</p>
            </label>
            {subGroups && (
              <div class="sub-groups">
                {subGroups.map((subGroup) => (
                  <label for={subGroup.id} class="sub-group">
                    <Switch
                      inputProps={{
                        id: subGroup.id,
                        'data-parent': id,
                      }}
                      class="switch"
                    />
                    <p class="name">{subGroup.name}</p>
                    <p class="description">{subGroup.description}</p>
                  </label>
                ))}
              </div>
            )}
          </div>
        ))
      }
    </div>
    <div class="actions">
      <Button className="agree" theme="primary">{t.actions.agree}</Button>
      <button class="setPreferences">{t.actions.setPreferences}</button>
      <button class="deny">{t.actions.deny}</button>
    </div>
  </section>
</aside>

<style lang="scss">
  :global(html) {
    &:has(.cookie-consent[aria-hidden='false']) {
      overflow: hidden;
    }
  }
  $padding: clamp(1.5rem, calc(2.5vw / 0.48), 2.5rem);

  .cookie-consent {
    padding: $padding var(--pageMargin);
    z-index: 9999;
    position: fixed;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(180deg, rgba(250, 247, 247, 0.3) 0%, #faf7f7 100%);
    backdrop-filter: blur(5px);
    display: grid;
    place-items: center;
    animation: popup-fade-in 150ms;
    &[aria-hidden='true'] {
      display: none;
    }

    .content {
      animation: content-bounce-in 250ms cubic-bezier(0.18, 0.89, 0.32, 1.17);
      padding: $padding;
      max-height: calc(100vh - $padding * 2);
      max-height: calc(100dvh - $padding * 2);
      border-radius: 1.25rem;
      max-width: 53.875rem;
      display: flex;
      flex-direction: column;
      position: relative;
      isolation: isolate;

      &::before,
      &::after {
        inset: 0;
        content: '';
        position: absolute;
        background-color: var(--neutral-100, #faf7f7);
        z-index: -1;
        border-radius: 1.11rem;
      }

      &::after {
        z-index: -2;
        inset: -2px;
        border-radius: 1.25rem;
        background: conic-gradient(
          from 135deg at 50% 50%,
          #798ddc 0deg,
          #e7c78f 90deg,
          #fa7468 266.40000343322754deg,
          #798ddc 360deg
        );
      }

      div[data-header-initial] {
        margin-bottom: clamp(2rem, calc(3.5vw / 0.48), 3.5rem);
        .heading {
          margin-bottom: 1.25rem;
          padding-right: 1.5rem;
          &::after {
            margin-left: 0.25rem;
            display: inline-block;
            content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' fill='none'%3E%3Cpath fill='%23F67258' fill-rule='evenodd' d='M7.991 2.667c-.203.173-.304.26-.413.332a2.26 2.26 0 0 1-.82.34c-.129.025-.261.036-.527.057-.668.053-1.002.08-1.28.178a2.26 2.26 0 0 0-1.38 1.38c-.098.278-.124.612-.178 1.28a4.772 4.772 0 0 1-.057.526 2.26 2.26 0 0 1-.34.82 4.77 4.77 0 0 1-.332.414c-.434.51-.652.764-.779 1.031a2.26 2.26 0 0 0 0 1.95c.127.266.345.521.78 1.031.172.203.259.305.331.413.167.248.282.527.34.82.026.129.036.262.057.528.054.667.08 1.001.179 1.28a2.26 2.26 0 0 0 1.378 1.379c.28.098.613.125 1.28.178.267.021.4.032.527.057.294.058.573.173.821.34.109.073.21.16.413.332.51.435.765.652 1.031.78a2.26 2.26 0 0 0 1.95 0c.267-.128.522-.345 1.032-.78.203-.173.304-.26.412-.332a2.26 2.26 0 0 1 .821-.34c.128-.025.261-.036.527-.057.668-.053 1.002-.08 1.28-.178a2.26 2.26 0 0 0 1.379-1.38c.098-.278.125-.612.178-1.28.022-.265.032-.398.058-.526a2.26 2.26 0 0 1 .34-.82c.072-.11.159-.21.332-.414.434-.51.651-.765.779-1.031a2.26 2.26 0 0 0 0-1.95c-.128-.267-.345-.521-.78-1.031-.172-.203-.259-.305-.332-.413a2.26 2.26 0 0 1-.34-.821c-.025-.128-.035-.26-.057-.527-.053-.667-.08-1.001-.178-1.28a2.26 2.26 0 0 0-1.379-1.379c-.278-.098-.612-.125-1.28-.178a4.776 4.776 0 0 1-.527-.057 2.26 2.26 0 0 1-.82-.34c-.109-.073-.21-.16-.413-.332-.51-.435-.765-.652-1.032-.78a2.26 2.26 0 0 0-1.95 0c-.266.128-.521.345-1.03.78Zm5.651 5.552a.678.678 0 0 0-.96-.959l-4.041 4.042-1.33-1.329a.678.678 0 1 0-.958.96L8.16 12.74a.678.678 0 0 0 .96 0l4.521-4.522Z' clip-rule='evenodd'/%3E%3C/svg%3E");
          }
        }
      }

      div[data-header-settings] {
        margin-bottom: clamp(1.25rem, calc(2vw / 0.48), 2rem);
        .heading {
          margin-bottom: 0.75rem;
        }
      }

      .heading {
        color: var(--primary-700, #600d2a);
        font-weight: 700;
        line-height: 1.25;
        letter-spacing: -0.04em;
        font-size: var(--typography-body-2xl, 1.5rem);
        font-family: 'Neue Haas Unica', 'Neue Haas Unica Fallback', sans-serif;
        text-transform: none;
      }
      .description {
        font-size: var(--typography-body-xl, 1.125rem);
        line-height: 1.5;
      }
      .settings {
        display: flex;
        flex-direction: column;
        gap: clamp(0.75rem, calc(1.25vw / 0.48), 1.25rem);
        overflow-y: auto;
        overscroll-behavior: contain;
        margin-bottom: clamp(2rem, calc(3.5vw / 0.48), 3.5rem);
        padding-right: 1.25rem;
        padding-left: 1px;
        .sub-groups {
          display: flex;
          flex-direction: column;
          padding-left: 1.5rem;
          padding-top: 1.5rem;
          gap: clamp(0.75rem, calc(1.25vw / 0.48), 1.25rem);
          position: relative;
          border-left: 1px dashed var(--neutral-500, #d2c1b0);
        }
        label {
          display: grid;
          grid-template-columns: auto 1fr;
          gap: 0.25rem clamp(1rem, calc(1.5vw / 0.48), 1.5rem);

          .switch {
            position: sticky;
            top: 0;
            grid-row: 1 / span 2;
          }

          .name {
            color: var(--primary-800, #45051c);
            font-weight: 700;
            line-height: 1.55;
            letter-spacing: -0.03em;
          }
          .description {
            font-size: var(--typography-body-m, 0.875rem);
            line-height: 1.7;
            letter-spacing: -0.01em;
          }
        }
      }
    }
    .actions {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 1rem 0;
      padding-top: clamp(1.75rem, calc(2.5vw / 0.48), 2.5rem);
      position: relative;
      isolation: isolate;

      &::before {
        inset: 0 calc(-1 * $padding) calc(-1 * $padding);
        content: '';
        position: absolute;
        background-color: var(--neutral-200);
        z-index: -1;
        border-radius: 0 0 1.11rem 1.11rem;
      }
      button {
        &:first-child {
          margin-right: auto;
        }

        &:not(:first-child) {
          min-height: 2.75rem;
          padding: 0 0.75rem;
          border-radius: 0.25rem;
          font-size: var(--typography-body-m, 0.875rem);
          cursor: pointer;
          line-height: 1.7;
          letter-spacing: -0.01em;
          position: relative;
          isolation: isolate;
          overflow: hidden;

          &::before {
            content: '';
            height: 1.3px;
            width: calc(100% - 1.5rem);
            background-color: currentColor;
            position: absolute;
            bottom: 0.625rem;
            left: 0.625rem;
            transform: scaleX(0);
            transform-origin: left;
            transition: transform 250ms var(--easing);
          }

          &::after {
            width: 100%;
            aspect-ratio: 1/1;
            position: absolute;
            content: '';
            background-color: var(--neutral-300, #ede6de);
            transform: translate(-50%, -50%) scale(0);
            transform-origin: center;
            z-index: -2;
            left: 50%;
            top: 50%;
            border-radius: 50%;
            transition: transform 450ms var(--easing);
          }

          &:hover {
            &::before {
              transition: transform 300ms cubic-bezier(0.18, 0.89, 0.32, 1.27);

              transform: scaleX(1);
            }
          }

          &:focus:not(:focus-visible) {
            &::after {
              transform: translate(-50%, -50%) scale(1.3);
            }
          }
        }
      }
    }
    @media (max-width: 639px) {
      .content {
        align-self: end;
        animation: content-slide-in 350ms var(--easing);
      }
      .actions {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        column-gap: 0.5rem;

        button {
          &:first-child {
            margin-right: unset;
            grid-row: 1/2;
            grid-column: 1/3;
            max-width: 100%;
            width: 100%;

            :global(span) {
              margin: 0 auto;
              padding-right: 1.75rem;
            }
          }

          &:not(:first-child) {
            &::before {
              inset: 0;
              height: 100%;
              width: 100%;
              transform: translateY(100%);
              background-color: var(--neutral-300);
              transition: transform 300ms var(--easing);
              z-index: -1;
            }
            &::after {
              transform: translate(-50%, -50%) scale(1.3);
              background-color: var(--neutral-100);
            }
            &:hover {
              &::before {
                transition: transform 300ms var(--easing);
                transform: translateY(0);
              }
            }
          }

          &:nth-child(2) {
            grid-row: 2/3;
            grid-column: 1/2;
          }

          &:nth-child(3) {
            grid-row: 2/3;
            grid-column: 2/3;
          }
        }
      }
    }

    @media (max-width: 359px) {
      .actions {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        row-gap: 0.5rem;
      }
    }
  }

  @keyframes popup-fade-in {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @keyframes content-bounce-in {
    0% {
      transform: scale(0.9);
      opacity: 0;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes content-slide-in {
    0% {
      transform: translateY(10%);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }
</style>

<script is:inline define:vars={{ GTM_ID }}>
  import { trackEvent } from '../utils/track-event'

  window.dataLayer = window.dataLayer || []
  function gtag() {
    window.dataLayer.push(arguments)
  }

  function trackPageView() {
    trackEvent('page_view', {
      page_title: document.title,
      page_location: window.location.href,
      google_analytics: {
        event_name: 'page_view',
        content_name: document.title,
      },
      meta: {
        event_name: 'page_view',
        content_name: document.title,
      },
    })
  }

  function getCookie(name) {
    const cookies = document.cookie.split(';').map((cookie) => cookie.trim())
    const cookie = cookies.find((cookie) => cookie.startsWith(`${name}=`))
    return cookie ? decodeURIComponent(cookie.substring(name.length + 1)) : null
  }
  function setCookie(name, value, days = 1) {
    const date = new Date(Date.now() + 86400000 * days)
    const expires = days ? `; expires=${date.toUTCString()}` : ''
    document.cookie = `${name}=${encodeURIComponent(value)}${expires}; SameSite=Strict;`
  }
  function setConsent(consent) {
    const consentMode = {
      functionality_storage: consent.necessary ? 'granted' : 'denied',
      security_storage: consent.necessary ? 'granted' : 'denied',
      ad_storage: consent.marketing ? 'granted' : 'denied',
      ad_user_data: consent.marketing ? 'granted' : 'denied',
      ad_personalization: consent.marketing ? 'granted' : 'denied',
      analytics_storage: consent.analytics ? 'granted' : 'denied',
      personalization_storage: consent.preferences ? 'granted' : 'denied',
      conversion_api: consent.conversion_api ? 'granted' : 'denied',
      advanced_matching: consent.advanced_matching ? 'granted' : 'denied',
    }
    gtag('consent', 'update', consentMode)
    setCookie('cookie-consent', JSON.stringify(consentMode), 90)

    const focusedElement = document.activeElement
    if (focusedElement && cookieConsentElement.contains(focusedElement)) {
      focusedElement.blur()
    }
    cookieConsentElement.style.display = 'none'
    cookieConsentElement.setAttribute('aria-hidden', 'true')

    // Dispatch an event that consent has been updated
    document.dispatchEvent(new CustomEvent('consent-updated'))
  }

  const cookieConsentElement = document.querySelector('.cookie-consent')
  const acceptAllButton = cookieConsentElement.querySelector('.agree')
  const preferencesButton = cookieConsentElement.querySelector('.setPreferences')
  const denyButton = cookieConsentElement.querySelector('.deny')
  let isPreferencesOpen = false

  // prettier-ignore
  ;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer',GTM_ID);

  if (getCookie('cookie-consent') === null) {
    gtag('consent', 'default', {
      functionality_storage: 'denied',
      security_storage: 'denied',
      ad_storage: 'denied',
      ad_user_data: 'denied',
      ad_personalization: 'denied',
      analytics_storage: 'denied',
      personalization_storage: 'denied',
      conversion_api: 'denied',
      advanced_matching: 'denied',
    })
    cookieConsentElement.setAttribute('aria-hidden', 'false')
  } else {
    gtag('consent', 'default', JSON.parse(getCookie('cookie-consent')))
    trackPageView()
  }

  acceptAllButton.addEventListener('click', () => {
    setConsent({
      necessary: true,
      marketing: true,
      analytics: true,
      preferences: true,
      conversion_api: true,
      advanced_matching: true,
    })
  })
  preferencesButton.addEventListener('click', () => {
    if (!isPreferencesOpen) {
      cookieConsentElement.querySelector('.header [data-header-initial]').style.display = 'none'
      cookieConsentElement.querySelector('.header [data-header-settings]').style.removeProperty('display')
      cookieConsentElement.querySelector('.settings').style.removeProperty('display')
      isPreferencesOpen = true
    } else {
      setConsent({
        necessary: cookieConsentElement.querySelector('input[id="necessary"]').checked,
        marketing: cookieConsentElement.querySelector('input[id="marketing"]').checked,
        analytics: cookieConsentElement.querySelector('input[id="analytics"]').checked,
        preferences: cookieConsentElement.querySelector('input[id="preferences"]').checked,
        conversion_api: cookieConsentElement.querySelector('input[id="conversion_api"]').checked,
        advanced_matching: cookieConsentElement.querySelector('input[id="advanced_matching"]').checked,
      })
    }
  })
  denyButton.addEventListener('click', () => {
    setConsent({
      necessary: false,
      marketing: false,
      analytics: false,
      preferences: false,
      conversion_api: false,
      advanced_matching: false,
    })
  })

  const marketingSwitch = cookieConsentElement.querySelector('input[id="marketing"]')
  const subSwitches = cookieConsentElement.querySelectorAll('.sub-groups input[type="checkbox"]')
  let isMarketingSwitchTriggered = false

  marketingSwitch.addEventListener('change', (e) => {
    isMarketingSwitchTriggered = true
    subSwitches.forEach((subSwitch) => {
      subSwitch.checked = e.target.checked
    })
    isMarketingSwitchTriggered = false
  })
  subSwitches.forEach((subSwitch) => {
    subSwitch.addEventListener('change', (e) => {
      if (!isMarketingSwitchTriggered && e.target.checked) {
        marketingSwitch.checked = true
      }
    })
  })

  document.addEventListener('consent-updated', () => {
    const consentStatus = getCookie('cookie-consent')
    if (consentStatus) {
      trackPageView()
    }
  })

  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('reset-cookie-consent')?.addEventListener('click', () => {
      const currentConsent = JSON.parse(getCookie('cookie-consent'))

      // Show cookie consent banner
      cookieConsentElement.setAttribute('aria-hidden', 'false')
      cookieConsentElement.style.display = 'grid'

      // Toggle header views
      cookieConsentElement.querySelector('.header [data-header-initial]').style.display = 'none'
      cookieConsentElement.querySelector('.header [data-header-settings]').style.removeProperty('display')

      // Show settings panel
      cookieConsentElement.querySelector('.settings').style.removeProperty('display')
      isPreferencesOpen = true

      // Map consent states to checkboxes
      const consentMap = {
        necessary: true, // Always true
        analytics: 'analytics_storage',
        preferences: 'personalization_storage',
        marketing: 'ad_storage',
        conversion_api: 'conversion_api',
        advanced_matching: 'advanced_matching',
      }

      Object.entries(consentMap).forEach(([inputId, consentKey]) => {
        const input = cookieConsentElement.querySelector(`input[id="${inputId}"]`)
        input.checked = consentKey === true ? true : currentConsent[consentKey] === 'granted'
      })
    })
  })
</script>
