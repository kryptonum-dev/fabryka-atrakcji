---
import { getLangFromPath, type Language } from '@/global/languages'

type Props = {
  heading: string
  minPrice: number
  maxPrice: number
  currentMin?: number
  currentMax?: number
  paramName: string
}

const { heading, minPrice, maxPrice, currentMin, currentMax, paramName } = Astro.props

const translations = {
  pl: {
    min: 'od',
    max: 'do',
    currency: 'zł',
    error: {
      range: 'Wartość minimalna nie może być większa od maksymalnej',
      bounds: 'Wartości muszą być w zakresie od {min} do {max} PLN',
      invalid: 'Proszę wprowadzić prawidłową liczbę całkowitą',
    },
  },
  en: {
    min: 'from',
    max: 'to',
    currency: 'PLN',
    error: {
      range: 'Minimum value cannot be greater than maximum',
      bounds: 'Values must be between {min} and {max} PLN',
      invalid: 'Please enter a valid integer number',
    },
  },
}

// Get language from URL
const lang = getLangFromPath(Astro.url.pathname) as Language
const t = translations[lang]

// Check if there are any available prices
const hasAvailablePrices = minPrice !== undefined && maxPrice !== undefined
---

<div
  class="price-range-filter"
  data-filter-param={paramName}
  data-min={minPrice}
  data-max={maxPrice}
  data-error-range={t.error.range}
  data-error-bounds={t.error.bounds.replace('{min}', minPrice.toString()).replace('{max}', maxPrice.toString())}
  data-error-invalid={t.error.invalid}
>
  <h3>{heading}</h3>

  <div class="range-container">
    <div class="slider-track"></div>
    <div class="slider-range"></div>
    <input
      type="range"
      class="price-range price-min-range"
      min={minPrice}
      max={maxPrice}
      step="10"
      value={currentMin || minPrice}
    />
    <input
      type="range"
      class="price-range price-max-range"
      min={minPrice}
      max={maxPrice}
      step="10"
      value={currentMax || maxPrice}
    />
  </div>

  <div class="inputs-container">
    <div class="input-group">
      <label>{t.min}</label>
      <div class="input-wrapper">
        <input
          type="number"
          class="price-input price-min"
          min={minPrice}
          max={maxPrice}
          value={currentMin || minPrice}
        />
        <span class="currency">{t.currency}</span>
      </div>
    </div>

    <span class="separator">-</span>

    <div class="input-group">
      <label>{t.max}</label>
      <div class="input-wrapper">
        <input
          type="number"
          class="price-input price-max"
          min={minPrice}
          max={maxPrice}
          value={currentMax || maxPrice}
        />
        <span class="currency">{t.currency}</span>
      </div>
    </div>
  </div>

  <div class="error-message" aria-live="polite"></div>
</div>

<style lang="scss">
  .price-range-filter {
    margin-bottom: 1.5rem;
    color: var(--primary-800);

    h3 {
      font-size: var(--typography-body-l);
      margin-bottom: 0.75rem;
    }

    .range-container {
      position: relative;
      height: 2.75rem;
      display: flex;
      align-items: center;
      margin-bottom: 0.75rem;

      .slider-track {
        position: absolute;
        width: 100%;
        height: 0.125rem;
        background: var(--neutral-300);
        border-radius: 0.125rem;
        z-index: 1;
      }

      .slider-range {
        position: absolute;
        height: 0.125rem;
        background: var(--primary-500);
        border-radius: 0.125rem;
        z-index: 2;
      }

      input[type='range'] {
        position: absolute;
        width: 100%;
        pointer-events: none;
        appearance: none;
        height: 0.125rem;
        background: none;
        z-index: 3;

        &::-webkit-slider-runnable-track {
          background: none;
        }

        &::-moz-range-track {
          background: none;
        }

        &::-webkit-slider-thumb {
          pointer-events: auto;
          appearance: none;
          width: 1rem;
          height: 1rem;
          background-color: var(--primary-500);
          border-radius: 50%;
          cursor: pointer;
          transition:
            background-color 150ms,
            transform 200ms var(--easing);

          &:hover {
            transform: scale(1.1);
            background-color: var(--primary-700);
          }
        }

        &::-moz-range-thumb {
          pointer-events: auto;
          appearance: none;
          width: 1rem;
          height: 1rem;
          background-color: var(--primary-500);
          border-radius: 50%;
          cursor: pointer;
          transition:
            background-color 150ms,
            transform 200ms var(--easing);

          &:hover {
            transform: scale(1.1);
            background-color: var(--primary-700);
          }
        }

        &:focus-visible {
          outline: none;
          &::-webkit-slider-thumb {
            outline-offset: 3px;
            outline: 3px solid var(--primary-800);
          }
        }
      }
    }

    .inputs-container {
      display: flex;
      gap: 0.375rem;
      justify-content: space-between;
      align-items: center;

      .separator {
        align-self: flex-end;
        margin-bottom: 0.55rem;
      }

      .input-group {
        flex: 1;

        label {
          font-size: var(--typography-body-s);
          line-height: 1.6;
          letter-spacing: -0.01em;
          margin-bottom: 0.125rem;
          display: block;
        }

        .input-wrapper {
          position: relative;
          display: grid;
          grid-template-columns: 1fr auto;
          align-items: center;
          background-color: var(--neutral-100);
          border: 1px solid var(--neutral-500);
          border-radius: 0.25rem;
          min-height: 2.5rem;

          input {
            width: 100%;
            padding: 0 0.625rem;
            color: var(--primary-800);
            background: none;
            border: none;

            &:focus {
              outline: none;
            }

            &::-webkit-outer-spin-button,
            &::-webkit-inner-spin-button {
              position: relative;
              transform: translateX(2rem);
            }
          }

          .currency {
            pointer-events: none;
            color: var(--primary-400);
            letter-spacing: -0.01em;
            width: 2.5rem;
            height: 2.25rem;
            display: grid;
            place-content: center;
            border-left: 1px solid var(--neutral-500);
          }
        }
      }
    }

    .error-message {
      color: var(--error-500);
      text-align: center;
      font-size: var(--typography-body-s);
      min-height: 1.5rem;
      display: none;
      margin-top: 0.5rem;

      &:not(:empty) {
        display: block;
      }
    }
  }
</style>
