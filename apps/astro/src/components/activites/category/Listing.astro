---
import PortableText, { type PortableTextValue } from '@/src/components/ui/portable-text'
import { ITEMS_PER_PAGE } from '@/src/templates/activities/ActivitiesPage.astro'
import { getLangFromPath, type Language } from '@/global/languages'
import Pagination from '../../ui/Pagination.astro'
import ActivityCard, { ActivityCardQuery, type ActivityCardProps } from '../../ui/ActivityCard'
import Image from '@/src/components/ui/image'
import Dropdown from '@/src/components/ui/Dropdown.astro'
import PriceRangeDropdown from '@/src/components/ui/PriceRangeDropdown.astro'

type Props = {
  heading: PortableTextValue
  description: string
  totalActivitiesByCategory: number
  listing: ActivityCardProps[]
  currentPage: number
  currentCategory: string | null
  participantRangeCounts: {
    range1_30: number
    range31_80: number
    range81_150: number
    range150plus: number
  }
  activityTypes: {
    name: string
    slug: string
    count: number
  }[]
  durationCounts: {
    fullDay: number
    hourly: {
      hours: number
      count: number
    }[]
  }
  priceRange: {
    min: number
    max: number
  }
}
export type ListingProps = Props

const lang = getLangFromPath(Astro.url.pathname) as Language

const buildFilterUrl = (params: {
  minParticipants?: number
  maxParticipants?: number
  activityType?: string
  duration?: number
}) => {
  const newParams = new URLSearchParams(Astro.url.searchParams)

  // Only remove the parameters we're explicitly setting
  if ('minParticipants' in params || 'maxParticipants' in params) {
    newParams.delete('minParticipants')
    newParams.delete('maxParticipants')
  }
  if ('activityType' in params) {
    newParams.delete('activityType')
  }
  if ('duration' in params) {
    newParams.delete('duration')
  }

  // Set new parameters if they exist
  if (params.minParticipants) {
    newParams.set('minParticipants', params.minParticipants.toString())
  }
  if (params.maxParticipants) {
    newParams.set('maxParticipants', params.maxParticipants.toString())
  }
  if (params.activityType) {
    newParams.set('activityType', params.activityType)
  }
  if (typeof params.duration === 'number') {
    newParams.set('duration', params.duration.toString())
  }

  const queryString = newParams.toString()
  return `${Astro.url.pathname}${queryString ? `?${queryString}` : ''}`
}

const translations = {
  pl: {
    pathPrefix: '/pl/integracje/kategoria',
    found: 'Znaleziono',
    foundActivitiesSingle: 'integrację',
    foundActivitiesMultipleLow: 'integracje',
    foundActivitiesMultipleHigh: 'integracji',
    participantsLabel: 'Liczba osób',
    activityTypeLabel: 'Rodzaj aktywności',
    durationLabel: 'Czas trwania',
    fullDay: 'Cały dzień',
    hour: {
      singular: 'godzina',
      plural2to4: 'godziny',
      plural: 'godzin',
    },
    priceLabel: 'Cena za osobę',
  },
  en: {
    pathPrefix: '/en/activities/category',
    found: 'Found',
    foundActivitiesSingle: 'activity',
    foundActivitiesMultipleLow: 'activities',
    foundActivitiesMultipleHigh: 'activities',
    participantsLabel: 'Number of participants',
    activityTypeLabel: 'Activity type',
    durationLabel: 'Duration',
    fullDay: 'Full day',
    hour: {
      singular: 'hour',
      plural2to4: 'hours',
      plural: 'hours',
    },
    priceLabel: 'Price per person',
  },
}

const t = translations[lang]

// Helper function to get the correct hour form in Polish and English
const getHourForm = (hours: number, lang: Language) => {
  // Handle singular form for both languages
  if (hours === 1) return t.hour.singular

  if (lang !== 'pl') return t.hour.plural

  // Polish grammar rules for plural forms
  if (hours % 10 >= 2 && hours % 10 <= 4 && (hours % 100 < 10 || hours % 100 >= 20)) return t.hour.plural2to4
  return t.hour.plural
}

export const Listing_Query = (orderClause: string) => {
  const participantsFilter = `
    (!defined($minParticipants) || (
      participantsCount.max >= $minParticipants && 
      participantsCount.min <= $minParticipants
    ))
    && (!defined($maxParticipants) || (
      participantsCount.min <= $maxParticipants && 
      participantsCount.max >= $maxParticipants
    ))
  `

  const priceFilter = `
    (!defined($minPrice) || pricing.additionalPersonPrice >= $minPrice)
    && (!defined($maxPrice) || pricing.additionalPersonPrice <= $maxPrice)
  `

  const activityTypeFilter = `
    (!defined($activityType) || $activityType in activityType[]->slug.current)
  `

  const durationFilter = `
    (!defined($duration) || ($duration == 24 && duration.isFullDay == true) || ($duration < 24 && duration.hours == $duration && (duration.isFullDay == false || !defined(duration.isFullDay))))
  `

  const createBaseFilter = (
    includeFilters: {
      participants?: boolean
      price?: boolean
      activityType?: boolean
      duration?: boolean
    } = {
      participants: true,
      price: true,
      activityType: true,
      duration: true,
    }
  ) => `
    && language == $language
    && select(defined($category) => categories[] -> slug.current match $category + "$", true)
    ${includeFilters.participants ? `&& ${participantsFilter}` : ''}
    ${includeFilters.price ? `&& ${priceFilter}` : ''}
    ${includeFilters.activityType ? `&& ${activityTypeFilter}` : ''}
    ${includeFilters.duration ? `&& ${durationFilter}` : ''}
  `

  return `
    "totalActivitiesByCategory": count(*[_type == 'Activities_Collection' ${createBaseFilter()}]),
    "participantRangeCounts": {
      "range1_30": count(*[_type == 'Activities_Collection' ${createBaseFilter({
        participants: false,
        price: true,
        activityType: true,
        duration: true,
      })} && participantsCount.max >= 30 && participantsCount.min <= 30]),
      "range31_80": count(*[_type == 'Activities_Collection' ${createBaseFilter({
        participants: false,
        price: true,
        activityType: true,
        duration: true,
      })} && participantsCount.min < 30 && participantsCount.max <= 80]),
      "range81_150": count(*[_type == 'Activities_Collection' ${createBaseFilter({
        participants: false,
        price: true,
        activityType: true,
        duration: true,
      })} && participantsCount.min < 81 && participantsCount.max >= 150]),
      "range150plus": count(*[_type == 'Activities_Collection' ${createBaseFilter({
        participants: false,
        price: true,
        activityType: true,
        duration: true,
      })} && participantsCount.min <= 151 && participantsCount.max >= 151])
    },
    "activityTypes": *[_type == 'ActivitiesType_Collection' && language == $language] {
      name,
      "slug": slug.current,
      "count": count(*[_type == 'Activities_Collection' ${createBaseFilter({
        participants: true,
        price: true,
        activityType: false,
        duration: true,
      })} && ^.slug.current in activityType[]->slug.current])
    },
    "durationCounts": {
      "fullDay": count(*[_type == 'Activities_Collection' ${createBaseFilter({
        participants: true,
        price: true,
        activityType: true,
        duration: false,
      })} && duration.isFullDay == true]),
      "hourly": *[_type == 'Activities_Collection' ${createBaseFilter({
        participants: true,
        price: true,
        activityType: true,
        duration: false,
      })} && (duration.isFullDay == false || !defined(duration.isFullDay))] {
        "hours": duration.hours,
        "count": 1
      } | order(hours asc)
    },
    "priceRange": {
      "min": *[_type == 'Activities_Collection' ${createBaseFilter({
        participants: true,
        activityType: true,
        duration: true,
        price: false,
      })}] | order(pricing.additionalPersonPrice asc)[0].pricing.additionalPersonPrice,
      "max": *[_type == 'Activities_Collection' ${createBaseFilter({
        participants: true,
        activityType: true,
        duration: true,
        price: false,
      })}] | order(pricing.additionalPersonPrice desc)[0].pricing.additionalPersonPrice
    },
    "listing": *[_type == 'Activities_Collection' ${createBaseFilter({
      participants: true,
      price: true,
      activityType: true,
      duration: true,
    })}] | order(${orderClause}) [$PAGINATION_BEFORE...$PAGINATION_AFTER] {
      ${ActivityCardQuery}
    },
  `
}

const {
  listing,
  currentPage,
  currentCategory,
  heading,
  description,
  totalActivitiesByCategory,
  participantRangeCounts,
  activityTypes,
  durationCounts,
  priceRange,
} = Astro.props

const params = Astro.url.searchParams
const currentMinPrice = params.get('minPrice') ? parseInt(params.get('minPrice')!) : undefined
const currentMaxPrice = params.get('maxPrice') ? parseInt(params.get('maxPrice')!) : undefined

console.log(priceRange)

const dropdownItems = [
  {
    name: '1–30',
    count: participantRangeCounts.range1_30,
    isSelected: params.get('maxParticipants') === '30',
    href: buildFilterUrl({ maxParticipants: 30 }),
  },
  {
    name: '31–80',
    count: participantRangeCounts.range31_80,
    isSelected: params.get('minParticipants') === '31' && params.get('maxParticipants') === '80',
    href: buildFilterUrl({ minParticipants: 31, maxParticipants: 80 }),
  },
  {
    name: '81–150',
    count: participantRangeCounts.range81_150,
    isSelected: params.get('minParticipants') === '81' && params.get('maxParticipants') === '150',
    href: buildFilterUrl({ minParticipants: 81, maxParticipants: 150 }),
  },
  {
    name: '150+',
    count: participantRangeCounts.range150plus,
    isSelected: params.get('minParticipants') === '150',
    href: buildFilterUrl({ minParticipants: 150 }),
  },
].filter((item) => item.isSelected || item.count > 0)

const activityTypeItems = activityTypes
  .map((type) => ({
    name: type.name,
    count: type.count,
    isSelected: params.get('activityType') === type.slug,
    href: buildFilterUrl({ activityType: type.slug }),
  }))
  .filter((item) => item.isSelected || item.count > 0)

const processedHourly = durationCounts.hourly.reduce(
  (acc, curr) => {
    const existing = acc.find((item) => item.hours === curr.hours)
    if (existing) {
      existing.count++
    } else {
      acc.push({ hours: curr.hours, count: 1 })
    }
    return acc
  },
  [] as { hours: number; count: number }[]
)

const durationItems = [
  // Add hourly options first
  ...processedHourly
    .sort((a, b) => a.hours - b.hours)
    .map((item) => {
      const isSelected = params.get('duration') === item.hours.toString()
      return {
        name: `${item.hours} ${getHourForm(item.hours, lang)}`,
        count: item.count,
        isSelected,
        href: buildFilterUrl({ duration: item.hours }),
      }
    }),
  // Add full day option at the end if there are any full day activities
  ...(durationCounts.fullDay > 0 || params.get('duration') === '24'
    ? [
        {
          name: t.fullDay,
          count: durationCounts.fullDay,
          isSelected: params.get('duration') === '24',
          href: buildFilterUrl({ duration: 24 }),
        },
      ]
    : []),
].filter((item) => item.isSelected || item.count > 0)

const slugBase = `${t.pathPrefix}/${currentCategory}`

const getActivitiesCount = () => {
  switch (totalActivitiesByCategory) {
    case 1:
      return t.foundActivitiesSingle
    case 2:
    case 3:
    case 4:
      return t.foundActivitiesMultipleLow
    default:
      return t.foundActivitiesMultipleHigh
  }
}
---

<section class="Listing max-width">
  <header class="header">
    <PortableText value={heading} class="heading" heading="h1" />
    <p class="description">{description}</p>
  </header>
  <div class="filters">
    <Dropdown heading={t.participantsLabel} items={dropdownItems} params={['minParticipants', 'maxParticipants']} />
    <Dropdown heading={t.activityTypeLabel} items={activityTypeItems} params={['activityType']} />
    <PriceRangeDropdown
      heading={t.priceLabel}
      minPrice={priceRange.min}
      maxPrice={priceRange.max}
      currentMin={currentMinPrice}
      currentMax={currentMaxPrice}
      isDisabled={!priceRange.min || !priceRange.max}
      params={['minPrice', 'maxPrice']}
    />
    <Dropdown heading={t.durationLabel} items={durationItems} params={['duration']} />

    <p class="count">{t.found}&nbsp;<strong>{totalActivitiesByCategory}{' '}{getActivitiesCount()}</strong></p>
  </div>
  <div class="list">
    {
      listing.map((item, index) => (
        <ActivityCard {...item}>
          {
            <Image
              {...item.imageList[0]}
              sizes="(max-width: 27.4375rem) 93vw, (max-width: 37.4375rem) 46vw, (max-width: 49.3125rem) 40vw, (max-width: 63.9375rem) 32vw, (max-width: 85.375rem) 24vw, 324px"
              loading={index < 8 ? 'eager' : 'lazy'}
              fetchpriority={index === 0 ? 'high' : 'auto'}
            />
          }
        </ActivityCard>
      ))
    }
  </div>
  <Pagination
    slugBase={slugBase}
    totalItems={totalActivitiesByCategory}
    itemsPerPage={ITEMS_PER_PAGE}
    currentPage={currentPage}
    searchParams={Astro.url.searchParams}
  />
</section>

<style lang="scss">
  .Listing {
    padding: clamp(3.5rem, calc(5vw / 0.48), 6rem) 0 clamp(4rem, calc(6vw / 0.48), 8rem);
    .header {
      margin-bottom: clamp(1rem, calc(1.5vw / 0.48), 1.5rem);
      max-width: 40.9375rem;

      .heading {
        margin-bottom: 0.75rem;
        font-size: var(--typography-heading-l, 2rem);
      }

      .description {
        font-size: var(--typography-body-xl, 1.125rem);
        line-height: 1.5;
        max-width: 35.6875rem;
      }
    }

    .filters {
      margin-bottom: 0.75rem;
      display: grid;
      gap: 1rem;
      grid-template-columns: repeat(4, 1fr);
      justify-content: space-between;
      gap: 0.75rem 0.5rem;
      grid-template-rows: auto 1fr;

      .count {
        font-size: var(--typography-body-m, 0.875rem);
        line-height: 1.7;
        grid-column: 1 / -1;
        grid-row: 2/3;

        //temp
        display: flex;
        align-items: center;
        min-height: 3rem;

        strong {
          font-size: var(--typography-body-m, 0.875rem);
          color: var(--primary-800, #45051c);
          display: inline-block;
        }
      }
    }

    .list {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: clamp(1rem, calc(1.5vw / 0.48), 1.5rem) 0.5rem;

      :global(article) {
        :global(a) {
          :global(> div:first-child) {
            border-radius: 0.25rem;
          }

          :global(> p) {
            overflow: hidden;
          }
        }
      }
    }

    :global(.Pagination) {
      margin-top: 3rem;
    }

    @media (max-width: 1023px) {
      .list {
        grid-template-columns: repeat(3, 1fr);
      }
    }

    @media (max-width: 789px) {
      .header {
        max-width: none;

        .description {
          max-width: none;
        }
      }
      .list {
        grid-template-columns: repeat(2, 1fr);
        column-gap: clamp(0.5rem, calc(0.75vw / 0.48), 0.75rem);
      }
    }
    @media (max-width: 439px) {
      .list {
        grid-template-columns: repeat(1, 1fr);
      }
    }
  }
</style>
