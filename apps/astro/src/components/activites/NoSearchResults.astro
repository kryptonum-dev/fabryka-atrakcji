---
import CategoryBlock, { CategoryBlockQuery, type CategoryBlockProps } from '../ui/CategoryBlock.astro'
import PortableText, { PortableTextQuery, type PortableTextValue } from '../ui/portable-text'
import { getLangFromPath, type Language } from '@/global/languages'
import Button from '../ui/Button'

const lang = (getLangFromPath(Astro.url.pathname) as Language) || 'pl'

const translations = {
  en: {
    categoriesUrl: '/en/activities',
  },
  pl: {
    categoriesUrl: '/pl/integracje',
  },
}

const t = translations[lang]

export type NoSearchResultsProps = {
  noResults: {
    heading: PortableTextValue
    buttonText: string
    highlightedCategories: CategoryBlockProps[]
  }
}

export const NoSearchResults_Query = `
    noResults {
        ${PortableTextQuery('heading')}
        buttonText,
        highlightedCategories[]->{
            ${CategoryBlockQuery}
        },
    },
`

const { noResults, headingText, headingList, isFirstIndex } = Astro.props as NoSearchResultsProps & {
  headingText: string
  headingList: string[]
  isFirstIndex: boolean
}

const HeadingEl = isFirstIndex ? 'h1' : 'h2'
---

<section class="NoSearchResults">
  <header class="header">
    <HeadingEl class="heading"><Fragment set:html={headingText} /></HeadingEl>
    <ul class="list">
      {headingList.map((item) => <li>{item}</li>)}
    </ul>
  </header>
  <div class="categories-wrapper">
    <PortableText value={noResults.heading} class="heading" heading={isFirstIndex ? 'h2' : 'h3'} />
    <Button theme="secondary" href={t.categoriesUrl}>{noResults.buttonText}</Button>
    <ul class="list">
      {
        noResults.highlightedCategories.map((category, index) => (
          <li>
            <CategoryBlock
              imageConfig={{ sizes: '56px', loading: 'eager', fetchPriority: index === 0 ? 'high' : 'auto' }}
              {...category}
            />
          </li>
        ))
      }
    </ul>
  </div>
</section>

<style lang="scss">
  .NoSearchResults {
    padding: clamp(1.25rem, calc(2.5vw / 0.48), 2.75rem) 0 4rem;
    .header {
      max-width: 27.125rem;
      margin: 0 auto clamp(2rem, calc(4vw / 0.48), 4rem);
      .heading {
        color: var(--primary-400, #74535e);
        font-style: normal;
        font-size: var(--typography-body-2xl, 1.5rem);
        font-weight: 400;
        line-height: 1.25;
        letter-spacing: -0.035em;
        font-family: 'Neue Haas Unica', 'Neue Haas Unica Fallback', sans-serif;
        margin-bottom: clamp(0.75rem, calc(1vw / 0.48), 1rem);
        text-transform: none;

        :global(strong) {
          color: var(--primary-800, #45051c);
          font-weight: 700;
          letter-spacing: -0.04em;
        }
      }
      .list {
        li {
          display: grid;
          gap: 0.5rem;
          grid-template-columns: auto 1fr;
          font-size: var(--typography-body-xl, 1.125rem);

          line-height: 1.5;
          letter-spacing: -0.02em;

          &::before {
            content: '';
            width: 0.25rem;
            height: 0.25rem;
            border-radius: 50%;
            background-color: var(--primary-400, #74535e);
            margin-top: 0.825rem;
          }
          &:not(:last-child) {
            margin-bottom: clamp(0.25rem, calc(0.375vw / 0.48), 0.375rem);
          }
        }
      }
    }
    .categories-wrapper {
      display: grid;
      grid-template-columns: 1fr clamp(30rem, calc(31vw / 0.48), 54.75rem);
      grid-template-rows: auto 1fr;
      gap: 1rem;
      .heading {
        font-family: 'PF Grand Gothik', 'PF Grand Gothik Fallback', sans-serif;
        color: var(--primary-700, #600d2a);
        line-height: 0.9;
        letter-spacing: -0.065em;
        font-size: var(--typography-heading-l, 2rem);
        text-transform: uppercase;
        font-weight: 760;
        grid-column: 1 / 2;
        grid-row: 1 / 2;

        :global(strong) {
          color: var(--primary-500, #f67258);
        }
      }

      :global(> a) {
        grid-column: 1 / 2;
        grid-row: 2 / 3;
        align-self: end;
      }

      .list {
        grid-column: 2 / 3;
        grid-row: 1 / 3;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
        margin-bottom: 0.5rem;

        :global(.CategoryBlock) {
          display: grid;
          grid-template-columns: auto 1fr;
          grid-template-rows: auto 1fr;
          gap: 0.125rem clamp(0.625rem, calc(0.75vw / 0.48), 0.75rem);
          padding: 0.75rem;
          border-radius: clamp(0.5rem, calc(0.75vw / 0.48), 0.75rem);
          background-color: var(--neutral-200, #f5f1ec);
          max-width: none;

          :global(.wrapper) {
            grid-column: 1 / 2;
            grid-row: 1 / 3;
            max-width: 3.825rem;
            max-height: 3.825rem;
          }
          :global(.title) {
            grid-column: 2 / 3;
            grid-row: 1 / 2;

            :global(.count) {
              display: none;
            }
          }
          :global(.description) {
            grid-column: 2 / 3;
            grid-row: 2 / 3;
          }
        }
      }
    }

    @media (max-width: 68.0625rem) {
      padding-bottom: 2rem;
      .categories-wrapper {
        display: block;
        flex-direction: column;
        margin: 0 auto;
        max-width: 46rem;
        gap: 0.5rem;

        .heading {
          margin-bottom: 1.25rem;
          max-width: 38rem;
        }

        :global(> a) {
          margin-bottom: clamp(1.25rem, calc(2vw / 0.48), 2rem);
        }

        .list {
          margin-bottom: 0;
          margin-bottom: -1rem;
        }
      }
    }

    @media (max-width: 41.8125rem) {
      padding-bottom: 0rem;
      .categories-wrapper {
        .list {
          grid-template-columns: 1fr;
        }
      }
    }

    @media (max-width: 27.4375rem) {
      .categories-wrapper {
        :global(> a) {
          max-width: 100%;
          width: 100%;
          display: flex;
          justify-content: center;
        }
      }
    }
  }
</style>
