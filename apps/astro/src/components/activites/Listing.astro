---
import PortableText, { type PortableTextValue } from '@/src/components/ui/portable-text'
import { ITEMS_PER_PAGE } from '@/src/templates/activities/CategoriesPage.astro'
import { getLangFromPath, type Language } from '@/global/languages'
import Pagination from '../ui/Pagination.astro'
import CategoryBlock, { CategoryBlockQuery, type CategoryBlockProps } from '../ui/CategoryBlock.astro'
import SearchBar from '../ui/SearchBar.astro'

type Props = {
  heading: PortableTextValue
  paragraph: PortableTextValue
  totalItems: number
  listing: CategoryBlockProps[]
  currentPage: number
}
export type ListingProps = Props

const lang = getLangFromPath(Astro.url.pathname) as Language

const translations = {
  pl: {
    pathPrefix: '/pl/integracje',
    categories: 'Kategorie',
    all: 'Wszystkie',
    placeholder: 'Wyszukaj integrację np. sabotażysta',
    chooseCategory: 'lub wybierz interesującą Cię kategorię',
  },
  en: {
    pathPrefix: '/en/activities',
    categories: 'Categories',
    all: 'All',
    placeholder: 'Search for activities',
    chooseCategory: 'or choose a category, that you are interested in',
  },
}

const t = translations[lang]

export const Listing_Query = `
    "totalItems": count(*[_type == 'ActivitiesCategory_Collection' 
      && language == $language 
      && count(*[_type == 'Activities_Collection' && references(^._id)]) > 0
    ]),
    "listing": *[_type == 'ActivitiesCategory_Collection'
      && language == $language
      && count(*[_type == 'Activities_Collection' && references(^._id)]) > 0
    ] | order(orderRank asc) [$PAGINATION_BEFORE...$PAGINATION_AFTER] {
        ${CategoryBlockQuery}
    },
`

const { listing, currentPage, heading, paragraph, totalItems } = Astro.props
---

<section class="Listing max-width">
  <header class="header">
    <PortableText value={heading} class="heading" heading="h1" />
    <PortableText value={paragraph} class="paragraph" />
    <SearchBar value={Astro.url.searchParams.get('search') || ''} placeholder={t.placeholder} />
    <p class="choose-category">{t.chooseCategory}</p>
  </header>
  <div class="list">
    {
      listing.map((item, index) => (
        <CategoryBlock
          {...item}
          imageConfig={{
            sizes:
              '(max-width: 27.4375rem) 74px, (max-width: 37.4375rem) 45vw, (max-width: 52.4375rem) 38vw, (max-width: 68.0625rem) 29vw, (max-width: 85.375rem) 23vw, 312px',
            loading: 'eager',
            fetchPriority: index === 0 ? 'high' : 'auto',
          }}
        />
      ))
    }
  </div>
  <Pagination
    slugBase={t.pathPrefix}
    totalItems={totalItems}
    itemsPerPage={ITEMS_PER_PAGE}
    currentPage={currentPage}
    searchParams={Astro.url.searchParams}
  />
</section>

<style lang="scss">
  .Listing {
    padding: clamp(3.75rem, calc(5.75vw / 0.48), 5.75rem) 0 3rem;

    .header {
      max-width: 34.5rem;
      text-align: center;
      margin: 0 auto clamp(2rem, calc(3vw / 0.48), 3rem);
      .heading {
        margin-bottom: clamp(0.75rem, calc(1vw / 0.48), 1rem);
        font-size: var(--typography-heading-l, 2rem);
      }

      .paragraph {
        font-size: var(--typography-body-xl, 1.125rem);
        line-height: 1.5;
        margin-bottom: clamp(1.5rem, calc(2vw / 0.48), 2rem);
      }

      .choose-category {
        font-size: var(--typography-body-l, 1rem);
      }
    }

    .list {
      gap: 2rem 1rem;
      display: grid;
      grid-template-columns: repeat(4, 1fr);
    }

    :global(.Pagination) {
      margin-top: clamp(2rem, calc(3vw / 0.48), 3rem);
    }
    @media (max-width: 68.0625rem) {
      .list {
        grid-template-columns: repeat(3, 1fr);
      }
    }

    @media (max-width: 52.4375rem) {
      .list {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media (max-width: 27.4375rem) {
      .header {
        text-align: left;

        :global(.SearchBar) {
          margin-left: 0;
          margin-right: 0;
        }
      }
      .list {
        grid-template-columns: repeat(1, 1fr);
        justify-items: center;

        :global(.CategoryBlock) {
          display: grid;
          grid-template-columns: clamp(5rem, calc(5vw / 0.48), 6rem) 1fr;
          grid-template-rows: auto 1fr;
          gap: 0.625rem;
          max-width: 100%;
          position: relative;
          padding-right: 0.5rem;
          border-radius: 999px 64px 64px 999px;
          background-color: var(--neutral-100);
          :global(.wrapper) {
            grid-column: 1/2;
            grid-row: 1/3;
            align-self: start;
            margin-bottom: 0;
          }

          :global(.title) {
            grid-column: 2/3;
            grid-row: 1/2;
            align-self: center;

            :global(.text) {
              display: block;
              margin-right: 0;
              font-size: var(--typography-body-m, 0.875rem);
            }

            :global(.count) {
              position: absolute;
              bottom: 0.25rem;
              left: 3.375rem;
              transform: scale(0.8);
            }
          }

          :global(.description) {
            grid-column: 2/3;
            grid-row: 2/3;
          }
        }
      }
    }
  }
</style>
