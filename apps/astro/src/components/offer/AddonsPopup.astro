---
import PopupWindow from '@/src/components/ui/PopupWindow/index.astro'
import CloseButton from '@/src/components/ui/PopupWindow/CloseButton.astro'
import Button from '@/components/ui/Button'
import { getLangFromPath, type Language } from '@/src/global/languages'
import type { ImageDataProps } from '../ui/image'
import PortableText, { type PortableTextValue } from '../ui/portable-text'
import Image from '@/src/components/ui/image'

// Get language from URL for default text
const lang = (getLangFromPath(Astro.url.pathname) as Language) || 'pl'

// Default translations (will be replaced by translations from the event)
const defaultTranslations = {
  pl: {
    addedTitle: {
      hotel: 'Dodano hotel do wyceny!',
      activity: 'Dodano integrację do wyceny!',
    },
    addedText:
      'Przejdź do koszyka lub kontynuuj wybieranie spośród wielu hoteli i integracji, które spełniają Twoje wymagania.',
    cartUrl: '/pl/koszyk',
    continueButton: 'Przejdź do koszyka',
    skipButton: 'Kontynuuj przeglądanie',
    saveButton: 'Zapisz dodatki',
    updateButton: 'Aktualizuj dodatki',
    requiredAddonsAlert: 'Aby przejść do koszyka, musisz wybrać przynajmniej jeden dodatek.',
    individualQuote: 'Wycena indywidualna',
    currency: 'zł',
    upTo: 'do',
  },
  en: {
    addedTitle: {
      hotel: 'Added hotel to quote!',
      activity: 'Added activity to quote!',
    },
    addedText: 'You can now go to the cart or continue browsing hotels and activities.',
    cartUrl: '/en/cart',
    continueButton: 'Go to cart',
    skipButton: 'Continue browsing',
    saveButton: 'Save add-ons',
    updateButton: 'Update add-ons',
    requiredAddonsAlert: 'To proceed to cart, you must select at least one add-on.',
    individualQuote: 'Individual quote',
    currency: 'PLN',
    upTo: 'up to',
  },
}

type Props = {
  addons?: {
    hasAddons: boolean
    heading?: PortableTextValue
    addonsChoice?: 'unlimited' | 'limited'
    minOneAddon?: boolean
    addonsLayout?: 'vertical' | 'horizontal'
    addonsHaveImage?: boolean
    addonsList?: Array<{
      _key: string
      name: string
      image?: ImageDataProps
      pricing: {
        type: 'fixed' | 'per_unit' | 'threshold' | 'individual'
        fixedPrice?: number
        perUnit?: {
          price: number
          hasCount: boolean
          singular: string
          plural: string
        }
        threshold?: {
          basePrice: number
          maxUnits: number
          additionalPrice: number
          singular: string
          plural: string
        }
      }
      description?: string
    }>
    additionalInfo?: string
  }
  type: 'hotels' | 'activities'
}

// Use the default translations for initial rendering
const t = defaultTranslations[lang]

const imgSizes =
  '(max-width: 28.6875rem) 92vw, (max-width: 31.1875rem) 45vw, (max-width: 32.75rem) 81vw, (max-width: 37.4375rem) 40vw, (max-width: 38.8125rem) 68vw, (max-width: 54.8125rem) 36vw, (max-width: 56.1875rem) 24vw, 254px'

const { addons, type } = Astro.props
---

<div
  class="addons-popup-container"
  data-cart-url-pl={defaultTranslations.pl.cartUrl}
  data-cart-url-en={defaultTranslations.en.cartUrl}
  data-alert-pl={defaultTranslations.pl.requiredAddonsAlert}
  data-alert-en={defaultTranslations.en.requiredAddonsAlert}
  data-lang={lang}
  data-img-sizes={imgSizes}
>
  <PopupWindow>
    <div slot="open" class="hidden-trigger">
      <button></button>
    </div>
    <div slot="content" class="addons-popup">
      <CloseButton />
      <div class="addons-wrapper" data-has-addons={addons?.hasAddons ? 'true' : 'false'}>
        {
          addons?.hasAddons ? (
            <>
              <PortableText value={addons.heading!} heading="h3" class="heading" />
              <div class="addons-list" data-layout={addons.addonsLayout}>
                {addons.addonsList?.map((addon) => {
                  const hasCounter =
                    addon.pricing.type === 'per_unit' &&
                    addon.pricing.perUnit?.hasCount &&
                    addons.addonsChoice !== 'limited'
                  return (
                    <label
                      class={`addon-item ${addons.addonsChoice === 'limited' ? 'single-selection' : ''} ${hasCounter ? 'counter-only' : ''}`}
                      data-has-description={addon.description ? 'true' : 'false'}
                      data-addon-key={addon._key}
                      data-has-counter={hasCounter ? 'true' : 'false'}
                      data-has-image={addon.image ? 'true' : 'false'}
                    >
                      {addons.addonsLayout === 'horizontal' && addons.addonsHaveImage && addon.image && (
                        <Image {...addon.image} sizes={imgSizes} />
                      )}
                      {!hasCounter && (
                        <>
                          <input
                            type={addons.addonsChoice === 'limited' ? 'radio' : 'checkbox'}
                            name="addon-selection"
                            data-addon-key={addon._key}
                          />
                          <div class="checkbox-custom">
                            <svg
                              class="checkmark"
                              xmlns="http://www.w3.org/2000/svg"
                              width="16"
                              height="17"
                              viewBox="0 0 16 17"
                              fill="none"
                            >
                              <path
                                d="M4.66602 9.1L6.76125 11.5L11.9993 5.5"
                                stroke="#FAF7F7"
                                stroke-width="1.5"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                          </div>
                        </>
                      )}

                      {hasCounter && (
                        <div class="quantity-control">
                          <input
                            type="number"
                            min="0"
                            value="0"
                            data-quantity-for={addon._key}
                            class="quantity-input"
                          />
                          <button type="button" class="quantity-decrease">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none">
                              <path stroke="#F67258" stroke-linecap="round" d="M16 10H4" />
                            </svg>
                          </button>
                          <button type="button" class="quantity-increase">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none">
                              <path stroke="#F67258" stroke-linecap="round" d="M10 5v10m5-5H5" />
                            </svg>
                          </button>
                        </div>
                      )}

                      <span class="addon-name">{addon.name}</span>
                      {addon.description && <p class="addon-description">{addon.description}</p>}
                      <div class="addon-price" data-pricing={addon.pricing.type}>
                        {addon.pricing.type === 'fixed' && (
                          <strong>
                            {addon.pricing.fixedPrice} {t.currency}
                          </strong>
                        )}
                        {addon.pricing.type === 'per_unit' && (
                          <span>
                            <strong>
                              {addon.pricing.perUnit?.price} {t.currency}
                            </strong>
                            /{addon.pricing.perUnit?.singular}
                          </span>
                        )}
                        {addon.pricing.type === 'threshold' && (
                          <span>
                            <span>
                              <strong>
                                {addon.pricing.threshold?.basePrice} {t.currency}
                              </strong>
                              /{t.upTo} {addon.pricing.threshold?.maxUnits} {addon.pricing.threshold?.singular}
                            </span>
                            <span>
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="13" fill="none">
                                <path
                                  stroke="#F67258"
                                  stroke-linecap="round"
                                  stroke-width="1.25"
                                  d="M9 6.5H6m0 0H3m3 0v-3m0 3v3"
                                />
                              </svg>
                              <span>
                                {addon.pricing.threshold?.plural}{' '}
                                <strong>
                                  {addon.pricing.threshold?.additionalPrice} {t.currency}
                                </strong>
                              </span>
                            </span>
                          </span>
                        )}
                        {addon.pricing.type === 'individual' && <strong>{t.individualQuote}</strong>}
                      </div>
                    </label>
                  )
                })}
              </div>

              {addons.additionalInfo && (
                <p class="additional-info">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
                    <path
                      fill="#F67258"
                      fill-rule="evenodd"
                      d="M14.667 8A6.667 6.667 0 1 1 1.334 8a6.667 6.667 0 0 1 13.333 0Zm-6.666 3.834a.5.5 0 0 0 .5-.5v-4a.5.5 0 1 0-1 0v4a.5.5 0 0 0 .5.5Zm0-7.167A.667.667 0 1 1 8 6a.667.667 0 0 1 0-1.333Z"
                      clip-rule="evenodd"
                    />
                  </svg>
                  <span>{addons.additionalInfo}</span>
                </p>
              )}
            </>
          ) : (
            <>
              <div class="heading">
                <h3>{type === 'hotels' ? t.addedTitle.hotel : t.addedTitle.activity}</h3>

                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 17 16" fill="none">
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M6.89754 2.13368C6.73519 2.27203 6.65401 2.34121 6.56731 2.39932C6.36858 2.53252 6.14539 2.62497 5.91067 2.67131C5.80828 2.69153 5.70196 2.70001 5.48932 2.71698C4.95507 2.75961 4.68794 2.78093 4.46508 2.85965C3.94961 3.04172 3.54416 3.44717 3.36209 3.96263C3.28337 4.1855 3.26205 4.45263 3.21942 4.98688C3.20245 5.19952 3.19397 5.30584 3.17375 5.40823C3.12741 5.64294 3.03497 5.86613 2.90176 6.06487C2.84365 6.15157 2.77448 6.23274 2.63612 6.3951C2.28849 6.80302 2.11467 7.00698 2.01275 7.22023C1.777 7.71346 1.777 8.28686 2.01275 8.78009C2.11467 8.99334 2.28849 9.1973 2.63612 9.60523C2.77446 9.76756 2.84366 9.84876 2.90176 9.93545C3.03497 10.1342 3.12741 10.3574 3.17375 10.5921C3.19397 10.6945 3.20245 10.8008 3.21942 11.0134C3.26205 11.5477 3.28337 11.8148 3.36209 12.0377C3.54416 12.5532 3.94961 12.9586 4.46507 13.1407C4.68794 13.2194 4.95507 13.2407 5.48932 13.2833C5.70196 13.3003 5.80828 13.3088 5.91067 13.329C6.14539 13.3754 6.36858 13.4678 6.56731 13.601C6.65401 13.6591 6.73519 13.7283 6.89754 13.8666C7.30546 14.2143 7.50942 14.3881 7.72268 14.49C8.21591 14.7258 8.7893 14.7258 9.28253 14.49C9.49578 14.3881 9.69974 14.2143 10.1077 13.8666C10.27 13.7283 10.3512 13.6591 10.4379 13.601C10.6366 13.4678 10.8598 13.3754 11.0945 13.329C11.1969 13.3088 11.3032 13.3003 11.5159 13.2833C12.0501 13.2407 12.3173 13.2194 12.5401 13.1407C13.0556 12.9586 13.461 12.5532 13.6431 12.0377C13.7218 11.8148 13.7432 11.5477 13.7858 11.0134C13.8028 10.8008 13.8112 10.6945 13.8315 10.5921C13.8778 10.3574 13.9702 10.1342 14.1034 9.93546C14.1616 9.84876 14.2307 9.76758 14.3691 9.60523C14.7167 9.1973 14.8905 8.99334 14.9925 8.78009C15.2282 8.28686 15.2282 7.71346 14.9925 7.22023C14.8905 7.00698 14.7167 6.80302 14.3691 6.3951C14.2307 6.23274 14.1616 6.15157 14.1034 6.06487C13.9702 5.86613 13.8778 5.64294 13.8315 5.40823C13.8112 5.30584 13.8028 5.19952 13.7858 4.98688C13.7432 4.45263 13.7218 4.1855 13.6431 3.96263C13.461 3.44717 13.0556 3.04172 12.5401 2.85965C12.3173 2.78093 12.0501 2.75961 11.5159 2.71698C11.3032 2.70001 11.1969 2.69153 11.0945 2.67131C10.8598 2.62497 10.6366 2.53252 10.4379 2.39932C10.3512 2.34121 10.27 2.27203 10.1077 2.13368C9.69974 1.78605 9.49578 1.61223 9.28253 1.51031C8.7893 1.27456 8.21591 1.27456 7.72267 1.51031C7.50943 1.61223 7.30546 1.78605 6.89754 2.13368ZM11.4183 6.57559C11.6301 6.3637 11.6301 6.02016 11.4183 5.80827C11.2064 5.59638 10.8628 5.59638 10.6509 5.80827L7.41745 9.04177L6.35424 7.97856C6.14236 7.76668 5.79882 7.76668 5.58693 7.97856C5.37504 8.19045 5.37504 8.53399 5.58693 8.74588L7.03379 10.1927C7.24568 10.4046 7.58922 10.4046 7.80111 10.1927L11.4183 6.57559Z"
                    fill="#F67258"
                  />
                </svg>
              </div>
              <p class="paragraph">{t.addedText}</p>
            </>
          )
        }
      </div>
      <div class="actions">
        <Button theme="primary" className="continue-browsing" shade="light">{t.skipButton}</Button>
        <Button theme="primary" shade="dark" className="go-to-cart-button">{t.continueButton}</Button>
      </div>
    </div>
  </PopupWindow>
</div>

<style lang="scss">
  .addons-popup-container {
    z-index: 9999;
    position: relative;

    // Add CSS for hiding the Go to cart button when in cart page
    &[data-is-in-cart-page='true'] {
      .actions {
        .go-to-cart-button {
          display: none;
        }

        .continue-browsing {
          flex: 1;
        }
      }
    }

    .hidden-trigger {
      display: none;
    }

    :global(.Wrapper) {
      :global(.content) {
        &::after {
          background: var(--neutral-100) !important;
          border-radius: clamp(1rem, calc(1.15vw / 0.48), 1.15rem) !important;
        }

        &::before {
          border-radius: clamp(1rem, calc(1.25vw / 0.48), 1.25rem) !important;
        }
      }
    }

    .addons-popup {
      width: 100%;
      max-width: 54.75rem;
      max-height: calc(100dvh - 6rem);
      padding: clamp(2rem, calc(2vw / 0.48), 4rem);
      overflow: hidden;
      display: flex;
      flex-direction: column;

      :global(.CloseButton) {
        position: absolute !important;
        top: 1.5rem;
        right: 1.5rem;

        &::before {
          background: var(--neutral-200) !important;
        }
      }

      .addons-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
        min-height: 0;

        &[data-has-addons='true'] {
          .heading {
            width: 100%;
            padding: 0 2rem;
            align-self: stretch;
            max-width: 100%;
          }
        }

        .heading {
          color: var(--primary-800, #45051c);
          font-size: var(--typography-body-2xl, 1.5rem);
          line-height: 1.25;
          letter-spacing: -0.04em;
          font-weight: 700;
          max-width: fit-content;
          flex-shrink: 0;
          text-align: center;
          position: relative;

          :global(svg) {
            margin-top: 0.375rem;
            position: absolute;
            top: -1.25rem;
            right: -3rem;
          }

          :global(strong) {
            color: var(--primary-400, #74535e);
          }
        }

        .paragraph {
          text-align: center;
        }

        .additional-info {
          display: flex;
          align-items: flex-start;
          align-self: flex-start;
          gap: 0.375rem;
          font-size: var(--typography-body-m, 0.875rem);
          margin-top: 0.5rem;
          letter-spacing: -0.01em;
          line-height: 1.7;

          :global(svg) {
            flex-shrink: 0;
            margin-top: 3px;
          }
        }

        .paragraph {
          margin: 1.5rem 0 2.5rem;
          max-width: 30rem;
          flex-shrink: 0;
        }

        .addons-list {
          width: calc(100% + 0.25rem);
          margin-top: clamp(1.5rem, calc(1.75vw / 0.48), 2.25rem);
          overflow-y: auto;
          max-height: 25rem;
          scroll-behavior: smooth;
          min-height: 0;
          flex: 1;
          padding-right: 0.25rem;
          margin-right: -0.25rem;

          &::-webkit-scrollbar {
            width: 0.25rem;
          }

          &::-webkit-scrollbar-track {
            background: var(--neutral-300, #ede6de);
            border-radius: 16px;
          }

          &::-webkit-scrollbar-thumb {
            background: var(--primary-400, #74535e);
            border-radius: 16px;
          }

          &::-webkit-scrollbar-thumb:hover {
            background: var(--primary-700, #600d2a);
          }

          &[data-layout='horizontal'] {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(13rem, 1fr));
            gap: 0.5rem;
            grid-auto-rows: minmax(min-content, auto);

            .addon-item {
              display: grid;
              grid-template-columns: 1fr auto;
              cursor: pointer;
              min-height: 9.1875rem;

              &[data-has-image='false'] {
                padding: clamp(0.5rem, calc(0.75vw / 0.48), 1rem);
              }

              &[data-has-description='true'] {
                grid-template-rows: auto auto 1fr;
                grid-template-areas:
                  'name checkbox'
                  'description description'
                  'price price';

                &[data-has-image='true'] {
                  grid-template-rows: auto auto auto 1fr;
                  grid-template-areas:
                    'image image'
                    'name checkbox'
                    'description description'
                    'price price';
                }
              }

              &[data-has-description='false'] {
                grid-template-rows: auto 1fr;
                grid-template-areas:
                  'name checkbox'
                  'price price';

                &[data-has-image='true'] {
                  grid-template-rows: auto auto 1fr;
                  grid-template-areas:
                    'image image'
                    'name checkbox'
                    'price price';
                }
              }

              &.counter-only {
                display: grid;
                padding-left: clamp(0.5rem, calc(0.75vw / 0.48), 1rem);

                &[data-has-description='true'] {
                  grid-template-areas:
                    'name'
                    'description'
                    'price'
                    'counter' !important;

                  &[data-has-image='true'] {
                    padding-left: 0;
                    grid-template-areas:
                      'image'
                      'name'
                      'description'
                      'price'
                      'counter' !important;
                  }
                }

                &[data-has-description='false'] {
                  grid-template-areas:
                    'name'
                    'price'
                    'counter' !important;

                  &[data-has-image='true'] {
                    padding-left: 0;
                    grid-template-areas:
                      'image'
                      'name'
                      'price'
                      'counter' !important;
                  }
                }

                .addon-description {
                  margin-bottom: 0.25rem;
                }

                .addon-price {
                  align-self: start;
                  margin-top: 0.5rem;
                }
                .quantity-control {
                  align-self: end;
                  margin-top: 0.5rem;
                  margin-bottom: -0.5rem;
                }

                &[data-has-image='true'] {
                  .quantity-control {
                    margin: clamp(0.5rem, calc(0.75vw / 0.48), 1rem) !important;
                    margin-top: 0rem !important;
                  }

                  .addon-price {
                    margin-bottom: 0.5rem !important;
                  }
                }
              }
              > img {
                width: 100%;
                aspect-ratio: 244/162.63;
                height: auto;
                grid-column: 1/3;
                margin-bottom: clamp(0.5rem, calc(0.75vw / 0.48), 1rem);
              }

              .addon-name {
                font-weight: 700;
              }

              .addon-description {
                margin-top: 0.25rem;
              }

              .addon-price {
                margin-top: 01rem;
                align-self: end;

                &[data-pricing='threshold'] {
                  text-align: left;
                  align-items: flex-start;
                }

                &[data-pricing='individual'],
                &[data-pricing='fixed'] {
                  :global(strong) {
                    color: var(--primary-400);
                  }
                }
              }

              .checkbox-custom {
                margin-left: 0.75rem;
              }

              &[data-has-image='true'] {
                .addon-name {
                  margin-left: clamp(0.5rem, calc(0.75vw / 0.48), 1rem);
                }

                .addon-description {
                  margin-left: clamp(0.5rem, calc(0.75vw / 0.48), 1rem);
                  margin-right: clamp(0.5rem, calc(0.75vw / 0.48), 1rem);
                }

                .addon-price {
                  margin: clamp(0.5rem, calc(0.75vw / 0.48), 1rem) !important;
                  margin-top: 0.5rem !important;
                }

                .checkbox-custom {
                  margin-right: clamp(0.5rem, calc(0.75vw / 0.48), 1rem);
                }
              }
            }
          }

          &[data-layout='vertical'] {
            display: flex;
            flex-direction: column;
            gap: 0.375rem;

            .addon-item {
              padding: 0.75rem;
              display: grid;
              padding: 0.5rem 1rem;
              min-height: 3.5rem;
              text-align: left;
              grid-template-columns: auto 1fr auto;
              grid-template-areas: 'checkbox name price';
              align-items: center;
              cursor: pointer;

              &[data-has-description='true'] {
                grid-template-areas:
                  'checkbox name price'
                  'checkbox description price';

                .checkbox-custom {
                  margin-bottom: 0.125rem;
                }
              }

              .checkbox-custom {
                margin-right: 0.625rem;
              }

              .addon-name {
                grid-area: name;
                justify-self: start;
              }

              .addon-description {
                grid-area: description;
                justify-self: start;

                align-self: start;
              }

              .addon-price {
                margin-left: 1rem;
              }
            }
          }

          .addon-item {
            background-color: var(--neutral-200);
            border-radius: 0.5rem;
            border: 1px solid var(--neutral-300, #ede6de);
            flex-shrink: 0;
            overflow: hidden;

            &.counter-only {
              padding-left: 0.25rem;
              &[data-has-description='true'] {
                grid-template-areas:
                  'counter name price'
                  'counter description price' !important;
              }

              &[data-has-description='false'] {
                grid-template-areas: 'counter name price' !important;
              }

              .quantity-control {
                grid-area: counter;
                margin-right: 0.625rem;

                button:focus-visible {
                  outline: 2px solid var(--primary-400);
                  outline-offset: 2px;
                }

                .quantity-input:focus-visible {
                  outline: 2px solid var(--primary-400);
                  border-color: var(--primary-400);
                }
              }

              // Highlight the item when it has a count greater than 0
            }

            input[type='checkbox'],
            input[type='radio'] {
              width: 1.125rem;
              height: 1.125rem;
              accent-color: var(--primary-500);
              position: absolute;
              opacity: 0;
              clip: rect(0 0 0 0);
              clip-path: inset(50%);
              overflow: hidden;
              white-space: nowrap;
            }

            .checkbox-custom {
              width: 1rem;
              height: 1rem;
              border: 1px solid var(--primary-400);
              border-radius: 0.25rem;
              margin-top: 1px;
              position: relative;
              overflow: hidden;
              flex-shrink: 0;

              .checkmark {
                position: absolute;
                inset: 0;
                display: flex;
                align-items: center;
                justify-content: center;
                opacity: 0;
                z-index: 2;
                transform: scale(0.8);
                transition: all 200ms var(--easing);
                width: 100%;
                height: 100%;
                margin-right: 2px;
              }

              &::after {
                content: '';
                position: absolute;
                inset: 0;
                background-color: var(--primary-300);
                transform: scaleY(0);
                transform-origin: bottom;
              }

              // Only animate on hover when not checked
              &:not(.animate)::after {
                transition: none;
              }

              &.animate::after {
                transition: transform 400ms var(--easing);
              }
            }

            &:hover {
              .checkbox-custom::after {
                transform: scaleY(1);
                background-color: var(--neutral-300);
                transition: transform 200ms var(--easing);
              }
            }

            input[type='checkbox']:checked,
            input[type='radio']:checked {
              & + .checkbox-custom {
                border-color: var(--primary-500);

                .checkmark {
                  opacity: 1;
                  transform: scale(1);
                }

                &::after {
                  transform: scaleY(1);
                  background-color: var(--primary-500);
                }

                // Only animate when the animate class is present
                &:not(.animate)::after {
                  transition: none;
                }
              }
            }

            input[type='checkbox']:focus-visible,
            input[type='radio']:focus-visible {
              & + .checkbox-custom {
                outline: 2px solid var(--primary-400);
                outline-offset: 2px;
              }
            }

            .addon-name {
              user-select: none;
              grid-area: name;
              color: var(--primary-800, #45051c);
              font-size: var(--typography-body-m, 0.875rem);
              letter-spacing: -0.01em;
              line-height: 1.2;
            }

            .addon-description {
              user-select: none;
              grid-area: description;
              font-size: var(--typography-body-s, 0.75rem);
              letter-spacing: -0.01em;
              line-height: 1.25;
            }

            .addon-price {
              line-height: 1.7;
              font-size: var(--typography-body-m, 0.875rem);
              letter-spacing: -0.01em;
              grid-area: price;

              :global(strong) {
                font-weight: 700;
                color: var(--primary-800);
              }

              &[data-pricing='threshold'] {
                display: flex;
                flex-direction: column;
                align-items: flex-end;
                text-align: right;

                :global(> span > span:nth-child(2)) {
                  display: flex;
                  align-items: flex-start;
                  gap: 0.25rem;

                  :global(svg) {
                    margin-top: 5px;
                    flex-shrink: 0;
                  }

                  @media (max-width: 56.1875rem) {
                    // 899px
                    font-size: var(--typography-body-s, 0.75rem);
                  }
                }
              }
            }

            .checkbox-custom {
              grid-area: checkbox;
            }

            .quantity-control {
              display: flex;
              align-items: center;

              button {
                width: 2.75rem;
                display: flex;
                align-items: center;
                justify-content: center;
                background: var(--neutral-100);
                border-radius: 0.25rem;
                cursor: pointer;
                border: 1px solid var(--neutral-300, #ede6de);
                min-height: 2.75rem;
                transition: background-color 200ms;

                &:first-of-type {
                  order: 1;
                  border-radius: 0.3rem 0 0 0.3rem;
                  border-right: none;
                }

                &:last-of-type {
                  order: 3;
                  border-radius: 0 0.3rem 0.3rem 0;
                  border-left: none;
                }

                &:hover {
                  background-color: var(--neutral-200);
                }
              }

              .quantity-input {
                width: 2.75rem;
                text-align: center;
                border: 1px solid var(--neutral-300);
                border-right: 0;
                border-left: 0;
                min-height: 2.75rem;
                padding: 0.125rem;
                background-color: var(--neutral-100);
                font-size: var(--typography-body-m, 0.875rem);
                transition: background-color 200ms;
                order: 2;
                line-height: 1.7;
                letter-spacing: -0.01em;
                -moz-appearance: textfield;

                &::-webkit-outer-spin-button,
                &::-webkit-inner-spin-button {
                  -webkit-appearance: none;
                  margin: 0;
                }

                &:hover {
                  background-color: var(--neutral-200);
                }

                &:focus {
                  outline: none !important;
                  border: 2px solid var(--primary-800);
                }
              }
            }
          }
        }
      }

      .actions {
        display: flex;
        gap: clamp(0.5rem, calc(0.5vw / 0.48), 1rem);
        margin-top: clamp(1.5rem, calc(1.75vw / 0.48), 2.25rem);
        width: 100%;
        flex-shrink: 0;

        :global(button),
        :global(a) {
          flex: 1;
          width: 100%;
          max-width: 100%;

          :global(span) {
            margin: 0 auto;
            padding-right: 1.75rem;
          }
        }
      }
    }

    @media (max-width: 56.1875rem) {
      // 899px
      .addons-popup {
        .addons-wrapper[data-has-addons='true'] {
          .heading {
            padding: 0rem;
            padding-right: 3rem;
            text-align: start;
          }
        }
      }
    }

    @media (max-width: 45.5625rem) {
      // 729px
      .addons-popup {
        .actions {
          flex-direction: column;
        }
      }
    }

    @media (max-width: 41.1875rem) {
      // 659px
      .addons-popup .addons-wrapper .addons-list[data-layout='vertical'] {
        .addon-item {
          grid-template-columns: 1fr auto;
          padding: 0.5rem;

          &[data-has-description='true'] {
            grid-template-areas:
              'name checkbox '
              'description checkbox'
              'price price';
          }

          &[data-has-description='false'] {
            grid-template-areas:
              'name checkbox'
              'price price';
          }

          .addon-price {
            justify-self: start;
            margin-left: 0;
            justify-content: flex-start !important;
            text-align: start !important;
            margin-top: 0.25rem;

            &[data-pricing='threshold'] {
              margin-top: 0.5rem;
            }
          }
          .checkbox-custom {
            margin-top: 0;
            margin-right: 0.5rem;
            margin-left: 1.25rem;
            margin-bottom: 0;
          }

          &.counter-only {
            padding: 0.5rem;

            .quantity-control {
              margin-right: 0.125rem;
              margin-left: 1.5rem;
              align-self: start;

              button {
                min-height: 2.5rem;
                width: 2.5rem;
              }

              .quantity-input {
                min-height: 2.5rem;
                width: 2.5rem;
              }
            }

            &[data-has-description='true'] {
              grid-template-areas:
                'name counter'
                'description counter'
                'price counter' !important;
            }

            &[data-has-description='false'] {
              grid-template-areas:
                'name counter'
                'price counter' !important;
            }
          }
        }
      }
    }

    @media (max-width: 31.1875rem) {
      // 499px
      :global(.Wrapper) {
        :global(.content) {
          &::before,
          &::after {
            border-bottom-left-radius: 0rem !important;
            border-bottom-right-radius: 0rem !important;
          }
        }
      }
      .addons-popup {
        padding: 1.5rem 1rem;
        :global(.CloseButton) {
          top: unset;

          &::after {
            background: var(--neutral-100) !important;
          }
        }
      }
    }

    @media (max-width: 28.6875rem) {
      // 459px
      .addons-popup .addons-wrapper[data-has-addons='true'] .addons-list[data-layout='horizontal'] .addon-item {
        min-height: unset;
      }
    }
  }
</style>
<script>
  import { updateCartAddons, isInCart, getCartItem, type AddonItem, addToCart, removeFromCart } from '@/src/store/cart'
  import { type CartItemType, listenToAddonsPopup } from '@/src/utils/events'
  import type { AddonItem as AddonItemType } from '@/src/global/types'
  import { toPlainText } from '@/src/utils/to-plain-text'
  import { optimizeImage } from '@/src/utils/optimize-images'

  const popupContainer = document.querySelector('.addons-popup-container')! as HTMLDivElement
  const popupTrigger = document.querySelector('.hidden-trigger button')! as HTMLButtonElement
  const popupWindow = document.querySelector('.addons-popup-container .popup-window') as HTMLDivElement
  const continueBrowsingBtn = document.querySelector('.addons-popup-container .continue-browsing') as HTMLButtonElement

  // Get the language from the container
  const pageLang = popupContainer.getAttribute('data-lang') || 'pl'

  // Get translations from the container's data attributes
  const t = {
    currency: pageLang === 'pl' ? 'zł' : 'PLN',
    upTo: pageLang === 'pl' ? 'do' : 'up to',
    individualQuote: pageLang === 'pl' ? 'Wycena indywidualna' : 'Individual quote',
    addedTitle: {
      hotel: pageLang === 'pl' ? 'Dodano hotel do wyceny!' : 'Added hotel to quote!',
      activity: pageLang === 'pl' ? 'Dodano integrację do wyceny!' : 'Added activity to quote!',
    },
    addedText:
      pageLang === 'pl'
        ? 'Przejdź do koszyka lub kontynuuj wybieranie spośród wielu hoteli i integracji, które spełniają Twoje wymagania.'
        : 'You can now go to the cart or continue browsing hotels and activities.',
    editAddons: pageLang === 'pl' ? 'Edytuj dodatki' : 'Edit add-ons',
    addons: pageLang === 'pl' ? 'Dobierz dodatki' : 'Add add-ons',
    optional: pageLang === 'pl' ? '(opcjonalne)' : '(optional)',
  }

  // Function to pre-select addons when editing
  function preSelectAddons(addons: AddonItem[]) {
    // Get all addon checkboxes/inputs
    const addonInputs = document.querySelectorAll(
      '.addons-popup input[type="checkbox"], .addons-popup input[type="radio"]'
    )

    // For each input, check if it's in the addons array and set checked state
    addonInputs.forEach((input) => {
      const addonKey = input.getAttribute('data-addon-key')
      if (addonKey) {
        const addon = addons.find((a) => a.id === addonKey)
        if (addon) {
          ;(input as HTMLInputElement).checked = true
          const label = input.closest('.addon-item')
          if (label) {
            label.setAttribute('data-selected', 'true')
          }

          // For radio buttons in limited selection mode
          if (input.getAttribute('type') === 'radio') {
            input.setAttribute('data-was-checked', 'true')
          }

          // If addon has count, set it
          const quantityInput = document.querySelector(`[data-quantity-for="${addonKey}"]`) as HTMLInputElement
          if (quantityInput && addon.count !== undefined) {
            quantityInput.value = addon.count.toString()
          }
        }
      }
    })

    // Special handling for counter-only items
    document.querySelectorAll('.addon-item[data-has-counter="true"]').forEach((item) => {
      const addonKey = item.getAttribute('data-addon-key')
      if (addonKey) {
        const addon = addons.find((a) => a.id === addonKey)
        if (addon && addon.count) {
          // Mark the item as selected
          item.setAttribute('data-selected', 'true')

          // Set the counter value
          const quantityInput = item.querySelector('.quantity-input') as HTMLInputElement
          if (quantityInput) {
            quantityInput.value = addon.count.toString()
          }
        }
      }
    })
  }

  // Function to handle addon selection changes
  function handleAddonSelection() {
    const itemId = popupContainer.dataset.itemId
    const itemType = popupContainer.dataset.itemType as CartItemType
    const requiresAddons = popupContainer.dataset.requiresInitialAddons === 'true'

    if (itemId && itemType) {
      // Collect selected addons
      const selectedAddons: AddonItem[] = []

      // Process regular checkbox/radio selected addons
      const addonInputs = document.querySelectorAll(
        '.addons-popup input[type="checkbox"]:checked, .addons-popup input[type="radio"]:checked'
      )

      addonInputs.forEach((input) => {
        const addonKey = input.getAttribute('data-addon-key')
        if (addonKey) {
          // Handle differently based on selection mode
          const isLimitedSelection = popupContainer.dataset.addonsChoice === 'limited'
          if (isLimitedSelection) {
            // For limited selection (max one addon), never include count
            selectedAddons.push({
              id: addonKey,
            })
          } else {
            // For unlimited selection, check if there's a quantity
            const quantityInput = document.querySelector(`[data-quantity-for="${addonKey}"]`) as HTMLInputElement
            if (quantityInput) {
              const count = parseInt(quantityInput.value, 10) || 0
              // Only add the addon if count is greater than 0
              if (count > 0) {
                selectedAddons.push({
                  id: addonKey,
                  count: count,
                })
              }
            } else {
              // For addons without quantity control
              selectedAddons.push({
                id: addonKey,
              })
            }
          }
        }
      })

      // Process counter-only addons separately
      document.querySelectorAll('.addon-item[data-has-counter="true"]').forEach((item) => {
        const addonKey = item.getAttribute('data-addon-key')
        const quantityInput = item.querySelector('.quantity-input') as HTMLInputElement

        if (addonKey && quantityInput) {
          const count = parseInt(quantityInput.value, 10) || 0

          if (count > 0) {
            // Add to selectedAddons if count > 0
            selectedAddons.push({
              id: addonKey,
              count: count,
            })

            // Also update the visual state
            item.setAttribute('data-selected', 'true')
          } else {
            // If count is 0, make sure it's not selected
            item.setAttribute('data-selected', 'false')
          }
        }
      })

      // Handle cart updates based on selection
      if (requiresAddons) {
        if (selectedAddons.length > 0) {
          // Add to cart if not already in cart
          if (!isInCart(itemId, itemType)) {
            addToCart({
              id: itemId,
              type: itemType,
              addOns: selectedAddons,
            })
          } else {
            // Just update the addons
            updateCartAddons(itemId, itemType, selectedAddons)
          }
        } else {
          // If no addons selected and it requires addons, remove from cart
          if (isInCart(itemId, itemType)) {
            removeFromCart(itemId, itemType)
          }
        }
      } else {
        // Just update the addons if item doesn't require addons
        updateCartAddons(itemId, itemType, selectedAddons)
      }

      // Dispatch event with updated addon information
      document.dispatchEvent(
        new CustomEvent('cart-updated', {
          detail: {
            itemId,
            itemType,
            action: 'update',
            addons: selectedAddons,
          },
        })
      )
    }
  }

  // Add this function before the event listener
  function removeEventListeners() {
    // Remove checkbox and radio button listeners
    document
      .querySelectorAll('.addons-popup input[type="checkbox"], .addons-popup input[type="radio"]')
      .forEach((input) => {
        const clone = input.cloneNode(true)
        input.parentNode?.replaceChild(clone, input)
      })

    // Remove counter-only item listeners
    document.querySelectorAll('.addon-item[data-has-counter="true"]').forEach((item) => {
      const clone = item.cloneNode(true)
      item.parentNode?.replaceChild(clone, item)
    })

    // Remove quantity control listeners
    document.querySelectorAll('.quantity-control').forEach((control) => {
      const decreaseBtn = control.querySelector('.quantity-decrease')
      const increaseBtn = control.querySelector('.quantity-increase')
      const input = control.querySelector('.quantity-input')

      if (decreaseBtn) {
        const clone = decreaseBtn.cloneNode(true)
        decreaseBtn.parentNode?.replaceChild(clone, decreaseBtn)
      }
      if (increaseBtn) {
        const clone = increaseBtn.cloneNode(true)
        increaseBtn.parentNode?.replaceChild(clone, increaseBtn)
      }
      if (input) {
        const clone = input.cloneNode(true)
        input.parentNode?.replaceChild(clone, input)
      }
    })

    // Remove  listeners
  }

  // Listen for addon popup events
  listenToAddonsPopup(async ({ itemId, itemType, isEditing, minOneAddon, requiresAddons, addonsChoice, addonData }) => {
    if (itemId && itemType) {
      popupContainer.dataset.itemId = itemId
      popupContainer.dataset.itemType = itemType
      popupContainer.dataset.requiredAddons = minOneAddon ? 'true' : 'false'
      popupContainer.dataset.requiresInitialAddons = requiresAddons ? 'true' : 'false'
      popupContainer.dataset.addonsChoice = addonsChoice || 'unlimited'

      // If addonData is present, we're opening from the cart page
      const isInCartPage = !!addonData
      popupContainer.dataset.isInCartPage = isInCartPage ? 'true' : 'false'

      console.log(addonData)

      // If addonData was provided from the cart, update the popup content
      if (addonData) {
        const addonsWrapper = document.querySelector('.addons-wrapper')

        if (addonsWrapper) {
          // Set data attribute for styling
          addonsWrapper.setAttribute('data-has-addons', addonData.hasAddons ? 'true' : 'false')

          if (addonData.hasAddons) {
            // Create heading
            const headingEl = addonsWrapper.querySelector('.heading') as HTMLElement
            headingEl.textContent = toPlainText(addonData.heading)

            // Clear and recreate addons list
            const addonsListEl = addonsWrapper.querySelector('.addons-list') as HTMLElement
            if (addonsListEl) {
              addonsListEl.innerHTML = '' // Clear existing content
              addonsListEl.setAttribute('data-layout', addonData.addonsLayout || 'vertical')

              // Create each addon item
              if (addonData.fullAddonsList && addonData.fullAddonsList.length > 0) {
                addonData.fullAddonsList?.forEach(async (addon: AddonItemType) => {
                  console.log(addonData.addonsChoice)
                  const hasCounter =
                    addon.pricing.type === 'per_unit' &&
                    addon.pricing.perUnit?.hasCount &&
                    addonData.addonsChoice !== 'limited'

                  const addonItem = document.createElement('label')
                  addonItem.className = `addon-item ${addonData.addonsChoice === 'limited' ? 'single-selection' : ''} ${hasCounter ? 'counter-only' : ''}`
                  addonItem.setAttribute('data-has-description', addon.description ? 'true' : 'false')
                  addonItem.setAttribute('data-addon-key', addon._key)
                  addonItem.setAttribute('data-has-counter', hasCounter ? 'true' : 'false')
                  addonItem.setAttribute('data-has-image', addon.image ? 'true' : 'false')

                  // Add image if applicable
                  if (addonData.addonsLayout === 'horizontal' && addonData.addonsHaveImage && addon.image) {
                    const imgSizes = popupContainer.dataset.imgSizes!
                    const optimizedImage = await optimizeImage({
                      image: addon.image.asset.url,
                      width: addon.image.asset.metadata.dimensions.width,
                      height: addon.image.asset.metadata.dimensions.height,
                    })
                    const img = document.createElement('img')
                    img.src = optimizedImage.src
                    img.srcset = optimizedImage.srcSet.attribute
                    img.sizes = imgSizes
                    img.alt = addon.name
                    addonItem.appendChild(img)
                  }

                  // Add checkbox/radio or counter
                  if (!hasCounter) {
                    const input = document.createElement('input')
                    input.type = addonData.addonsChoice === 'limited' ? 'radio' : 'checkbox'
                    input.name = 'addon-selection'
                    input.setAttribute('data-addon-key', addon._key)
                    input.required = addonData.minOneAddon || false
                    addonItem.appendChild(input)

                    const checkbox = document.createElement('div')
                    checkbox.className = 'checkbox-custom'
                    checkbox.innerHTML = `<svg class="checkmark" xmlns="http://www.w3.org/2000/svg" width="16" height="17" viewBox="0 0 16 17" fill="none"><path d="M4.66602 9.1L6.76125 11.5L11.9993 5.5" stroke="#FAF7F7" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>`
                    addonItem.appendChild(checkbox)
                  } else {
                    // Add quantity control
                    const quantityControl = document.createElement('div')
                    quantityControl.className = 'quantity-control'
                    quantityControl.innerHTML = `
                      <input type="number" min="0" value="0" data-quantity-for="${addon._key}" class="quantity-input">
                      <button type="button" class="quantity-decrease">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none">
                          <path stroke="#F67258" stroke-linecap="round" d="M16 10H4" />
                        </svg>
                      </button>
                      <button type="button" class="quantity-increase">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none">
                          <path stroke="#F67258" stroke-linecap="round" d="M10 5v10m5-5H5" />
                        </svg>
                      </button>
                    `
                    addonItem.appendChild(quantityControl)
                  }

                  // Add name
                  const nameSpan = document.createElement('span')
                  nameSpan.className = 'addon-name'
                  nameSpan.textContent = addon.name
                  addonItem.appendChild(nameSpan)

                  // Add description if available
                  if (addon.description) {
                    const descP = document.createElement('p')
                    descP.className = 'addon-description'
                    descP.textContent = addon.description
                    addonItem.appendChild(descP)
                  }

                  // Add price info
                  const priceDiv = document.createElement('div')
                  priceDiv.className = 'addon-price'
                  priceDiv.setAttribute('data-pricing', addon.pricing.type)

                  // Render price based on type
                  if (addon.pricing.type === 'fixed') {
                    priceDiv.innerHTML = `<strong>${addon.pricing.fixedPrice} ${t.currency}</strong>`
                  } else if (addon.pricing.type === 'per_unit') {
                    priceDiv.innerHTML = `<span><strong>${addon.pricing.perUnit?.price} ${t.currency}</strong>/${addon.pricing.perUnit?.singular}</span>`
                  } else if (addon.pricing.type === 'threshold') {
                    priceDiv.innerHTML = `
                      <span>
                        <span>
                          <strong>${addon.pricing.threshold?.basePrice} ${t.currency}</strong>/${t.upTo} ${addon.pricing.threshold?.maxUnits} ${addon.pricing.threshold?.singular}
                        </span>
                        <span>
                          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="13" fill="none">
                            <path stroke="#F67258" stroke-linecap="round" stroke-width="1.25" d="M9 6.5H6m0 0H3m3 0v-3m0 3v3"/>
                          </svg>
                          <span>${addon.pricing.threshold?.plural} <strong>${addon.pricing.threshold?.additionalPrice} ${t.currency}</strong></span>
                        </span>
                      </span>
                    `
                  } else if (addon.pricing.type === 'individual') {
                    priceDiv.innerHTML = `<strong>${t.individualQuote}</strong>`
                  }

                  addonItem.appendChild(priceDiv)
                  addonsListEl.appendChild(addonItem)
                })
              }
            }
          }
        }
      }

      // Remove existing event listeners before setting up new ones
      removeEventListeners()

      // Set up input change listeners
      setTimeout(() => {
        setupAddonEventListeners()
      }, 200)

      // Reset all quantity inputs to 0 and uncheck all checkboxes/radio buttons
      setTimeout(() => {
        document
          .querySelectorAll('.addons-popup input[type="checkbox"], .addons-popup input[type="radio"]')
          .forEach((input) => {
            ;(input as HTMLInputElement).checked = false
            input.removeAttribute('data-was-checked')
            const label = input.closest('.addon-item')
            if (label) {
              label.setAttribute('data-selected', 'false')
            }
            // Remove animation class from checkbox custom
            const checkboxCustom = input.nextElementSibling as HTMLElement
            if (checkboxCustom) {
              checkboxCustom.classList.remove('animate')
            }
          })

        document.querySelectorAll('.quantity-input').forEach((input) => {
          ;(input as HTMLInputElement).value = '0'
        })

        // Reset counter-only items
        document.querySelectorAll('.addon-item[data-has-counter="true"]').forEach((item) => {
          item.setAttribute('data-selected', 'false')
        })

        // If editing, load current addons after resetting
        if (isEditing && isInCart(itemId, itemType)) {
          const cartItem = getCartItem(itemId, itemType)
          if (cartItem) {
            const addons = Array.isArray(cartItem.addOns) ? cartItem.addOns : []
            preSelectAddons(addons)
          }
        }
      }, 100)

      // Trigger the popup to open
      popupTrigger.click()

      // Focus management - wait for popup to be visible
      setTimeout(() => {
        // Check if there are addons
        const hasAddonsInPopup = document.querySelector('.addons-list')

        if (hasAddonsInPopup) {
          // Find first focusable addon input
          const firstInput = document.querySelector(
            '.addons-popup input[type="checkbox"], .addons-popup input[type="radio"], .addons-popup .quantity-input'
          ) as HTMLElement
          if (firstInput) {
            firstInput.focus()
          }
        } else {
          // If no addons, focus on the first button
          const firstButton = document.querySelector('.addons-popup button.continue-browsing') as HTMLElement
          if (firstButton) {
            firstButton.focus()
          }
        }
      }, 200) // Wait for popup animation
    }
  })

  // Helper function to set up event listeners for addon inputs
  function setupAddonEventListeners() {
    // Check if we're in cart page based on the data attribute we set earlier
    const isInCartPage = popupContainer.dataset.isInCartPage === 'true'
    const requiresOneAddon = popupContainer.dataset.requiredAddons === 'true'

    // Add change listeners to checkboxes and radio buttons
    document
      .querySelectorAll('.addons-popup input[type="checkbox"], .addons-popup input[type="radio"]')
      .forEach((input) => {
        input.addEventListener('change', (e) => {
          const target = e.target as HTMLInputElement
          const label = target.closest('.addon-item')

          // If in cart page and addon is required, prevent deselecting the last one
          if (isInCartPage && requiresOneAddon && !target.checked) {
            // Check if this would leave no addons selected
            const totalSelected = document.querySelectorAll(
              '.addons-popup input[type="checkbox"]:checked, .addons-popup input[type="radio"]:checked'
            ).length

            console.log(totalSelected)

            // Also check counter-only items
            let counterSelected = false
            document.querySelectorAll('.addon-item[data-has-counter="true"] .quantity-input').forEach((input) => {
              const count = parseInt((input as HTMLInputElement).value, 10) || 0
              if (count > 0) counterSelected = true
            })

            console.log(counterSelected)

            // If this is the last selected item and no counter items are selected
            if (totalSelected < 1 && !counterSelected) {
              // Prevent deselection by re-checking the input
              target.checked = true
              if (label) {
                label.setAttribute('data-selected', 'true')
              }
              return // Skip the rest of the handler
            }
          }

          // Rest of existing handler code
          if (label) {
            label.setAttribute('data-selected', target.checked.toString())
          }
          // Add animation class on manual change
          const checkboxCustom = target.nextElementSibling as HTMLElement
          if (checkboxCustom) {
            checkboxCustom.classList.add('animate')
          }
          handleAddonSelection()
        })
      })

    // Add ability to deselect radio buttons in limited selection mode
    const isLimitedSelection = popupContainer.dataset.addonsChoice === 'limited'
    if (isLimitedSelection) {
      document.querySelectorAll('.addons-popup input[type="radio"]').forEach((radio) => {
        const radioInput = radio as HTMLInputElement
        const label = radioInput.closest('.addon-item')

        // Remove any existing click listeners first
        const newRadio = radioInput.cloneNode(true)
        radioInput.parentNode?.replaceChild(newRadio, radioInput)

        newRadio.addEventListener('click', (e) => {
          const input = e.target as HTMLInputElement
          const wasChecked = input.getAttribute('data-was-checked') === 'true'

          // If in cart page, prevent deselection if it's the last one
          if (isInCartPage && requiresOneAddon && wasChecked) {
            // Check if any other options are selected
            let anyOtherSelected = false

            // Check counter-only items
            document.querySelectorAll('.addon-item[data-has-counter="true"] .quantity-input').forEach((input) => {
              const count = parseInt((input as HTMLInputElement).value, 10) || 0
              if (count > 0) anyOtherSelected = true
            })

            if (!anyOtherSelected) {
              // Keep it selected
              return
            }
          }

          if (wasChecked) {
            // If it was already selected, unselect it
            input.checked = false
            input.removeAttribute('data-was-checked')
            if (label) {
              label.setAttribute('data-selected', 'false')
            }
          } else {
            // If selecting a new option
            document.querySelectorAll('.addon-item').forEach((l) => {
              l.setAttribute('data-selected', 'false')
            })
            document.querySelectorAll('input[name="addon-selection"]').forEach((r) => {
              r.removeAttribute('data-was-checked')
            })
            input.setAttribute('data-was-checked', 'true')
            if (label) {
              label.setAttribute('data-selected', 'true')
            }
          }
          handleAddonSelection()
        })
      })
    }

    // Handle counter-only items
    document.querySelectorAll('.addon-item[data-has-counter="true"]').forEach((label) => {
      label.addEventListener('click', (event) => {
        // Prevent the click from toggling unless it's on the counter controls
        const isOnControls = (event.target as HTMLElement).closest('.quantity-control') !== null
        if (!isOnControls) {
          event.preventDefault()
          event.stopPropagation()

          // Optionally focus on the quantity input to guide user
          const quantityInput = label.querySelector('.quantity-input') as HTMLInputElement
          if (quantityInput) {
            quantityInput.focus()
          }
        }
      })
    })

    // Set up handlers for popup buttons
    continueBrowsingBtn.addEventListener('click', () => {
      // Close the popup regardless of selection
      if (popupWindow) {
        popupWindow.setAttribute('aria-hidden', 'true')

        // Get current cart item and dispatch event with current addons
        const itemId = popupContainer.dataset.itemId
        const itemType = popupContainer.dataset.itemType as CartItemType

        if (itemId && itemType) {
          const cartItem = getCartItem(itemId, itemType)
          if (cartItem && cartItem.addOns) {
            document.dispatchEvent(
              new CustomEvent('cart-updated', {
                detail: {
                  itemId,
                  itemType,
                  action: 'update',
                  addons: cartItem.addOns,
                },
              })
            )
          }
        }
      }
    })

    // Handle "Go to cart" button click
    const goToCartBtn = document.querySelector('.go-to-cart-button') as HTMLButtonElement
    if (goToCartBtn) {
      goToCartBtn.addEventListener('click', () => {
        const itemId = popupContainer.dataset.itemId
        const itemType = popupContainer.dataset.itemType as CartItemType | undefined
        const requiresAddons = popupContainer.dataset.requiresInitialAddons === 'true'

        // If addons are required, check if any are selected
        if (requiresAddons && itemId && itemType) {
          // Check both checkbox/radio selections and counter-only selections
          const checkboxSelected =
            document.querySelectorAll(
              '.addons-popup input[type="checkbox"]:checked, .addons-popup input[type="radio"]:checked'
            ).length > 0

          // Check if any counter-only items are selected (have count > 0)
          let counterSelected = false
          document.querySelectorAll('.addon-item[data-has-counter="true"] .quantity-input').forEach((input) => {
            const count = parseInt((input as HTMLInputElement).value, 10) || 0
            if (count > 0) counterSelected = true
          })

          const hasSelectedAddons = checkboxSelected || counterSelected

          if (!hasSelectedAddons) {
            //TODO Add toast notification

            alert(
              popupContainer.dataset.lang === 'pl'
                ? popupContainer.getAttribute('data-alert-pl')
                : popupContainer.getAttribute('data-alert-en')
            )

            return // Prevent navigation to cart
          }
        }

        // If we got here, we can navigate to cart
        const cartUrl =
          popupContainer.dataset.lang === 'pl'
            ? popupContainer.getAttribute('data-cart-url-pl')
            : popupContainer.getAttribute('data-cart-url-en')

        window.location.href = cartUrl || '/cart'
      })
    }

    // Setup quantity controls
    document.querySelectorAll('.quantity-control').forEach((control) => {
      const decreaseBtn = control.querySelector('.quantity-decrease')
      const increaseBtn = control.querySelector('.quantity-increase')
      const input = control.querySelector('.quantity-input') as HTMLInputElement

      if (!decreaseBtn || !increaseBtn || !input) return

      decreaseBtn.addEventListener('click', () => {
        const currentValue = parseInt(input.value) || 0

        // Prevent decreasing to 0 if this is the last addon and we're in cart page
        if (isInCartPage && requiresOneAddon && currentValue <= 1) {
          // Check if any other addons are selected
          const checkboxSelected =
            document.querySelectorAll(
              '.addons-popup input[type="checkbox"]:checked, .addons-popup input[type="radio"]:checked'
            ).length > 0

          let otherCounterSelected = false
          document.querySelectorAll('.addon-item[data-has-counter="true"] .quantity-input').forEach((otherInput) => {
            if (otherInput !== input) {
              const count = parseInt((otherInput as HTMLInputElement).value, 10) || 0
              if (count > 0) otherCounterSelected = true
            }
          })

          if (!checkboxSelected && !otherCounterSelected) {
            return // Prevent decreasing
          }
        }

        if (currentValue > 0) {
          input.value = (currentValue - 1).toString()

          // Get the addon item and check if it's counter-only
          const addonItem = input.closest('.addon-item')
          const addonKey = input.getAttribute('data-quantity-for')
          const isCounterOnly = addonItem?.getAttribute('data-has-counter') === 'true'

          if (isCounterOnly) {
            // Update visual state of counter-only items based on count
            if (currentValue - 1 === 0) {
              addonItem?.setAttribute('data-selected', 'false')
            }
          } else if (currentValue - 1 === 0 && addonKey) {
            // For non-counter-only items, uncheck the checkbox if count drops to 0
            const addonInput = document.querySelector(`input[data-addon-key="${addonKey}"]`) as HTMLInputElement
            if (addonInput) {
              addonInput.checked = false
              const label = addonInput.closest('.addon-item')
              if (label) {
                label.setAttribute('data-selected', 'false')
              }
            }
          }

          handleAddonSelection()
        }
      })

      increaseBtn.addEventListener('click', () => {
        const currentValue = parseInt(input.value) || 0
        input.value = (currentValue + 1).toString()

        // Get the addon item and check if it's counter-only
        const addonItem = input.closest('.addon-item')
        const addonKey = input.getAttribute('data-quantity-for')
        const isCounterOnly = addonItem?.getAttribute('data-has-counter') === 'true'

        if (isCounterOnly) {
          // Update visual state of counter-only items based on count
          addonItem?.setAttribute('data-selected', 'true')
        } else if (currentValue === 0 && addonKey) {
          // For non-counter-only items with regular checkboxes
          const addonInput = document.querySelector(`input[data-addon-key="${addonKey}"]`) as HTMLInputElement
          if (addonInput) {
            addonInput.checked = true
            const label = addonInput.closest('.addon-item')
            if (label) {
              label.setAttribute('data-selected', 'true')
            }
          }
        }

        handleAddonSelection()
      })
    })

    // Add input handlers
    document.querySelectorAll('.quantity-input').forEach((input) => {
      const inputElement = input as HTMLInputElement

      // Handle direct input changes
      inputElement.addEventListener('input', () => {
        // Remove any non-digit characters
        inputElement.value = inputElement.value.replace(/[^\d]/g, '')

        // Ensure the value is not empty
        if (inputElement.value === '') {
          inputElement.value = '0'
        }

        // Parse the value and ensure it's not negative
        let value = parseInt(inputElement.value)
        if (isNaN(value) || value < 0) {
          value = 0
        }
        inputElement.value = value.toString()

        // Get the addon item and check if it's counter-only
        const addonItem = inputElement.closest('.addon-item')
        const addonKey = inputElement.getAttribute('data-quantity-for')
        const isCounterOnly = addonItem?.getAttribute('data-has-counter') === 'true'

        if (isCounterOnly) {
          // Update visual state of counter-only items based on count
          addonItem?.setAttribute('data-selected', value > 0 ? 'true' : 'false')
        } else if (addonKey) {
          // For non-counter-only items with regular checkboxes
          const addonInput = document.querySelector(`input[data-addon-key="${addonKey}"]`) as HTMLInputElement
          if (addonInput) {
            addonInput.checked = value > 0
            const label = addonInput.closest('.addon-item')
            if (label) {
              label.setAttribute('data-selected', value > 0 ? 'true' : 'false')
            }
          }
        }

        handleAddonSelection()
      })

      // Handle blur event to ensure proper value when focus is lost
      inputElement.addEventListener('blur', () => {
        let value = parseInt(inputElement.value)
        if (isNaN(value) || value < 0) {
          value = 0
          inputElement.value = '0'

          // Get the addon item and update its state
          const addonItem = inputElement.closest('.addon-item')
          const addonKey = inputElement.getAttribute('data-quantity-for')
          const isCounterOnly = addonItem?.getAttribute('data-has-counter') === 'true'

          if (isCounterOnly) {
            addonItem?.setAttribute('data-selected', 'false')
          } else if (addonKey) {
            const addonInput = document.querySelector(`input[data-addon-key="${addonKey}"]`) as HTMLInputElement
            if (addonInput) {
              addonInput.checked = false
              const label = addonInput.closest('.addon-item')
              if (label) {
                label.setAttribute('data-selected', 'false')
              }
            }
          }

          handleAddonSelection()
        }
      })
    })
  }
</script>
