---
import PopupWindow from '@/src/components/ui/PopupWindow/index.astro'
import CloseButton from '@/src/components/ui/PopupWindow/CloseButton.astro'
import Button from '@/components/ui/Button'
import { getLangFromPath, type Language } from '@/src/global/languages'
import type { ImageDataProps } from '../ui/image'
import PortableText, { type PortableTextValue } from '../ui/portable-text'

// Get language from URL for default text
const lang = (getLangFromPath(Astro.url.pathname) as Language) || 'pl'

// Default translations (will be replaced by translations from the event)
const defaultTranslations = {
  pl: {
    addedTitle: {
      hotel: 'Dodano hotel do wyceny!',
      activity: 'Dodano integrację do wyceny!',
    },
    addedText:
      'Przejdź do koszyka lub kontynuuj wybieranie spośród wielu hoteli i integracji, które spełniają Twoje wymagania.',
    cartUrl: '/pl/koszyk',
    continueButton: 'Przejdź do koszyka',
    skipButton: 'Kontynuuj przeglądanie',
    saveButton: 'Zapisz dodatki',
    updateButton: 'Aktualizuj dodatki',
    requiredAddonsAlert: 'Aby przejść do koszyka, musisz wybrać przynajmniej jeden dodatek.',
  },
  en: {
    addedTitle: {
      hotel: 'Added hotel to quote!',
      activity: 'Added activity to quote!',
    },
    addedText: 'You can now go to the cart or continue browsing hotels and activities.',
    cartUrl: '/en/cart',
    continueButton: 'Go to cart',
    skipButton: 'Continue browsing',
    saveButton: 'Save add-ons',
    updateButton: 'Update add-ons',
    requiredAddonsAlert: 'To proceed to cart, you must select at least one add-on.',
  },
}

type Props = {
  addons?: {
    hasAddons: boolean
    heading?: PortableTextValue
    addonsChoice?: 'unlimited' | 'limited'
    minOneAddon?: boolean
    addonsLayout?: 'vertical' | 'horizontal'
    addonsHaveImage?: boolean
    addonsList?: Array<{
      _key: string
      name: string
      image?: ImageDataProps
      pricing: {
        type: 'fixed' | 'per_unit' | 'threshold' | 'individual'
        fixedPrice?: number
        perUnit?: {
          price: number
          hasCount: boolean
          singular: string
          plural: string
        }
        threshold?: {
          basePrice: number
          maxUnits: number
          additionalPrice: number
          singular: string
          plural: string
        }
      }
    }>
    additionalInfo?: string
  }
  type: 'hotels' | 'activities'
}

// Use the default translations for initial rendering
const t = defaultTranslations[lang]

const { addons, type } = Astro.props

const getValidationRules = (addons: Props['addons']) => {
  if (!addons?.hasAddons) return {}

  return {
    required: addons.minOneAddon ? true : false,
    maxSelections: addons.addonsChoice === 'limited' ? 1 : null,
  }
}

const validationRules = getValidationRules(addons)
---

<div
  class="addons-popup-container"
  data-cart-url-pl={defaultTranslations.pl.cartUrl}
  data-cart-url-en={defaultTranslations.en.cartUrl}
  data-alert-pl={defaultTranslations.pl.requiredAddonsAlert}
  data-alert-en={defaultTranslations.en.requiredAddonsAlert}
  data-lang={lang}
>
  <PopupWindow>
    <!-- Hidden trigger button that will be programmatically clicked -->
    <div slot="open" class="hidden-trigger">
      <button></button>
    </div>
    <div slot="content" class="addons-popup">
      <CloseButton />
      <div class="addons-wrapper">
        {
          addons?.hasAddons ? (
            <>
              <PortableText value={addons.heading!} heading="h3" class="heading" />

              <div class={`addons-list ${addons.addonsLayout === 'horizontal' ? 'horizontal' : 'vertical'}`}>
                {addons.addonsList?.map((addon) => (
                  <div
                    class={`addon-item ${addons.addonsChoice === 'limited' ? 'single-selection' : ''}`}
                    data-addon-key={addon._key}
                  >
                    <label class="addon-label">
                      <input
                        type={addons.addonsChoice === 'limited' ? 'radio' : 'checkbox'}
                        name="addon-selection"
                        data-addon-key={addon._key}
                        required={validationRules.required}
                      />

                      {addons.addonsHaveImage && addon.image && (
                        <div class="addon-image">
                          <img src={addon.image.asset.url} alt={addon.name} />
                        </div>
                      )}

                      <div class="addon-details">
                        <span class="addon-name">{addon.name}</span>

                        <span class="addon-price">
                          {addon.pricing.type === 'fixed' && `${addon.pricing.fixedPrice} zł`}
                          {addon.pricing.type === 'per_unit' && (
                            <>
                              {`${addon.pricing.perUnit?.price} zł`}
                              {addon.pricing.perUnit?.hasCount && addons.addonsChoice !== 'limited' && (
                                <div class="quantity-control">
                                  <button type="button" class="quantity-decrease">
                                    -
                                  </button>
                                  <input
                                    type="number"
                                    min="0"
                                    value="0"
                                    data-quantity-for={addon._key}
                                    class="quantity-input"
                                  />
                                  <button type="button" class="quantity-increase">
                                    +
                                  </button>
                                </div>
                              )}
                            </>
                          )}
                          {addon.pricing.type === 'threshold' && `${addon.pricing.threshold?.basePrice} zł`}
                        </span>
                      </div>
                    </label>
                  </div>
                ))}
              </div>

              <p class="paragraph">{addons.additionalInfo}</p>
            </>
          ) : (
            <>
              <div class="heading">
                <h3>{type === 'hotels' ? t.addedTitle.hotel : t.addedTitle.activity}</h3>

                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 17 16" fill="none">
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M6.89754 2.13368C6.73519 2.27203 6.65401 2.34121 6.56731 2.39932C6.36858 2.53252 6.14539 2.62497 5.91067 2.67131C5.80828 2.69153 5.70196 2.70001 5.48932 2.71698C4.95507 2.75961 4.68794 2.78093 4.46508 2.85965C3.94961 3.04172 3.54416 3.44717 3.36209 3.96263C3.28337 4.1855 3.26205 4.45263 3.21942 4.98688C3.20245 5.19952 3.19397 5.30584 3.17375 5.40823C3.12741 5.64294 3.03497 5.86613 2.90176 6.06487C2.84365 6.15157 2.77448 6.23274 2.63612 6.3951C2.28849 6.80302 2.11467 7.00698 2.01275 7.22023C1.777 7.71346 1.777 8.28686 2.01275 8.78009C2.11467 8.99334 2.28849 9.1973 2.63612 9.60523C2.77446 9.76756 2.84366 9.84876 2.90176 9.93545C3.03497 10.1342 3.12741 10.3574 3.17375 10.5921C3.19397 10.6945 3.20245 10.8008 3.21942 11.0134C3.26205 11.5477 3.28337 11.8148 3.36209 12.0377C3.54416 12.5532 3.94961 12.9586 4.46507 13.1407C4.68794 13.2194 4.95507 13.2407 5.48932 13.2833C5.70196 13.3003 5.80828 13.3088 5.91067 13.329C6.14539 13.3754 6.36858 13.4678 6.56731 13.601C6.65401 13.6591 6.73519 13.7283 6.89754 13.8666C7.30546 14.2143 7.50942 14.3881 7.72268 14.49C8.21591 14.7258 8.7893 14.7258 9.28253 14.49C9.49578 14.3881 9.69974 14.2143 10.1077 13.8666C10.27 13.7283 10.3512 13.6591 10.4379 13.601C10.6366 13.4678 10.8598 13.3754 11.0945 13.329C11.1969 13.3088 11.3032 13.3003 11.5159 13.2833C12.0501 13.2407 12.3173 13.2194 12.5401 13.1407C13.0556 12.9586 13.461 12.5532 13.6431 12.0377C13.7218 11.8148 13.7432 11.5477 13.7858 11.0134C13.8028 10.8008 13.8112 10.6945 13.8315 10.5921C13.8778 10.3574 13.9702 10.1342 14.1034 9.93546C14.1616 9.84876 14.2307 9.76758 14.3691 9.60523C14.7167 9.1973 14.8905 8.99334 14.9925 8.78009C15.2282 8.28686 15.2282 7.71346 14.9925 7.22023C14.8905 7.00698 14.7167 6.80302 14.3691 6.3951C14.2307 6.23274 14.1616 6.15157 14.1034 6.06487C13.9702 5.86613 13.8778 5.64294 13.8315 5.40823C13.8112 5.30584 13.8028 5.19952 13.7858 4.98688C13.7432 4.45263 13.7218 4.1855 13.6431 3.96263C13.461 3.44717 13.0556 3.04172 12.5401 2.85965C12.3173 2.78093 12.0501 2.75961 11.5159 2.71698C11.3032 2.70001 11.1969 2.69153 11.0945 2.67131C10.8598 2.62497 10.6366 2.53252 10.4379 2.39932C10.3512 2.34121 10.27 2.27203 10.1077 2.13368C9.69974 1.78605 9.49578 1.61223 9.28253 1.51031C8.7893 1.27456 8.21591 1.27456 7.72267 1.51031C7.50943 1.61223 7.30546 1.78605 6.89754 2.13368ZM11.4183 6.57559C11.6301 6.3637 11.6301 6.02016 11.4183 5.80827C11.2064 5.59638 10.8628 5.59638 10.6509 5.80827L7.41745 9.04177L6.35424 7.97856C6.14236 7.76668 5.79882 7.76668 5.58693 7.97856C5.37504 8.19045 5.37504 8.53399 5.58693 8.74588L7.03379 10.1927C7.24568 10.4046 7.58922 10.4046 7.80111 10.1927L11.4183 6.57559Z"
                    fill="#F67258"
                  />
                </svg>
              </div>
              <p class="paragraph">{t.addedText}</p>
            </>
          )
        }
      </div>
      <div class="actions">
        <Button theme="primary" className="continue-browsing" shade="light">{t.skipButton}</Button>
        <Button theme="primary" shade="dark" className="go-to-cart-button">{t.continueButton}</Button>
      </div>
    </div>
  </PopupWindow>
</div>

<style lang="scss">
  .addons-popup-container {
    z-index: 9999;
    position: relative;

    .hidden-trigger {
      display: none;
    }

    :global(.Wrapper) {
      :global(.content) {
        &::after {
          background: var(--neutral-100) !important;
          border-radius: clamp(1rem, calc(1.15vw / 0.48), 1.15rem) !important;
        }

        &::before {
          border-radius: clamp(1rem, calc(1.25vw / 0.48), 1.25rem) !important;
        }
      }
    }

    .addons-popup {
      width: 100%;
      max-width: 54.75rem;
      max-height: calc(100dvh - 6rem);
      padding: 4rem;

      :global(.CloseButton) {
        position: absolute !important;
        top: 1.5rem;
        right: 1.5rem;

        &::before {
          background: var(--neutral-200) !important;
        }
      }

      .addons-wrapper {
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;

        .heading {
          color: var(--primary-800, #45051c);
          font-size: var(--typography-body-2xl, 1.5rem);
          line-height: 1.25;
          letter-spacing: -0.04em;
          font-weight: 700;
          max-width: fit-content;

          position: relative;

          :global(svg) {
            margin-top: 0.375rem;
            position: absolute;
            top: -1.25rem;
            right: -3rem;
          }
        }

        .paragraph {
          margin: 1.5rem 0 2.5rem;
          max-width: 30rem;
        }

        .addons-list {
          width: 100%;
          margin: 1.5rem 0;

          &.horizontal {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(10rem, 1fr));
            gap: 1rem;
          }

          &.vertical {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
          }

          .addon-item {
            background: var(--neutral-100);
            border-radius: 0.5rem;
            overflow: hidden;
          }

          .addon-label {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem;
            cursor: pointer;
            width: 100%;

            input[type='checkbox'],
            input[type='radio'] {
              flex-shrink: 0;
              width: 1.25rem;
              height: 1.25rem;
              cursor: pointer;
            }
          }

          .addon-item.single-selection {
            position: relative;

            .addon-label input[type='radio'] {
              &:hover {
                cursor: pointer;
              }
            }
          }

          .addon-image {
            width: 3.5rem;
            height: 3.5rem;
            border-radius: 0.25rem;
            overflow: hidden;

            img {
              width: 100%;
              height: 100%;
              object-fit: cover;
            }
          }

          .addon-details {
            display: flex;
            flex-direction: column;
            flex: 1;
          }

          .addon-name {
            font-weight: 500;
            color: var(--primary-800);
          }

          .addon-price {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-top: 0.25rem;
          }

          .quantity-control {
            display: flex;
            align-items: center;

            .quantity-input {
              width: 2rem;
              text-align: center;
              border: 1px solid var(--neutral-300);
              border-radius: 0.25rem;
              margin: 0 0.25rem;
            }

            button {
              width: 1.5rem;
              height: 1.5rem;
              display: flex;
              align-items: center;
              justify-content: center;
              background: var(--neutral-200);
              border: none;
              border-radius: 0.25rem;
              cursor: pointer;

              &:hover {
                background: var(--neutral-300);
              }
            }
          }
        }

        .required-addons-message {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          color: var(--primary-600);
          font-size: var(--typography-body-m);
          margin: 0.75rem 0;
          padding: 0.75rem 1rem;
          background-color: var(--neutral-100);
          border-radius: 0.5rem;
          border-left: 3px solid var(--primary-500);

          svg {
            flex-shrink: 0;
          }

          &.highlight-error {
            background-color: rgba(230, 57, 70, 0.1);
            border-left-color: var(--error-color, #e63946);
            animation: pulse 0.5s;
          }
        }

        @keyframes pulse {
          0% {
            transform: scale(1);
          }
          50% {
            transform: scale(1.05);
          }
          100% {
            transform: scale(1);
          }
        }
      }

      .actions {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
        width: 100%;

        :global(button),
        :global(a) {
          flex: 1;
          width: 100%;
          max-width: 100%;

          :global(span) {
            margin: 0 auto;
            padding-right: 1.75rem;
          }
        }
      }
    }
  }
</style>

<script>
  import {
    updateCartAddons,
    isInCart,
    getCartItem,
    type AddonItem,
    addToCart,
    removeFromCart,
    cartStore,
  } from '@/src/store/cart'

  const popupContainer = document.querySelector('.addons-popup-container')! as HTMLDivElement
  const popupTrigger = document.querySelector('.hidden-trigger button')! as HTMLButtonElement
  const popupWindow = document.querySelector('.addons-popup-container .popup-window') as HTMLDivElement
  const continueBrowsingBtn = document.querySelector('.addons-popup-container .continue-browsing') as HTMLButtonElement

  // Function to pre-select addons when editing
  function preSelectAddons(addons: AddonItem[]) {
    // Get all addon checkboxes/inputs
    const addonInputs = document.querySelectorAll(
      '.addons-popup input[type="checkbox"], .addons-popup input[type="radio"]'
    )

    // For each input, check if it's in the addons array and set checked state
    addonInputs.forEach((input) => {
      const addonKey = input.getAttribute('data-addon-key')
      if (addonKey) {
        const addon = addons.find((a) => a.id === addonKey)
        if (addon) {
          ;(input as HTMLInputElement).checked = true

          // Mark radio as previously checked for deselection logic
          if (input.getAttribute('type') === 'radio') {
            ;(input as HTMLInputElement).dataset.wasChecked = 'true'
          }

          // If addon has count, set it
          const quantityInput = document.querySelector(`[data-quantity-for="${addonKey}"]`) as HTMLInputElement
          if (quantityInput && addon.count !== undefined) {
            quantityInput.value = addon.count.toString()
          }
        }
      }
    })
  }

  // Function to handle addon selection changes
  function handleAddonSelection() {
    const itemId = popupContainer.dataset.itemId
    const itemType = popupContainer.dataset.itemType as 'hotels' | 'activities'
    const requiresAddons = popupContainer.dataset.requiresInitialAddons === 'true'
    const isLimitedSelection = popupContainer.dataset.addonsChoice === 'limited'

    console.log('handleAddonSelection - isLimitedSelection:', isLimitedSelection)
    console.log('handleAddonSelection - popupContainer.dataset.addonsChoice:', popupContainer.dataset.addonsChoice)

    if (itemId && itemType) {
      // Collect selected addons
      const selectedAddons: AddonItem[] = []
      const addonInputs = document.querySelectorAll(
        '.addons-popup input[type="checkbox"]:checked, .addons-popup input[type="radio"]:checked'
      )

      addonInputs.forEach((input) => {
        const addonKey = input.getAttribute('data-addon-key')
        if (addonKey) {
          // Handle differently based on selection mode
          if (isLimitedSelection) {
            // For limited selection (max one addon), never include count
            selectedAddons.push({
              id: addonKey,
            })
          } else {
            // For unlimited selection, check if there's a quantity
            const quantityInput = document.querySelector(`[data-quantity-for="${addonKey}"]`) as HTMLInputElement
            if (quantityInput) {
              const count = parseInt(quantityInput.value, 10) || 0
              // Only add the addon if count is greater than 0
              if (count > 0) {
                selectedAddons.push({
                  id: addonKey,
                  count: count,
                })
              }
            } else {
              // For addons without quantity control
              selectedAddons.push({
                id: addonKey,
              })
            }
          }
        }
      })

      // Handle cart updates based on selection
      if (requiresAddons) {
        if (selectedAddons.length > 0) {
          // Add to cart if not already in cart
          if (!isInCart(itemId, itemType)) {
            addToCart({
              id: itemId,
              type: itemType,
              addOns: selectedAddons,
            })
          } else {
            // Just update the addons
            updateCartAddons(itemId, itemType, selectedAddons)
          }
        } else {
          // If no addons selected and it requires addons, remove from cart
          if (isInCart(itemId, itemType)) {
            removeFromCart(itemId, itemType)
          }
        }
      } else {
        // Just update the addons if item doesn't require addons
        updateCartAddons(itemId, itemType, selectedAddons)
      }

      // Trigger cart updated event
      document.dispatchEvent(
        new CustomEvent('cart-updated', {
          detail: {
            itemId,
            itemType,
          },
        })
      )

      // Log the cart state after addon change
      console.log('Addon changed - Current cart:', cartStore.get())
    }
  }

  document.addEventListener('open-addons-popup', (event) => {
    const { itemId, itemType, isEditing, minOneAddon, requiresAddons, addonsChoice } = (event as CustomEvent).detail

    if (itemId && itemType) {
      popupContainer.dataset.itemId = itemId
      popupContainer.dataset.itemType = itemType
      console.log(cartStore.get())
      popupContainer.dataset.requiredAddons = minOneAddon ? 'true' : 'false'
      popupContainer.dataset.requiresInitialAddons = requiresAddons ? 'true' : 'false'

      // Store the addons selection mode
      popupContainer.dataset.addonsChoice = addonsChoice || 'unlimited'

      console.log('addonsChoice:', addonsChoice)
      console.log('popupContainer.dataset.addonsChoice:', popupContainer.dataset.addonsChoice)

      // Show the required addons message if needed
      const requiredMessage = document.querySelector('.required-addons-message') as HTMLElement
      if (requiredMessage) {
        requiredMessage.style.display = requiresAddons ? 'flex' : 'none'
      }

      // Reset all quantity inputs to 0 and uncheck all checkboxes/radio buttons
      setTimeout(() => {
        document
          .querySelectorAll('.addons-popup input[type="checkbox"], .addons-popup input[type="radio"]')
          .forEach((input) => {
            ;(input as HTMLInputElement).checked = false
          })

        document.querySelectorAll('.quantity-input').forEach((input) => {
          ;(input as HTMLInputElement).value = '0'
        })

        // If editing, load current addons after resetting
        if (isEditing && isInCart(itemId, itemType)) {
          const cartItem = getCartItem(itemId, itemType)
          if (cartItem) {
            // Ensure addOns is an array before passing to preSelectAddons
            const addons = Array.isArray(cartItem.addOns) ? cartItem.addOns : []
            // Pre-select addons based on cartItem.addOns
            preSelectAddons(addons)
          }
        }
      }, 100) // Add delay to ensure DOM is ready

      // Trigger the popup to open by clicking the hidden button
      popupTrigger.click()

      // After popup is open, set up input change listeners
      setTimeout(() => {
        // Add change listeners to checkboxes and radio buttons
        document
          .querySelectorAll('.addons-popup input[type="checkbox"], .addons-popup input[type="radio"]')
          .forEach((input) => {
            input.addEventListener('change', handleAddonSelection)
          })

        // Add ability to deselect radio buttons when in limited selection mode
        const addonsChoice = popupContainer.dataset.addonsChoice
        console.log('Setting up radio button handlers with addonsChoice:', addonsChoice)

        if (addonsChoice === 'limited') {
          // For limited selection mode, we need to enable radio button deselection
          document.querySelectorAll('.addons-popup input[type="radio"]').forEach((radio) => {
            const radioInput = radio as HTMLInputElement

            // Add a direct click handler to each radio button
            radio.addEventListener('click', () => {
              // If this radio was already checked, uncheck it
              if (radioInput.dataset.wasChecked === 'true') {
                setTimeout(() => {
                  radioInput.checked = false
                  radioInput.dataset.wasChecked = 'false'
                  handleAddonSelection()
                }, 0)
              } else {
                // Mark this radio as checked for next click
                document.querySelectorAll('input[name="addon-selection"]').forEach((r) => {
                  ;(r as HTMLInputElement).dataset.wasChecked = 'false'
                })
                radioInput.dataset.wasChecked = 'true'
              }
            })
          })
        }
      }, 200)
    }
  })

  // Set up handlers for popup buttons
  continueBrowsingBtn.addEventListener('click', () => {
    // Close the popup regardless of selection
    if (popupWindow) {
      popupWindow.setAttribute('aria-hidden', 'true')

      // Trigger cart-updated event one more time to ensure sidebar is in sync
      const itemId = popupContainer.dataset.itemId
      const itemType = popupContainer.dataset.itemType

      if (itemId && itemType) {
        document.dispatchEvent(
          new CustomEvent('cart-updated', {
            detail: {
              itemId,
              itemType,
            },
          })
        )
      }
    }
  })

  // Handle "Go to cart" button click
  const goToCartBtn = document.querySelector('.go-to-cart-button') as HTMLButtonElement
  if (goToCartBtn) {
    goToCartBtn.addEventListener('click', () => {
      const itemId = popupContainer.dataset.itemId
      const itemType = popupContainer.dataset.itemType as 'hotels' | 'activities' | undefined
      const requiresAddons = popupContainer.dataset.requiresInitialAddons === 'true'

      // If addons are required, check if any are selected
      if (requiresAddons && itemId && itemType) {
        const hasSelectedAddons =
          document.querySelectorAll(
            '.addons-popup input[type="checkbox"]:checked, .addons-popup input[type="radio"]:checked'
          ).length > 0

        if (!hasSelectedAddons) {
          //TODO Add toast notification

          alert(
            popupContainer.dataset.lang === 'pl'
              ? popupContainer.getAttribute('data-alert-pl')
              : popupContainer.getAttribute('data-alert-en')
          )

          return // Prevent navigation to cart
        }
      }

      // If we got here, we can navigate to cart
      const cartUrl =
        popupContainer.dataset.lang === 'pl'
          ? popupContainer.getAttribute('data-cart-url-pl')
          : popupContainer.getAttribute('data-cart-url-en')

      window.location.href = cartUrl || '/cart'
    })
  }

  // Handle quantity controls
  document.querySelectorAll('.quantity-decrease').forEach((button) => {
    button.addEventListener('click', () => {
      const input = button.nextElementSibling as HTMLInputElement
      const currentValue = parseInt(input.value)
      if (currentValue > 0) {
        input.value = (currentValue - 1).toString()

        // If count reaches 0 and there's a checkbox/radio connected to this quantity,
        // uncheck it if count is 0
        if (currentValue - 1 === 0) {
          const addonKey = input.getAttribute('data-quantity-for')
          if (addonKey) {
            const addonInput = document.querySelector(`input[data-addon-key="${addonKey}"]`) as HTMLInputElement
            if (addonInput) {
              addonInput.checked = false
            }
          }
        }

        handleAddonSelection()
      }
    })
  })

  document.querySelectorAll('.quantity-increase').forEach((button) => {
    button.addEventListener('click', () => {
      const input = button.previousElementSibling as HTMLInputElement
      const currentValue = parseInt(input.value)
      input.value = (currentValue + 1).toString()

      // If count increases from 0, ensure the checkbox/radio is checked
      if (currentValue === 0) {
        const addonKey = input.getAttribute('data-quantity-for')
        if (addonKey) {
          const addonInput = document.querySelector(`input[data-addon-key="${addonKey}"]`) as HTMLInputElement
          if (addonInput) {
            addonInput.checked = true
          }
        }
      }

      handleAddonSelection()
    })
  })
</script>
