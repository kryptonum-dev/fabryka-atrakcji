---
import { getLangFromPath, type Language } from '@/global/languages'

type Props = {
  heading: string
  description?: string
  minPrice: number
  maxPrice: number
  currentMin?: number
  currentMax?: number
  forceDisabled?: boolean
}

const { heading, description, minPrice, maxPrice, currentMin, currentMax, forceDisabled = false } = Astro.props

// Check if price filter should be disabled (no min/max price or they are equal)
const isDisabled = !minPrice || !maxPrice || minPrice === maxPrice || forceDisabled

// Ensure values are properly bounded by the min/max from Sanity
let safeCurrentMin = currentMin ? (currentMin < minPrice ? minPrice : currentMin) : minPrice
let safeCurrentMax = currentMax ? (currentMax > maxPrice ? maxPrice : currentMax) : maxPrice

// Check if we have custom values set from URL parameters (different from defaults)
const hasCustomValues = (currentMin && currentMin !== minPrice) || (currentMax && currentMax !== maxPrice)

const lang = getLangFromPath(Astro.url.pathname) as Language
const translations = {
  pl: {
    min: 'od',
    max: 'do',
    currency: 'zł',
    error: {
      range: 'Wartość minimalna nie może być większa od maksymalnej',
      bounds: 'Wartości muszą być w zakresie od {min} do {max} PLN',
      invalid: 'Proszę wprowadzić prawidłową liczbę całkowitą',
    },
  },
  en: {
    min: 'from',
    max: 'to',
    currency: 'PLN',

    error: {
      range: 'Minimum value cannot be greater than maximum',
      bounds: 'Values must be between {min} and {max} PLN',
      invalid: 'Please enter a valid integer number',
    },
  },
}

const t = translations[lang]
---

<details
  class="filter-group price-filter-group price-range-filter"
  data-min={minPrice}
  data-max={maxPrice}
  data-filter
  data-param-name="price"
  data-has-selection={hasCustomValues ? hasCustomValues.toString() : 'false'}
  data-disabled={isDisabled.toString()}
  data-error-range={t.error.range}
  data-error-bounds={t.error.bounds
    .replace('{min}', minPrice?.toString() ?? '')
    .replace('{max}', maxPrice?.toString() ?? '')}
  data-error-invalid={t.error.invalid}
  data-expanded={!isDisabled ? 'true' : 'false'}
  data-description={!description ? 'false' : 'true'}
  open={!isDisabled}
>
  <summary>
    <span>{heading}</span>
    {description && <p class="description">{description}</p>}
    <button class="selected-value" type="button" style={hasCustomValues ? 'display: flex' : 'display: none'}>
      <span>
        {safeCurrentMin} - {safeCurrentMax}
        {t.currency}
      </span>
      <div class="clear-icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
          <circle cx="9.9974" cy="10.0003" r="8.33333" stroke="#74535e"></circle>
          <path
            d="M12.0807 7.91701L7.91406 12.0837M7.91404 7.91699L12.0807 12.0836"
            stroke="#74535e"
            stroke-linecap="round"></path>
        </svg>
      </div>
    </button>
    <div class="icon">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
        <path stroke="#600D2A" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.25" d="m4 6.25 4 4 4-4"
        ></path>
      </svg>
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
        <path stroke="#600D2A" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.25" d="m4 6.25 4 4 4-4"
        ></path>
      </svg>
    </div>
  </summary>

  <div class="filter-content">
    <div class="wrapper">
      <div class="range-container">
        <div class="slider-track"></div>
        <div class="slider-range"></div>
        <input
          type="range"
          class="price-range min-range"
          min={minPrice}
          max={maxPrice}
          step="5"
          value={safeCurrentMin}
        />
        <input
          type="range"
          class="price-range max-range"
          min={minPrice}
          max={maxPrice}
          step="5"
          value={safeCurrentMax}
        />
      </div>

      <div class="inputs-container">
        <div class="input-group">
          <label>
            <span>{t.min}</span>
            <div class="input-wrapper">
              <input type="number" class="price-input min-price" min={minPrice} max={maxPrice} value={safeCurrentMin} />
              <span class="currency">{t.currency}</span>
            </div>
          </label>
        </div>

        <span class="separator">-</span>

        <div class="input-group">
          <label>
            <span>{t.max}</span>
            <div class="input-wrapper">
              <input type="number" class="price-input max-price" min={minPrice} max={maxPrice} value={safeCurrentMax} />
              <span class="currency">{t.currency}</span>
            </div>
          </label>
        </div>
      </div>

      <div class="error-message" aria-live="polite"></div>
    </div>
  </div>
</details>

<style lang="scss">
  .price-filter-group {
    overflow: hidden;
    color: var(--primary-800);
    padding: 0.375rem 0rem;

    &[data-disabled='true'] {
      summary {
        cursor: default;

        > span:first-of-type {
          opacity: 0.6;
          pointer-events: none;
        }

        .icon {
          pointer-events: none;
          opacity: 0.6;
        }

        // Keep the selected-value button fully visible and interactive
        .selected-value {
          opacity: 1;
          cursor: pointer;
          pointer-events: auto;

          &:hover {
            .clear-icon {
              opacity: 1;
            }
          }
        }

        .description {
          opacity: 0.6;
          pointer-events: none;
        }
      }

      // Disable the filter content
      .filter-content {
        pointer-events: none;
        opacity: 0.6;
        cursor: default;

        .wrapper {
          cursor: default;
        }

        .range-container {
          cursor: default;
          input[type='range'] {
            cursor: default;
            &::-webkit-slider-thumb {
              cursor: default;
            }
            &::-moz-range-thumb {
              cursor: default;
            }
          }
        }

        .inputs-container {
          cursor: default;
          input {
            cursor: default;
          }
        }
      }
    }

    &[data-has-selection='true'] {
      border-color: var(--neutral-300);
    }

    summary {
      padding: 0rem 0.25rem 0rem 1rem;
      min-height: 2.75rem;
      font-size: var(--typography-body-m);
      cursor: pointer;
      display: flex;
      width: 100%;
      justify-content: space-between;
      align-items: center;
      user-select: none;
      gap: 0.5rem;
      transition: background-color 250ms var(--easing);

      > span {
        flex-shrink: 0;

        &:first-of-type {
          color: var(--primary-800, #45051c);
          font-weight: 700;
          line-height: 1.7;
          font-size: var(--typography-body-m, 0.875rem);
        }
      }

      .selected-value {
        margin-right: auto;
        font-size: var(--typography-body-s);
        padding: 0.1875rem 0.25rem;
        background-color: var(--neutral-200);
        border-radius: 0.25rem;
        border: 1px solid var(--neutral-500);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--primary-800);
        position: relative;
        overflow: hidden;
        white-space: nowrap;
        max-width: 12.5rem;
        cursor: pointer;
        transition:
          opacity 300ms var(--easing),
          transform 300ms var(--easing);

        span {
          overflow: hidden;
          text-overflow: ellipsis;
        }

        .clear-icon {
          position: absolute;
          inset: 0;
          background-color: var(--neutral-200);
          display: grid;
          place-items: center;
          opacity: 0;
          transition: opacity 150ms;
        }

        svg {
          transform: scale(0.6) rotate(180deg);
          transition: transform 250ms var(--easing);
        }

        &:hover {
          .clear-icon {
            opacity: 1;

            svg {
              transform: scale(1) rotate(0deg);
            }
          }
        }
      }

      .icon {
        position: relative;
        overflow: hidden;
        flex-shrink: 0;
        width: 2.75rem;
        display: grid;
        place-items: center;

        svg {
          transition: transform 300ms var(--easing);
          &:nth-of-type(1) {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: rotate(180deg) translate(50%, 150%);
          }

          &:nth-of-type(2) {
            transition: transform 250ms cubic-bezier(0.18, 0.89, 0.32, 1.2);
          }
        }
      }
    }

    .filter-content {
      transition: height 200ms var(--easing);
      overflow: hidden;
    }

    .wrapper {
      padding: 0.25rem 1rem 1rem;
    }

    .range-container {
      position: relative;
      height: 2.75rem;
      display: flex;
      align-items: center;
      margin-bottom: 0.75rem;

      .slider-track {
        position: absolute;
        width: 100%;
        height: 0.125rem;
        background: var(--neutral-300);
        border-radius: 0.125rem;
        z-index: 1;
      }

      .slider-range {
        position: absolute;
        height: 0.125rem;
        background: var(--primary-500);
        border-radius: 0.125rem;
        z-index: 2;
      }

      input[type='range'] {
        position: absolute;
        width: 100%;
        pointer-events: none;
        appearance: none;
        height: 0.125rem;
        background: none;
        z-index: 3;

        &::-webkit-slider-thumb {
          pointer-events: auto;
          appearance: none;
          width: 1rem;
          height: 1rem;
          background-color: var(--primary-500);
          border-radius: 50%;
          cursor: pointer;
          transition:
            background-color 150ms,
            transform 200ms var(--easing);

          &:hover {
            transform: scale(1.1);
            background-color: var(--primary-700);
          }
        }

        &::-moz-range-thumb {
          pointer-events: auto;
          appearance: none;
          width: 1rem;
          height: 1rem;
          background-color: var(--primary-500);
          border-radius: 50%;
          cursor: pointer;
          transition:
            background-color 150ms,
            transform 200ms var(--easing);

          &:hover {
            transform: scale(1.1);
            background-color: var(--primary-700);
          }
        }
      }
    }

    .inputs-container {
      display: flex;
      gap: 0.375rem;
      justify-content: space-between;
      align-items: center;

      .separator {
        align-self: flex-end;
        margin-bottom: 0.55rem;
      }

      .input-group {
        flex: 1;

        label {
          line-height: 1.6;
          letter-spacing: -0.01em;
          margin-bottom: 0;
          display: block;
          cursor: pointer;

          > span {
            display: block;
            margin-bottom: 0.125rem;
            font-size: var(--typography-body-s);
            color: var(--primary-800, #45051c);
          }
        }

        .input-wrapper {
          position: relative;
          display: grid;
          grid-template-columns: 1fr auto;
          align-items: center;
          background-color: var(--neutral-100);
          border: 1px solid var(--neutral-500);
          border-radius: 0.25rem;
          min-height: 2.5rem;

          input {
            width: 100%;
            padding: 0 0.625rem;
            color: var(--primary-800);
            background: none;
            border: none;

            &:focus {
              outline: none;
            }

            &::-webkit-outer-spin-button,
            &::-webkit-inner-spin-button {
              position: relative;
              transform: translateX(2rem);
            }
          }

          .currency {
            pointer-events: none;
            color: var(--primary-400);
            letter-spacing: -0.01em;
            width: 2.5rem;
            height: 2.25rem;
            display: grid;
            place-content: center;
            border-left: 1px solid var(--neutral-500);
            user-select: none;
          }
        }
      }
    }

    .error-message {
      color: var(--error-500);
      text-align: center;
      font-size: var(--typography-body-s);
      min-height: 1.5rem;
      display: none;
      margin-top: 0.5rem;

      &:not(:empty) {
        display: block;
      }
    }

    &[data-expanded='true'] {
      summary {
        .icon {
          svg {
            &:nth-of-type(1) {
              transform: rotate(180deg) translate(50%, 50%);
            }
            &:nth-of-type(2) {
              transform: translateY(100%);
            }
          }
        }

        .selected-value {
          opacity: 0;
          transform: translateY(0.5rem);
          pointer-events: none;
        }
      }
    }

    &[data-description='true'] {
      .description {
        font-size: var(--typography-body-s);
        color: var(--primary-400);
        line-height: 1.5;
        letter-spacing: -0.01em;
        margin-bottom: 0.5rem;
      }

      summary {
        display: grid;
        grid-template-columns: auto auto 1fr;
        align-items: center;
        gap: 0.25rem;
        padding-top: 0.5rem;
        > span:first-of-type {
          grid-column: 1 / 2;
          grid-row: 1 / 2;
        }

        .selected-value {
          grid-column: 2 / 3;
          grid-row: 1 / 2;
          margin-left: -1rem;
        }

        .description {
          grid-column: 1 / 3;
          grid-row: 2 / 3;
        }

        .icon {
          grid-column: 3 / 4;
          align-self: start;
        }
      }
    }
  }
</style>

<script>
  document.querySelectorAll<HTMLDetailsElement>('.price-filter-group.price-range-filter').forEach((details) => {
    const summary = details.querySelector<HTMLElement>('summary')!
    const content = details.querySelector<HTMLDivElement>('.filter-content')!
    const clearButton = details.querySelector<HTMLButtonElement>('.selected-value')!
    const selectedValueSpan = clearButton.querySelector('span')!
    const minRange = details.querySelector<HTMLInputElement>('.min-range')!
    const maxRange = details.querySelector<HTMLInputElement>('.max-range')!
    const minInput = details.querySelector<HTMLInputElement>('.min-price')!
    const maxInput = details.querySelector<HTMLInputElement>('.max-price')!
    const sliderRange = details.querySelector<HTMLDivElement>('.slider-range')!
    const errorMessage = details.querySelector<HTMLDivElement>('.error-message')!

    const isDisabled = details.dataset.disabled === 'true'
    const minPrice = parseInt(details.dataset.min || '0')
    const maxPrice = parseInt(details.dataset.max || '0')

    let isAnimating = false

    function updateSliderRange() {
      const minVal = parseInt(minRange.value)
      const maxVal = parseInt(maxRange.value)
      const minPercent = ((minVal - minPrice) / (maxPrice - minPrice)) * 100
      const maxPercent = ((maxVal - minPrice) / (maxPrice - minPrice)) * 100

      sliderRange.style.left = minPercent + '%'
      sliderRange.style.width = maxPercent - minPercent + '%'
    }

    function validateAndUpdateInputs(minVal: number, maxVal: number): boolean {
      // If disabled, only allow clearing
      if (isDisabled) {
        return false
      }

      // Clear previous error
      errorMessage.textContent = ''

      // Check if values are valid numbers
      if (isNaN(minVal) || isNaN(maxVal)) {
        errorMessage.textContent = details.dataset.errorInvalid || ''
        return false
      }

      // Check if min is greater than max
      if (minVal > maxVal) {
        errorMessage.textContent = details.dataset.errorRange || ''
        return false
      }

      // Check if values are within bounds
      if (minVal < minPrice || maxVal > maxPrice) {
        errorMessage.textContent = details.dataset.errorBounds || ''
        return false
      }

      // Update all inputs
      minRange.value = minVal.toString()
      maxRange.value = maxVal.toString()
      minInput.value = minVal.toString()
      maxInput.value = maxVal.toString()

      // Update slider range visual
      updateSliderRange()

      // Update selected value display
      const currency = details.querySelector<HTMLSpanElement>('.currency')?.textContent || ''
      selectedValueSpan.textContent = `${minVal} - ${maxVal} ${currency}`

      // Show/hide clear button based on whether values differ from defaults
      const hasCustomValues = minVal !== minPrice || maxVal !== maxPrice
      clearButton.style.display = hasCustomValues ? 'flex' : 'none'
      details.setAttribute('data-has-selection', hasCustomValues.toString())

      // Dispatch custom event
      if (!errorMessage.textContent) {
        window.dispatchEvent(
          new CustomEvent('filterChange', {
            detail: {
              paramName: 'price',
              minValue: minVal,
              maxValue: maxVal,
            },
          })
        )
      }

      return true
    }

    // Ensure details is closed when disabled
    if (isDisabled) {
      details.open = false
    }

    // Initialize slider range
    updateSliderRange()

    // Initialize expanded state to match open state
    details.setAttribute('data-expanded', (!isDisabled && details.open).toString())

    // Clear button handler - should work even when disabled
    clearButton.addEventListener('click', (event) => {
      event.stopPropagation()

      // Add exit animation
      clearButton.style.opacity = '0'
      clearButton.style.transform = 'translateX(-0.5rem)'
      clearButton.style.pointerEvents = 'none'

      setTimeout(() => {
        // Reset to default values
        minRange.value = minPrice.toString()
        maxRange.value = maxPrice.toString()
        minInput.value = minPrice.toString()
        maxInput.value = maxPrice.toString()
        updateSliderRange()

        // Update selected value display
        clearButton.style.display = 'none'
        details.setAttribute('data-has-selection', 'false')

        // Dispatch clear event
        window.dispatchEvent(
          new CustomEvent('filterClear', {
            detail: { paramName: 'price' },
          })
        )
      }, 150)
    })

    if (!isDisabled) {
      // Range input handlers
      minRange.addEventListener('input', () => {
        const minVal = parseInt(minRange.value)
        const maxVal = parseInt(maxRange.value)
        if (minVal > maxVal) {
          minRange.value = maxVal.toString()
          return
        }
        validateAndUpdateInputs(minVal, maxVal)
      })

      maxRange.addEventListener('input', () => {
        const minVal = parseInt(minRange.value)
        const maxVal = parseInt(maxRange.value)
        if (maxVal < minVal) {
          maxRange.value = minVal.toString()
          return
        }
        validateAndUpdateInputs(minVal, maxVal)
      })

      // Number input handlers
      minInput.addEventListener('change', () => {
        validateAndUpdateInputs(parseInt(minInput.value), parseInt(maxInput.value))
      })

      maxInput.addEventListener('change', () => {
        validateAndUpdateInputs(parseInt(minInput.value), parseInt(maxInput.value))
      })

      // Animation logic for the dropdown
      summary.addEventListener('click', (event) => {
        // Always prevent default behavior
        event.preventDefault()

        // If disabled, prevent any interaction with the summary except for the clear button
        if (isDisabled) {
          event.stopPropagation()
          // Force close the details if somehow it got opened
          details.open = false
          return
        }

        if (isAnimating) return

        isAnimating = true
        const willBeOpen = !details.open
        details.setAttribute('data-expanded', willBeOpen.toString())

        if (details.open) {
          content.style.height = content.scrollHeight + 'px'
          requestAnimationFrame(() => {
            content.style.height = '0'
          })

          if (clearButton) {
            clearButton.style.opacity = '1'
            clearButton.style.transform = 'translateY(0)'
            clearButton.style.pointerEvents = 'auto'
          }

          content.addEventListener(
            'transitionend',
            () => {
              details.open = false
              content.style.height = ''
              isAnimating = false
            },
            { once: true }
          )
        } else {
          details.open = true
          const startHeight = content.scrollHeight
          content.style.height = '0'
          requestAnimationFrame(() => {
            content.style.height = startHeight + 'px'
          })

          if (clearButton) {
            clearButton.style.opacity = '0'
            clearButton.style.transform = 'translateY(0.5rem)'
            clearButton.style.pointerEvents = 'none'
          }

          content.addEventListener(
            'transitionend',
            () => {
              content.style.height = ''
              isAnimating = false
            },
            { once: true }
          )
        }
      })
    }
  })
</script>
