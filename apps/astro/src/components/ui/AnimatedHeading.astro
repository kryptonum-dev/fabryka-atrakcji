---
import type { PortableTextValue } from './portable-text'

type Props = {
  heading: PortableTextValue
  level: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'
  class?: string
  initialDelay?: number
  iterationDelay?: number
  fired?: boolean
  initialFired?: boolean
}

const {
  heading,
  level,
  class: className,
  initialDelay = 0,
  iterationDelay = 35,
  fired = false,
  initialFired = false,
} = Astro.props

// This function split the PortableText Heading into an array of {text: string, marks: string[]}.

const splitHeading = (heading: any) => {
  const newBlock = heading.map((block: any) => {
    return block.children.map((child: any) => {
      return { text: child.text, marks: child.marks }
    })
  })

  return newBlock
    .flat()
    .flatMap((block: any) => {
      const words = block.text.split(' ')
      return words.map((word: any) => ({
        text: word,
        marks: block.marks.includes('strong') ? ['strong'] : [],
      }))
    })
    .filter((item: any) => item.text !== '')
}

const Heading = level

const delay = (index: number) => {
  return index * iterationDelay + initialDelay
}
---

<Heading data-fired={fired} class={`animated-heading ${className}`} data-initial-fired={initialFired}>
  {
    splitHeading(heading).map((item: any, i: number) => (
      <>
        {i === 0 ? '' : ' '}
        {item.marks.includes('strong') ? (
          <strong style={`${initialFired ? 'animation' : 'transition'}-delay: ${delay(i)}ms`}>{item.text}</strong>
        ) : (
          <span style={`${initialFired ? 'animation' : 'transition'}-delay: ${delay(i)}ms`}>{item.text}</span>
        )}
      </>
    ))
  }
</Heading>

<style lang="scss">
  .animated-heading {
    span,
    strong {
      opacity: 0;
      transform: translateY(4.5rem);
      display: inline-block;
      transition:
        opacity 200ms,
        transform 700ms cubic-bezier(0.18, 0.89, 0.32, 1.2);
    }

    &[data-fired='true'] {
      span,
      strong {
        opacity: 1;
        transform: translateY(0);
      }
    }

    &[data-initial-fired='false'] {
      will-change: opacity, transform;
    }
    &[data-initial-fired='true'] {
      span,
      strong {
        animation: AniamteHeadingFadeIn 500ms cubic-bezier(0.18, 0.89, 0.32, 1.2) forwards;
      }

      @keyframes AniamteHeadingFadeIn {
        0% {
          opacity: 0;
          transform: translateY(3.5rem);
        }

        40% {
          opacity: 1;
        }

        100% {
          opacity: 1;
          transform: translateY(0);
        }
      }
    }
  }
</style>
