---
interface Props {
  lang: 'pl' | 'en'
}

const { lang } = Astro.props

const dayNames = {
  pl: ['P', 'W', 'Ś', 'CZ', 'P', 'S', 'N'],
  en: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],
} as const

const monthNames = {
  pl: [
    'Styczeń',
    'Luty',
    'Marzec',
    'Kwiecień',
    'Maj',
    'Czerwiec',
    'Lipiec',
    'Sierpień',
    'Wrzesień',
    'Październik',
    'Listopad',
    'Grudzień',
  ],
  en: [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
  ],
} as const

const monthShortcuts = {
  pl: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'paź', 'lis', 'gru'],
  en: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
} as const

const translations = {
  pl: {
    cancel: 'Anuluj',
    confirm: 'Zatwierdź',
    addFirstDate: 'Dodaj pierwszy termin',
    addSecondDate: 'Dodaj drugi termin',
    addAnotherDate: 'Dodaj następny termin',
    from: 'Od',
    to: 'Do',
    edit: 'Edytuj',
    delete: 'Usuń',
    term: 'Termin',
    whichDate: 'Kiedy planujecie pobyt i/lub event?',
    dateAdded: 'Termin został dodany',
    dateEdited: 'Termin został zaktualizowany',
    dateDeleted: 'Termin został usunięty',
  },
  en: {
    cancel: 'Cancel',
    confirm: 'Confirm',
    addFirstDate: 'Add first date',
    addSecondDate: 'Add second date',
    addAnotherDate: 'Add another date',
    from: 'From',
    to: 'To',
    edit: 'Edit',
    delete: 'Delete',
    term: 'Term',
    whichDate: 'When are you planning your stay and/or event?',
    dateAdded: 'Date has been added',
    dateEdited: 'Date has been updated',
    dateDeleted: 'Date has been deleted',
  },
} as const

const t = translations[lang]
const days = dayNames[lang]
---

<div class="input-field date">
  <label for="date">
    <span class="label">{t.whichDate}</span>
  </label>
  <div class="input-box">
    <div
      class="date-picker-container"
      data-translations={JSON.stringify(t)}
      data-month-names={JSON.stringify(monthNames[lang])}
      data-month-shortcuts={JSON.stringify(monthShortcuts[lang])}
    >
      <button type="button" class="date-picker-button" aria-haspopup="dialog">
        <span class="date-placeholder">{t.addFirstDate}</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none"
          ><path
            fill="#F67258"
            d="M14.67 9.583V8.25c0-.56 0-1.056-.01-1.5H1.346c-.01.444-.01.94-.01 1.5v1.333c0 2.515 0 3.772.782 4.553.781.78 2.038.78 4.552.78h2.667c2.514 0 3.771 0 4.552-.78.781-.781.781-2.038.781-4.553ZM5.17 1.917a.5.5 0 0 0-1 0V2.97c-.96.076-1.59.265-2.053.728-.463.463-.651 1.093-.728 2.052h13.227c-.076-.96-.265-1.59-.728-2.052-.463-.463-1.092-.652-2.052-.728V1.917a.5.5 0 1 0-1 0v1.008c-.444-.008-.94-.008-1.5-.008H6.669c-.56 0-1.056 0-1.5.008V1.917Z"
          ></path></svg
        >
        <div class="gradient"></div>
      </button>

      <ul class="dates-list"></ul>

      <template id="date-item-template">
        <li class="date-item">
          <div class="date-content">
            <span class="term-number"></span>
            <span class="date-text"></span>
          </div>
          <div class="date-actions">
            <button type="button" class="edit-button"><span>{t.edit}</span></button>
            <button type="button" class="delete-button"
              ><span>{t.delete}</span><svg xmlns="http://www.w3.org/2000/svg" width="12" height="13" fill="none"
                ><circle cx="6" cy="6.5" r="5" stroke="currentColor" stroke-width=".75"></circle><path
                  stroke="#74535E"
                  stroke-linecap="round"
                  stroke-width=".75"
                  d="m7.25 5.25-2.5 2.5m0-2.5 2.5 2.5"></path></svg
              ></button
            >
          </div>
        </li>
      </template>

      <div class="date-picker-popup" role="dialog" aria-modal="true" aria-label="Date Picker">
        <div class="navigation-wrapper">
          <button type="button" class="nav-button prev" aria-label="Previous month">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none"
              ><path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="1.5"
                d="M12.503 14.167 8.336 10l4.167-4.167"></path></svg
            >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none"
              ><path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="1.5"
                d="M12.503 14.167 8.336 10l4.167-4.167"></path></svg
            >
          </button>
          <button type="button" class="nav-button next" aria-label="Next month">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none"
              ><path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="1.5"
                d="M8.333 5.833 12.5 10l-4.167 4.167"></path></svg
            >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none"
              ><path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="1.5"
                d="M8.333 5.833 12.5 10l-4.167 4.167"></path></svg
            >
          </button>
        </div>

        <div class="calendars-wrapper">
          <div class="calendar" data-month="current">
            <span class="month-name current"></span>
            <div class="weekdays">
              {days.map((day) => <div class="weekday">{day}</div>)}
            </div>
            <div class="days"></div>
          </div>

          <div class="calendar" data-month="next">
            <span class="month-name next"></span>
            <div class="weekdays">
              {days.map((day) => <div class="weekday">{day}</div>)}
            </div>
            <div class="days"></div>
          </div>
        </div>

        <div class="actions">
          <button type="button" class="cancel-button">{t.cancel}</button>
          <button type="button" class="confirm-button">{t.confirm}</button>
        </div>
      </div>
    </div>
  </div>
</div>

<style lang="scss">
  .input-field {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
    flex: 1;
    max-width: 24.5rem;

    .label {
      font-size: var(--typography-body-s, 0.75rem);
      line-height: 1.6;
      letter-spacing: -0.01em;
      color: var(--primary-800, #45051c);
    }

    .input-box {
      position: relative;
      width: 100%;
    }

    @media (max-width: 519px) {
      max-width: 100%;
    }
  }

  .date-picker-container {
    position: relative;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .date-picker-button {
    position: relative;
    isolation: isolate;
    background-color: var(--neutral-100, #faf7f7);
    border-radius: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    min-height: 2.75rem;
    width: 100%;
    color: var(--primary-800, #45051c);
    font-size: var(--typography-body-m, 0.875rem);
    line-height: 1.7;
    letter-spacing: -0.01em;
    padding: 0 0.625rem;

    &::before,
    &::after {
      position: absolute;
      z-index: -3;
      inset: 0;
      content: '';
      background-color: var(--neutral-500, #d2c1b0);
      border-radius: 0.25rem;
      transition: background-color 275ms;
    }

    &::after {
      z-index: -1;
      inset: 0.125rem;
      background: linear-gradient(var(--neutral-100, #faf7f7), var(--neutral-100, #faf7f7)) padding-box;
      border-radius: 0.125rem;
    }

    .gradient {
      position: absolute;
      z-index: -2;
      inset: 0;
      overflow: hidden;
      border-radius: 0.25rem;

      &::before {
        position: absolute;
        inset: -0.0625rem;
        content: '';
        background: conic-gradient(
          from 135deg at 50% 50%,
          #798ddc 0deg,
          #e7c78f 90deg,
          #fa7468 266.40000343322754deg,
          #798ddc 360deg
        );
        opacity: 0;
        transform: scaleX(0);
        transition:
          opacity 125ms,
          transform 475ms var(--easing);
      }
    }

    &:hover::before {
      background-color: var(--primary-400, #74535e);
    }

    &:focus {
      .gradient {
        &::before {
          opacity: 1;
          transform: scaleX(1);
        }
      }
    }
  }

  .dates-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
    max-height: 9rem;
    overflow-y: auto;
    margin-right: -0.75rem;
    width: calc(100% + 0.5rem);

    scroll-behavior: smooth;
    padding-right: 0.5rem;
    @media (hover: hover) and (pointer: fine) {
      &::-webkit-scrollbar {
        width: 0.25rem;
      }

      &::-webkit-scrollbar-track {
        background: var(--neutral-300, #ede6de);
        border-radius: 16px;
      }

      &::-webkit-scrollbar-thumb {
        background: var(--primary-400, #74535e);
        border-radius: 16px;
      }

      &::-webkit-scrollbar-thumb:hover {
        background: var(--primary-700, #600d2a);
      }
    }

    .date-item {
      background-color: var(--neutral-100, #f5f1ec);
      border-radius: 0.25rem;
      border: 2px solid var(--neutral-500, #d2c1b0);
      display: flex;
      justify-content: space-between;
      padding: 0.25rem 0 0.25rem 0.625rem;
      gap: 1rem;

      .date-content {
        font-size: var(--typography-body-m, 0.875rem);
        display: flex;
        flex-direction: column;
        font-size: var(--typography-body-m, 0.875rem);
        line-height: 1.7;
        letter-spacing: -0.01em;

        .date-text {
          color: var(--primary-800, #45051c);
        }
      }

      .date-actions {
        display: flex;

        button {
          min-height: 2.75rem;
          padding: 0.4375rem 0.625rem;
          font-size: var(--typography-body-m, 0.875rem);
          line-height: 1.4;
          letter-spacing: -0.01em;
          cursor: pointer;
          position: relative;
          isolation: isolate;
          transition: color 150ms;

          &::before {
            content: '';
            position: absolute;
            inset: 0;
            background-color: var(--neutral-200, #ede6de);
            transform: scaleX(0);
            z-index: -1;
            transition: transform 300ms var(--easing);
            border-radius: 0.25rem;
          }

          &.edit-button {
            &::before {
              transform-origin: right;
            }
          }

          &.delete-button {
            border-left: 1px solid var(--neutral-300, #ede6de);
            display: flex;
            gap: 0.25rem;
            align-items: center;

            &::before {
              transform-origin: left;
            }
          }

          &:hover {
            &::before {
              transform: scaleX(1);
            }
          }

          &:focus:not(:focus-visible) {
            color: var(--primary-800, #45051c);
          }
        }
      }
    }
    @media (max-width: 519px) {
      width: 100%;
      padding-right: 0;
    }
  }

  .date-picker-popup {
    position: absolute;
    top: 100%;
    left: 0;
    background: var(--neutral-100, #faf7f7);
    border-radius: 0.75rem;
    width: 100%;
    display: none;
    width: fit-content;
    flex-direction: column;
    display: none;
    z-index: 100;
    box-shadow: 0px 4px 24px -8px rgba(0, 0, 0, 0.15);
    padding: 0 0.75rem;

    &.active {
      display: flex;
      animation: DatePickerFadeIn 250ms var(--easing);

      @keyframes DatePickerFadeIn {
        from {
          opacity: 0;
          transform: translateY(-0.25rem);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    }
    .navigation-wrapper {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0.625rem 0.75rem;
      gap: 1.5rem;
      position: absolute;
      width: 100%;
      top: 0;
      left: 0;

      .nav-button {
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: var(--primary-800, #45051c);
        width: 2.75rem;
        height: 2.75rem;
        overflow: hidden;
        isolation: isolate;
        position: relative;

        &::before {
          content: '';
          position: absolute;
          inset: 0;
          border-radius: 50%;
          background-color: var(--neutral-200, #600d2a);
          transform: scale(0);
          z-index: -1;
          transform-origin: center;
          transition: transform 250ms var(--easing);
        }

        :global(svg) {
          transition: transform 250ms var(--easing);
          &:last-child {
            position: absolute;
            top: 50%;
            left: 50%;
          }
        }

        &:hover {
          :global(svg) {
            &:last-child {
              transition: transform 300ms cubic-bezier(0.18, 0.89, 0.32, 1.15);
              transform: translate(-50%, -50%);
            }
          }
        }

        &:nth-of-type(1) {
          :global(svg) {
            &:last-child {
              transform: translate(100%, -50%) rotate(45deg);
            }
          }

          &:hover {
            :global(svg) {
              &:first-child {
                transform: translateX(-150%) rotate(-45deg);
              }

              &:last-child {
                transition: transform 300ms cubic-bezier(0.18, 0.89, 0.32, 1.15);
                transform: translate(-50%, -50%);
              }
            }
          }
        }

        &:nth-of-type(2) {
          :global(svg) {
            &:last-child {
              transform: translate(-200%, -50%) rotate(-45deg);
            }
          }

          &:hover {
            :global(svg) {
              &:first-child {
                transform: translateX(150%) rotate(45deg);
              }
              &:last-child {
                transition: transform 300ms cubic-bezier(0.18, 0.89, 0.32, 1.15);
                transform: translate(-50%, -50%);
              }
            }
          }
        }

        &:focus {
          &::before {
            transform: scale(1);
          }
        }

        &:focus-visible {
          border-radius: 50%;
          outline-offset: -3px;
        }

        &:disabled {
          opacity: 0.5;
          pointer-events: none;

          &:hover {
            :global(svg) {
              &:first-child,
              &:last-child {
                transform: none;
              }
            }
          }
        }
      }
    }

    .calendars-wrapper {
      display: flex;
      gap: 1.5rem;
      justify-content: center;
    }

    .calendar {
      padding: 0.625rem 0.75rem 0.25rem;
      display: flex;
      flex-direction: column;
      align-items: stretch;

      .month-name {
        font-size: var(--typography-body-m, 0.875rem);
        text-align: center;
        align-self: center;
        margin-bottom: 0.625rem;
        display: flex;
        align-items: center;
        min-height: 2.75rem;
        line-height: 1.7;
        letter-spacing: -0.01em;
      }

      .weekdays {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        margin-bottom: 0.25rem;

        .weekday {
          display: grid;
          place-items: center;
          color: var(--primary-400, #74535e);
          font-size: var(--typography-body-m, 0.875rem);
          width: 2.75rem;
          line-height: 1.7;
          letter-spacing: -0.01em;
          height: 2.75rem;
        }
      }

      .days {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        row-gap: 0.25rem;

        :global(button) {
          width: 2.75rem;
          height: 2.75rem;
          color: var(--primary-800, #45051c);
          display: grid;
          place-items: center;
          font-size: var(--typography-body-m, 0.875rem);
          line-height: 1.7;
          letter-spacing: -0.01em;
          position: relative;
          overflow: hidden;
          isolation: isolate;
          transition:
            color 150ms,
            background-color 200ms;

          &[data-current-day] {
            font-weight: 700;
          }

          &:disabled {
            color: var(--neutral-500, #d2c1b0);
            pointer-events: none;

            &::after {
              display: none;
            }
          }

          &::before {
            position: absolute;
            inset: 0;
            content: '';
            background-color: var(--neutral-300, #ede6de);
            transform: scaleX(0);
            z-index: -1;
            opacity: 0;
            transition: opacity 150ms;
          }

          &::after {
            position: absolute;
            inset: 0;
            content: '';
            background-color: var(--neutral-300, #faf7f7);
            transform: scale(0);
            z-index: -1;
            border-radius: 50%;
            transition:
              transform 250ms var(--easing),
              background-color 200ms;
          }

          &:hover {
            &::after {
              transform: scale(1);
            }
          }

          &:focus {
            &::after {
              background-color: var(--primary-700, #600d2a);
            }
          }

          &:focus:hover {
            color: var(--neutral-100, #faf7f7);
          }

          &:focus-visible {
            outline-offset: 0px;
            border-radius: 50%;
            z-index: 4;
          }

          &[data-selected='true'] {
            color: var(--neutral-100, #faf7f7);
            &::after {
              background-color: var(--primary-700, #600d2a);
              transform: scale(1);
            }
          }

          &[data-in-range='true'] {
            background-color: var(--neutral-300, #ede6de);

            &:focus-visible {
              border-radius: 0%;
            }
          }

          &[data-range-start='true'] {
            &::before {
              opacity: 1;
              transform: scaleX(0.5);
              transform-origin: right;
            }

            &:focus-visible {
              border-radius: 0%;
            }
          }

          &[data-range-end='true'] {
            &::before {
              opacity: 1;
              transform: scaleX(0.5);
              transform-origin: left;
            }

            &:focus-visible {
              border-radius: 0%;
            }
          }
        }
      }
    }

    .actions {
      display: flex;
      justify-content: space-between;
      gap: 1rem;
      padding: 0.375rem 0.75rem;

      button {
        min-height: 2.75rem;
        padding: 0 0.75rem;
        border-radius: 0.25rem;
        font-size: var(--typography-body-m, 0.875rem);
        cursor: pointer;
        line-height: 1.7;
        letter-spacing: -0.01em;
        position: relative;
        overflow: hidden;

        &.cancel-button {
          &::before {
            content: '';
            height: 1.3px;
            width: calc(100% - 1.5rem);
            background-color: currentColor;
            position: absolute;
            bottom: 0.625rem;
            left: 0.625rem;
            transform: scaleX(0);
            transform-origin: left;
            transition: transform 250ms var(--easing);
          }

          &::after {
            width: 100%;
            aspect-ratio: 1/1;
            position: absolute;
            content: '';
            background-color: var(--neutral-200, #ede6de);
            transform: translate(-50%, -50%) scale(0);
            transform-origin: center;
            z-index: -2;
            left: 50%;
            top: 50%;
            border-radius: 50%;
            transition: transform 350ms var(--easing);
          }

          &:hover {
            &::before {
              transition: transform 300ms cubic-bezier(0.18, 0.89, 0.32, 1.27);

              transform: scaleX(1);
            }
          }

          &:focus:not(:focus-visible) {
            &::after {
              transform: translate(-50%, -50%) scale(1.3);
            }
          }
        }

        &.confirm-button {
          letter-spacing: -0.02em;
          font-weight: 700;
          color: var(--primary-800, #45051c);
          transition: color 200ms;

          &::before {
            width: 100%;
            aspect-ratio: 1/1;
            position: absolute;
            content: '';
            background-color: var(--neutral-200, #ede6de);
            transform: translate(-50%, -50%) scale(0);
            transform-origin: center;
            z-index: -2;
            left: 50%;
            top: 50%;
            border-radius: 50%;
            transition: transform 350ms var(--easing);
          }

          &::after {
            content: '';
            position: absolute;
            inset: 0;
            background-color: var(--primary-700, #600d2a);
            transform: scaleY(0);
            transform-origin: bottom;
            z-index: -1;
            transition: transform 350ms var(--easing);
          }

          &:hover {
            &::before {
              transform: translate(-50%, -50%) scale(1.3);
            }
          }

          &:focus:not(:focus-visible) {
            color: var(--neutral-100, #faf7f7);

            &::before {
              transform: translate(-50%, -50%) scale(1.3);
            }

            &::after {
              transform: scaleY(1);
            }
          }
        }
      }
    }

    @media (max-width: 969px) {
      left: unset;
      right: -20vw;
    }

    @media (max-width: 749px) {
      right: 0;
      width: fit-content;
      bottom: unset;
      top: 2.75rem;

      .calendars-wrapper {
        gap: 0;

        .calendar[data-month='next'] {
          display: none;
        }
      }

      .navigation-wrapper {
        padding: 0.625rem 0.5rem;

        .nav-button {
          &:nth-of-type(2) {
            position: relative;

            &[data-single-month-nav='true'] {
              &::after {
                content: '';
                position: absolute;
                bottom: -4px;
                left: 50%;
                transform: translateX(-50%);
                width: 8px;
                height: 2px;
                background-color: currentColor;
                border-radius: 2px;
              }
            }
          }

          &:disabled {
            :global(svg):last-child {
              display: none;
            }
          }
        }
      }
    }

    @media (max-width: 369px) {
      right: 0rem;

      .calendars-wrapper {
        .calendar {
          .weekdays {
            .weekday {
              width: 2.5rem;
              height: 2.5rem;
            }
          }
          .days :global(button) {
            width: 2.5rem;
            height: 2.5rem;
          }
        }
      }
    }

    @media (max-width: 345px) {
      .calendars-wrapper {
        .calendar {
          .weekdays {
            .weekday {
              width: 2.25rem;
              height: 2.25rem;
            }
          }
          .days :global(button) {
            width: 2.25rem;
            height: 2.25rem;
          }
        }
      }
    }
  }
</style>

<script>
  import { showToast } from '@/utils/toast'

  interface DateRange {
    start: string
    end: string | null
  }

  interface TempRange {
    start: Date | null
    end: Date | null
  }

  // State management
  let dates: DateRange[] = []
  let tempRange: TempRange = { start: null, end: null }
  let editingDateIndex = -1
  let currentMonth = new Date()

  // DOM Elements
  const container = document.querySelector('.date-picker-container')
  const button = container?.querySelector('.date-picker-button')
  const popup = container?.querySelector('.date-picker-popup')
  const datesList = container?.querySelector('.dates-list')
  const cancelButton = popup?.querySelector('.cancel-button')
  const confirmButton = popup?.querySelector('.confirm-button')
  const prevButton = popup?.querySelector('.nav-button.prev')
  const nextButton = popup?.querySelector('.nav-button.next')
  const fromInput = popup?.querySelector('#date-from') as HTMLInputElement
  const toInput = popup?.querySelector('#date-to') as HTMLInputElement

  // Language and translations
  const lang = (document.querySelector('.Cart')?.getAttribute('data-lang') as 'pl' | 'en') || 'pl'
  const translations = JSON.parse(container?.getAttribute('data-translations') || '{}')
  const monthNames = JSON.parse(container?.getAttribute('data-month-names') || '[]')
  const monthShortcuts = JSON.parse(container?.getAttribute('data-month-shortcuts') || '[]')

  // Helper functions
  function isSingleMonthView(): boolean {
    return window.innerWidth <= 749
  }

  function formatDate(date: Date | null): string {
    if (!date) return ''
    return `${lang === 'pl' ? 'czw.' : ''} ${date.getDate()} ${monthShortcuts[date.getMonth()]}`
  }

  function formatDateRange(start: string, end: string | null): string {
    const formatDateStr = (dateStr: string): string => {
      const date = new Date(dateStr)
      return `${date.getDate()} ${monthShortcuts[date.getMonth()]}`
    }

    const startDate = formatDateStr(start)
    const endDate = end ? formatDateStr(end) : null

    if (endDate) {
      return `${lang === 'pl' ? 'czw.' : ''} ${startDate} – ${lang === 'pl' ? 'pt.' : ''} ${endDate}`
    }

    return `${lang === 'pl' ? 'czw.' : ''} ${startDate}`
  }

  // UI Update functions
  function updateInputs() {
    if (!fromInput || !toInput) return

    fromInput.value = formatDate(tempRange.start)
    toInput.value = formatDate(tempRange.end)
  }

  function updateDatePlaceholder() {
    const placeholder = container?.querySelector('.date-placeholder')!

    placeholder.textContent =
      dates.length === 0
        ? translations.addFirstDate
        : dates.length === 1
          ? translations.addSecondDate
          : translations.addAnotherDate
  }

  // Calendar rendering functions
  function renderCalendars() {
    if (!popup) return

    const currentCalendar = popup.querySelector('.calendar[data-month="current"]')
    const nextCalendar = popup.querySelector('.calendar[data-month="next"]')
    const currentMonthName = popup.querySelector('.month-name.current')
    const nextMonthName = popup.querySelector('.month-name.next')
    const prevButton = popup.querySelector('.nav-button.prev')! as HTMLButtonElement
    const nextButton = popup.querySelector('.nav-button.next')! as HTMLButtonElement

    if (currentCalendar) {
      const nextMonth = new Date(currentMonth)
      nextMonth.setMonth(nextMonth.getMonth() + 1)

      // Check if currentMonth is the current month to disable prev button
      const today = new Date()
      const isCurrentMonthDisabled =
        currentMonth.getMonth() === today.getMonth() && currentMonth.getFullYear() === today.getFullYear()

      prevButton.disabled = isCurrentMonthDisabled

      // Add marker for single-month navigation
      const isSingleMonth = isSingleMonthView()
      nextButton.setAttribute('data-single-month-nav', isSingleMonth ? 'true' : 'false')

      if (currentMonthName) {
        currentMonthName.textContent = `${monthNames[currentMonth.getMonth()]} ${currentMonth.getFullYear()}`
      }

      if (nextMonthName) {
        nextMonthName.textContent = `${monthNames[nextMonth.getMonth()]} ${nextMonth.getFullYear()}`
      }

      renderCalendar(currentCalendar, currentMonth)

      if (nextCalendar) {
        renderCalendar(nextCalendar, nextMonth)
      }
    }
  }

  function renderCalendar(calendar: Element, date: Date) {
    const daysContainer = calendar.querySelector('.days') as HTMLElement

    if (!daysContainer) return

    daysContainer.innerHTML = ''

    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1)
    const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0)

    let firstDayOfWeek = firstDay.getDay()
    firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1

    // Add empty slots for days before start of month
    for (let i = 0; i < firstDayOfWeek; i++) {
      const emptySlot = document.createElement('div')
      emptySlot.classList.add('day', 'empty')
      daysContainer.appendChild(emptySlot)
    }

    // Current month days
    for (let i = 1; i <= lastDay.getDate(); i++) {
      const currentDate = new Date(date.getFullYear(), date.getMonth(), i)
      createDayElement(daysContainer as HTMLElement, currentDate)
    }

    // Add empty slots for days after end of month to complete the week
    const lastDayOfWeek = lastDay.getDay()
    const daysToAdd = lastDayOfWeek === 0 ? 0 : 7 - lastDayOfWeek

    for (let i = 1; i <= daysToAdd; i++) {
      const emptySlot = document.createElement('div')
      emptySlot.classList.add('day', 'empty')
      daysContainer.appendChild(emptySlot)
    }
  }

  function createDayElement(container: HTMLElement, date: Date): void {
    const today = new Date()
    date.setHours(0, 0, 0, 0)
    today.setHours(0, 0, 0, 0)

    const dayElement = document.createElement('button')
    dayElement.type = 'button'
    dayElement.classList.add('day')
    dayElement.textContent = date.getDate().toString()
    dayElement.dataset.date = date.toISOString()

    if (
      date.getDate() === today.getDate() &&
      date.getMonth() === today.getMonth() &&
      date.getFullYear() === today.getFullYear()
    ) {
      dayElement.dataset.currentDay = ''
    }

    const isPastDate = date.getTime() < today.getTime()

    if (isPastDate) {
      dayElement.disabled = true
    } else {
      dayElement.addEventListener('click', (e: Event) => {
        e.stopPropagation()
        selectDate(date)
      })
    }

    dayElement.setAttribute(
      'aria-label',
      date.toLocaleDateString(lang === 'pl' ? 'pl-PL' : 'en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      })
    )

    if (tempRange.start && tempRange.end) {
      const dateTime = date.getTime()
      const startTime = tempRange.start.getTime()
      const endTime = tempRange.end.getTime()

      if (dateTime === startTime) {
        dayElement.dataset.selected = 'true'
        dayElement.dataset.rangeStart = 'true'
      } else if (dateTime === endTime) {
        dayElement.dataset.selected = 'true'
        dayElement.dataset.rangeEnd = 'true'
      } else if (dateTime > startTime && dateTime < endTime) {
        dayElement.dataset.inRange = 'true'
      }
    } else if (tempRange.start && date.getTime() === tempRange.start.getTime()) {
      dayElement.dataset.selected = 'true'
    }

    container.appendChild(dayElement)
  }

  // Date selection and management
  function selectDate(date: Date) {
    const buttons = popup?.querySelectorAll<HTMLButtonElement>('button[data-date]')

    // Check if clicking on already selected date
    if (tempRange.start?.getTime() === date.getTime()) {
      // If we have an end date, keep it as the only selected date
      if (tempRange.end) {
        tempRange.start = tempRange.end
        tempRange.end = null
      } else {
        // If no end date, clear the selection
        tempRange.start = null
      }

      // Clear all styles and reapply if needed
      buttons?.forEach((button) => {
        delete button.dataset.inRange
        delete button.dataset.rangeStart
        delete button.dataset.rangeEnd
        delete button.dataset.selected

        if (tempRange.start?.toISOString() === button.dataset.date) {
          button.dataset.selected = 'true'
        }
      })

      updateInputs()
      return
    }

    if (tempRange.end?.getTime() === date.getTime()) {
      // Keep start date, remove end date
      tempRange.end = null

      // Clear all styles and reapply if needed
      buttons?.forEach((button) => {
        delete button.dataset.inRange
        delete button.dataset.rangeStart
        delete button.dataset.rangeEnd
        delete button.dataset.selected

        if (tempRange.start?.toISOString() === button.dataset.date) {
          button.dataset.selected = 'true'
        }
      })

      updateInputs()
      return
    }

    // Case 1: No dates selected
    if (!tempRange.start) {
      tempRange = { start: date, end: null }

      // Set new selection
      const selectedButton = popup?.querySelector<HTMLButtonElement>(`button[data-date="${date.toISOString()}"]`)
      if (selectedButton) {
        selectedButton.dataset.selected = 'true'
      }
    }
    // Case 2: First date selected, selecting second date
    else if (tempRange.start && !tempRange.end) {
      if (date < tempRange.start) {
        tempRange.end = tempRange.start
        tempRange.start = date
      } else {
        tempRange.end = date
      }

      // Update range visualization
      buttons?.forEach((button) => {
        const buttonDate = new Date(button.dataset.date!)
        const buttonTime = buttonDate.getTime()
        const startTime = tempRange.start!.getTime()
        const endTime = tempRange.end!.getTime()

        if (buttonTime === startTime) {
          button.dataset.selected = 'true'
          button.dataset.rangeStart = 'true'
        } else if (buttonTime === endTime) {
          button.dataset.selected = 'true'
          button.dataset.rangeEnd = 'true'
        } else if (buttonTime > startTime && buttonTime < endTime) {
          button.dataset.inRange = 'true'
        }
      })
    }
    // Case 3: Both dates selected, modifying the range
    else if (tempRange.start && tempRange.end) {
      const clickedTime = date.getTime()
      const startTime = tempRange.start.getTime()
      const endTime = tempRange.end.getTime()

      // If clicked closer to start, update start date
      if (Math.abs(clickedTime - startTime) <= Math.abs(clickedTime - endTime)) {
        tempRange.start = date
      } else {
        tempRange.end = date
      }

      // Ensure start is always before end
      if (tempRange.start > tempRange.end) {
        ;[tempRange.start, tempRange.end] = [tempRange.end, tempRange.start]
      }

      // Clear previous range styles
      buttons?.forEach((button) => {
        delete button.dataset.inRange
        delete button.dataset.rangeStart
        delete button.dataset.rangeEnd
        delete button.dataset.selected
      })

      // Update range visualization
      buttons?.forEach((button) => {
        const buttonDate = new Date(button.dataset.date!)
        const buttonTime = buttonDate.getTime()
        const newStartTime = tempRange.start!.getTime()
        const newEndTime = tempRange.end!.getTime()

        if (buttonTime === newStartTime) {
          button.dataset.selected = 'true'
          button.dataset.rangeStart = 'true'
        } else if (buttonTime === newEndTime) {
          button.dataset.selected = 'true'
          button.dataset.rangeEnd = 'true'
        } else if (buttonTime > newStartTime && buttonTime < newEndTime) {
          button.dataset.inRange = 'true'
        }
      })
    }

    updateInputs()
  }

  function highlightSelectedDates() {
    if (!popup) return

    const allDays = popup.querySelectorAll('.day[data-date]')
    allDays.forEach((day) => {
      const dateStr = day.getAttribute('data-date')
      if (!dateStr) return

      const date = new Date(dateStr)
      const isStart = tempRange.start ? isSameDay(date, tempRange.start) : false
      const isEnd = tempRange.end ? isSameDay(date, tempRange.end) : false
      const isInRange = isDateInRange(date, tempRange.start, tempRange.end)

      if (isStart || isEnd) {
        day.classList.add('selected')
      } else {
        day.classList.remove('selected')
      }

      if (isInRange) {
        day.classList.add('range')
      } else {
        day.classList.remove('range')
      }

      if (isStart) {
        day.classList.add('range-start')
      } else {
        day.classList.remove('range-start')
      }

      if (isEnd) {
        day.classList.add('range-end')
      } else {
        day.classList.remove('range-end')
      }
    })
  }

  function isSameDay(date1: Date, date2: Date): boolean {
    return (
      date1.getFullYear() === date2.getFullYear() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getDate() === date2.getDate()
    )
  }

  function isDateInRange(date: Date, start: Date | null, end: Date | null): boolean {
    if (!start || !end) return false
    return date >= start && date <= end
  }

  function createDateItem(dateRange: DateRange, index: number): HTMLElement | null {
    const template = document.querySelector('#date-item-template')
    if (!template) return null

    const dateItem = (template as HTMLTemplateElement).content.cloneNode(true) as DocumentFragment
    const li = dateItem.querySelector('li')
    const termNumber = dateItem.querySelector('.term-number')
    const dateText = dateItem.querySelector('.date-text')
    const editButton = dateItem.querySelector('.edit-button')
    const deleteButton = dateItem.querySelector('.delete-button')

    if (!li || !termNumber || !dateText || !editButton || !deleteButton) return null

    const termText = translations.term || (lang === 'pl' ? 'Termin' : 'Term')
    termNumber.textContent = `${termText} ${index + 1}`
    dateText.textContent = formatDateRange(dateRange.start, dateRange.end)

    editButton.addEventListener('click', (e: Event) => {
      e.stopPropagation()
      editDate(index)
    })

    deleteButton.addEventListener('click', (e: Event) => {
      e.stopPropagation()
      deleteDate(index)
    })

    return li
  }

  function renderDatesList(): void {
    if (!datesList) return
    datesList.innerHTML = ''

    dates.forEach((dateRange, index) => {
      const dateItem = createDateItem(dateRange, index)
      if (dateItem) {
        datesList.insertBefore(dateItem, datesList.firstChild)
      }
    })
  }

  // Event handlers
  function openPicker(): void {
    if (!popup) return

    popup.classList.add('active')
    tempRange = { start: null, end: null }

    // Always start with current month when opening
    currentMonth = new Date()

    updateInputs()
    renderCalendars()
  }

  function closePicker(): void {
    if (!popup) return
    popup.classList.remove('active')
    editingDateIndex = -1
  }

  function navigateMonth(delta: number): void {
    const newMonth = new Date(currentMonth)
    newMonth.setMonth(newMonth.getMonth() + delta)
    currentMonth = newMonth
    renderCalendars()

    // Special handling for date ranges that cross months in single-month view
    if (isSingleMonthView() && tempRange.start && tempRange.end) {
      const startMonth = tempRange.start.getMonth()
      const endMonth = tempRange.end.getMonth()

      // If the range crosses months and we're now showing a month that contains
      // one of the selected dates, make sure it's properly highlighted
      if (startMonth !== endMonth) {
        highlightSelectedDates()
      }
    }
  }

  function confirmDate(): void {
    if (!tempRange.start) return

    if (editingDateIndex >= 0) {
      if (tempRange.start && tempRange.end) {
        dates[editingDateIndex] = {
          start: tempRange.start.toISOString(),
          end: tempRange.end.toISOString(),
        }
      } else if (tempRange.start) {
        dates[editingDateIndex] = {
          start: tempRange.start.toISOString(),
          end: null,
        }
      }
      editingDateIndex = -1
      showToast(translations.dateEdited, 'success')
    } else {
      if (tempRange.start && tempRange.end) {
        dates.push({
          start: tempRange.start.toISOString(),
          end: tempRange.end.toISOString(),
        })
      } else if (tempRange.start) {
        dates.push({
          start: tempRange.start.toISOString(),
          end: null,
        })
      }
      showToast(translations.dateAdded, 'success')
    }

    saveDates()
    renderDatesList()
    updateDatePlaceholder()
    closePicker()

    const event = new CustomEvent('dates-updated', {
      detail: { dates },
    })
    document.dispatchEvent(event)
  }

  function editDate(index: number): void {
    if (index < 0 || index >= dates.length) return

    editingDateIndex = index
    const dateRange = dates[index]

    tempRange = {
      start: dateRange.start ? new Date(dateRange.start) : null,
      end: dateRange.end ? new Date(dateRange.end) : null,
    }

    // Set current month to the month of the start date
    if (dateRange.start) {
      currentMonth = new Date(dateRange.start)
    }

    // Show the popup
    if (popup) {
      popup.classList.add('active')
      document.body.classList.add('popup-open')
      renderCalendars()
    }

    // Update the calendar UI to reflect the selected dates
    highlightSelectedDates()
  }

  function deleteDate(index: number): void {
    if (index < 0 || index >= dates.length) return

    dates.splice(index, 1)

    saveDates()
    renderDatesList()
    updateDatePlaceholder()

    const event = new CustomEvent('dates-updated', {
      detail: { dates },
    })
    document.dispatchEvent(event)

    showToast(translations.dateDeleted, 'success')
  }

  // Handler for window resize
  function handleResize() {
    if (popup?.classList.contains('active')) {
      renderCalendars()
      highlightSelectedDates()
    }
  }

  // Local storage functions
  function loadSavedDates(): void {
    const savedDates = localStorage.getItem('cart_dates')
    if (savedDates) {
      try {
        dates = JSON.parse(savedDates)
        renderDatesList()
        updateDatePlaceholder()
      } catch (e) {
        console.error('Error loading saved dates:', e)
      }
    }
  }

  function saveDates(): void {
    localStorage.setItem('cart_dates', JSON.stringify(dates))
  }

  // Initialize
  function init(): void {
    if (!container) return

    // Add resize event listener
    window.addEventListener('resize', handleResize)

    button?.addEventListener('click', (e: Event) => {
      e.stopPropagation()
      openPicker()
    })

    cancelButton?.addEventListener('click', (e: Event) => {
      e.stopPropagation()
      closePicker()
    })

    confirmButton?.addEventListener('click', (e: Event) => {
      e.stopPropagation()
      confirmDate()
    })

    prevButton?.addEventListener('click', (e: Event) => {
      e.stopPropagation()
      navigateMonth(-1)
    })

    nextButton?.addEventListener('click', (e: Event) => {
      e.stopPropagation()
      navigateMonth(1)
    })

    // Prevent clicks inside the popup from closing it
    popup?.addEventListener('click', (e: Event) => {
      e.stopPropagation()
    })

    // Handle click outside
    document.addEventListener('click', (e: MouseEvent) => {
      if (!popup?.classList.contains('active')) return

      const target = e.target as Node
      const isClickInsideButton = button?.contains(target)
      const isClickInsidePopup = popup.contains(target)

      if (!isClickInsideButton && !isClickInsidePopup) {
        closePicker()
      }
    })

    // Handle escape key
    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Escape' && popup?.classList.contains('active')) {
        closePicker()
      }
    })

    renderCalendars()
    loadSavedDates()
  }

  // Start the application
  document.addEventListener('DOMContentLoaded', init)
</script>
