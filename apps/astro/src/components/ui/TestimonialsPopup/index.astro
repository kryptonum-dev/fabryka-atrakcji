---
import { toPlainText } from '@/src/utils/to-plain-text'
import CloseButton from '../PopupWindow/CloseButton.astro'
import RatingBox from '../RatingBox'
import imageToInlineSvg from '@/src/utils/image-to-inline-svg'
import { optimizeImage } from '@/src/utils/optimize-images'
import type { ImageDataProps } from '../image'
import type { PortableTextValue } from '../portable-text'
import Testimonials from './Testimonials'

type Props = {
  googleData: {
    rating: number
    ratingCount: number
  }
  testimonials: {
    name: string
    position: string
    company: string
    logo: string
    image: {
      profileImage: ImageDataProps
    }
    date: string
    review: PortableTextValue
  }[]
}

const { googleData, testimonials } = Astro.props

const clientTestimonials = await Promise.all(
  testimonials.map(async (testimonial) => ({
    ...testimonial,
    review: toPlainText(testimonial.review),
    logo: testimonial.logo ? await imageToInlineSvg(testimonial.logo) : null,
    image: {
      profileImage: testimonial.image
        ? await optimizeImage({ image: testimonial.image.profileImage.asset.url, width: 36, height: 36 })
        : null,
    },
  }))
)
---

<div class="TestimonialsPopup">
  <span class="title">Opinie</span>
  <RatingBox {...googleData} />
  <CloseButton />
  <Testimonials client:idle testimonials={clientTestimonials} />
</div>

<style lang="scss">
  .TestimonialsPopup {
    width: 100%;
    max-width: 68.5rem;
    padding: 2.5rem;
    display: grid;
    grid-template-columns: auto auto 1fr;
    grid-template-rows: auto 1fr;
    gap: clamp(0.75rem, calc(1.5vw / 0.48), 1.5rem);
    isolation: isolate;
    .title {
      grid-column: 1/2;
      color: var(--primary-700, #600d2a);
      font-weight: 760;
      font-size: var(--typography-heading-l, 2rem);
      line-height: 0.9;
      letter-spacing: -0.065em;
      text-transform: uppercase;
      font-family: 'PF Grand Gothik', 'PF Grand Gothik Fallback', sans-serif;
      align-self: center;
    }

    :global(.box) {
      grid-column: 2/3;
      align-self: center;
    }

    :global(.CloseButton) {
      justify-self: end;
    }

    @media (max-width: 56.1875rem) {
      padding: clamp(1.5rem, calc(3.5vw / 0.48), 3.5rem) clamp(1rem, calc(3.5vw / 0.48), 3.5rem)
        clamp(1rem, calc(2vw / 0.48), 2rem);
    }

    @media (max-width: 41.8125rem) {
      > :global(div) {
        grid-column: 2/4;
        justify-self: end;
        max-width: fit-content;
      }
    }

    @media (max-width: 31.1875rem) {
      padding: 1.5rem 1rem;
      row-gap: 1rem;
    }

    @media (max-width: 26.1875rem) {
      grid-template-columns: 1fr;

      .title {
        grid-column: 1/2;
        grid-row: 1/2;
      }

      > :global(div) {
        grid-column: 1/2;
        grid-row: 2/3;
        justify-self: start;
      }
    }
  }
</style>
