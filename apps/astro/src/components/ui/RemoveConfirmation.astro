---
import PopupWindow from '@/components/ui/PopupWindow/index.astro'
import CloseButton from '@/components/ui/PopupWindow/CloseButton.astro'
import Button from '@/components/ui/Button'

export type Props = {
  itemId: string
  itemType: 'hotels' | 'activities'
  hasAddons: boolean
  lang: string
  itemName: string
}

const { itemId, itemType, hasAddons, lang, itemName = '' } = Astro.props

const translations = {
  pl: {
    title: {
      hotels: 'Czy na pewno chcesz usunąć <strong>{hotelName}</strong> z wyceny?',
      activities: 'Czy na pewno chcesz usunąć <strong>{activityName}</strong> z wyceny?',
    },
    message: {
      hotels: hasAddons
        ? 'Usunięcie tego hotelu spowoduje utratę wszystkich wybranych opcji dodatkowych.'
        : 'Czy na pewno chcesz usunąć ten hotel z wyceny?',
      activities: hasAddons
        ? 'Usunięcie tej integracji spowoduje utratę wszystkich wybranych opcji dodatkowych.'
        : 'Czy na pewno chcesz usunąć tę integrację z wyceny?',
    },
    confirm: 'Tak, usuń',
    cancel: 'Anuluj',
    removedAlert: {
      hotels: 'Hotel został usunięty z wyceny',
      activities: 'Integracja została usunięta z wyceny',
    },
  },
  en: {
    title: {
      hotels: 'Are you sure you want to remove <strong>{hotelName}</strong> from your estimate?',
      activities: 'Are you sure you want to remove <strong>{activityName}</strong> from your estimate?',
    },
    message: {
      hotels: hasAddons
        ? 'Removing this hotel will result in losing all selected additional options.'
        : 'Are you sure you want to remove this hotel from your estimate?',
      activities: hasAddons
        ? 'Removing this activity will result in losing all selected additional options.'
        : 'Are you sure you want to remove this activity from your estimate?',
    },
    confirm: 'Yes, remove',
    cancel: 'Cancel',
    removedAlert: {
      hotels: 'Hotel has been removed from your estimate',
      activities: 'Activity has been removed from your estimate',
    },
  },
}

const t = translations[lang as keyof typeof translations] || translations.en
const title = itemName
  ? t.title[itemType as keyof typeof t.title].replace('{hotelName}', itemName).replace('{activityName}', itemName)
  : t.title[itemType as keyof typeof t.title]
const message = t.message[itemType as keyof typeof t.message]
---

<div
  class="remove-confirmation-container"
  data-id={itemId}
  data-lang={lang}
  data-type={itemType}
  data-text={JSON.stringify(t)}
>
  <PopupWindow>
    <div slot="open" class="hidden-trigger">
      <button></button>
    </div>
    <div slot="content" class="confirmation-content">
      <CloseButton />
      <p class="title"><Fragment set:html={title} /></p>
      <p class="message">{message}</p>
      <div class="confirmation-actions">
        <Button theme="primary" shade="light" className="cancel-remove-btn">{t.cancel}</Button>
        <Button theme="primary" shade="dark" className="confirm-remove-btn">{t.confirm}</Button>
      </div>
    </div>
  </PopupWindow>
</div>

<style lang="scss">
  .remove-confirmation-container {
    z-index: 9999;
    position: relative;

    .hidden-trigger {
      display: none;
    }

    .confirmation-content {
      padding: clamp(1rem, calc(1.5vw / 0.48), 2rem);
      max-width: 36rem;
      margin: 0 auto;
      display: flex;
      flex-direction: column;

      :global(.CloseButton) {
        align-self: flex-end;
        margin-bottom: 1rem;
      }

      .title {
        color: var(--primary-800);
        margin-bottom: 1.25rem;
        font-size: var(--typography-body-2xl, 1.5rem);
        line-height: 1.25;
        letter-spacing: -0.035em;
        text-align: center;

        :global(strong) {
          font-weight: 700;
        }
      }

      .message {
        text-align: center;
        margin-bottom: 1.75rem;
      }

      .confirmation-actions {
        display: flex;
        gap: 1rem;
        :global(button) {
          max-width: 100%;
          width: 100%;

          &[data-theme='primary'] {
            :global(span) {
              margin: 0 auto;
              padding-right: 1.75rem;
            }
          }
        }
      }
    }

    @media (max-width: 499px) {
      .confirmation-content {
        padding: 1.5rem var(--pageMargin);

        :global(.CloseButton) {
          margin-bottom: 0;
        }
      }
    }
  }

  @media (max-width: 459px) {
    .confirmation-content .confirmation-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  import { removeFromCart } from '@/src/store/cart'
  import { showToast } from '@/src/utils/toast'
  import { dispatchCartUpdate } from '@/src/utils/events'
  import type { Language } from '@/src/global/languages'

  const getTranslations = (hasAddons: boolean) => {
    return {
      pl: {
        title: {
          hotels: 'Czy na pewno chcesz usunąć <strong>{hotelName}</strong> z wyceny?',
          activities: 'Czy na pewno chcesz usunąć <strong>{activityName}</strong> z wyceny?',
        },
        message: {
          hotels: hasAddons
            ? 'Usunięcie tego hotelu spowoduje utratę wszystkich wybranych opcji dodatkowych.'
            : 'Czy na pewno chcesz usunąć ten hotel z wyceny?',
          activities: hasAddons
            ? 'Usunięcie tej integracji spowoduje utratę wszystkich wybranych opcji dodatkowych.'
            : 'Czy na pewno chcesz usunąć tę integrację z wyceny?',
        },
      },
      en: {
        title: {
          hotels: 'Are you sure you want to remove <strong>{hotelName}</strong> from your estimate?',
          activities: 'Are you sure you want to remove <strong>{activityName}</strong> from your estimate?',
        },
        message: {
          hotels: hasAddons
            ? 'Removing this hotel will result in losing all selected additional options.'
            : 'Are you sure you want to remove this hotel from your estimate?',
          activities: hasAddons
            ? 'Removing this activity will result in losing all selected additional options.'
            : 'Are you sure you want to remove this activity from your estimate?',
        },
      },
    }
  }

  // Find all confirmation containers
  const confirmationContainers = document.querySelectorAll('.remove-confirmation-container')

  confirmationContainers.forEach((container) => {
    const itemId = container.getAttribute('data-id')
    const itemType = container.getAttribute('data-type') as 'hotels' | 'activities'
    const confirmBtn = container.querySelector('.confirm-remove-btn')
    const cancelBtn = container.querySelector('.cancel-remove-btn')
    const closeBtn = container.querySelector('[data-popup-close]')
    const hiddenTrigger = container.querySelector('.hidden-trigger button')
    const lang = container.getAttribute('data-lang') as Language
    const translationsText = JSON.parse(container.getAttribute('data-text') || '{}')
    document.addEventListener('change-confirmation-data', (e) => {
      const { type, name, hasAddons } = (e as CustomEvent).detail
      const translations = getTranslations(hasAddons)[lang]
      const title = translations.title[type as keyof typeof translations.title]
        .replace('{hotelName}', name)
        .replace('{activityName}', name)
      const message = translations.message[type as keyof typeof translations.message]
      console.log(title, message)

      const titleEl = container.querySelector('.title')!
      const messageEl = container.querySelector('.message')!

      titleEl.innerHTML = title

      messageEl.innerHTML = message
    })

    // Handle confirm button click
    confirmBtn?.addEventListener('click', () => {
      const itemType = container.getAttribute('data-type') as 'hotels' | 'activities'
      const itemId = container.getAttribute('data-id')

      if (itemId && itemType) {
        // Remove item from cart
        removeFromCart(itemId, itemType)

        // Get  from the nearest parent component

        const message = translationsText.removedAlert[itemType as keyof typeof translationsText.removedAlert]

        // Show toast notification
        showToast(message, 'success')

        // Dispatch cart update event
        dispatchCartUpdate(itemId, itemType, 'remove')

        // Close the popup
        closeBtn?.dispatchEvent(new Event('click'))
      }
    })

    // Handle cancel button click
    cancelBtn?.addEventListener('click', () => {
      closeBtn?.dispatchEvent(new Event('click'))
    })

    // Listen for remove triggers from the sidebar
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement
      const triggerButton = target.closest('[data-remove-trigger]')

      if (triggerButton) {
        const sidebarId = triggerButton.closest('[data-id]')?.getAttribute('data-id')
        const sidebarType = triggerButton.closest('[data-type]')?.getAttribute('data-type')

        if (sidebarId === itemId && sidebarType === itemType) {
          ;(hiddenTrigger as HTMLButtonElement)?.click()
        }
      }
    })
  })
</script>
