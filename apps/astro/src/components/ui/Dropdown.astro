---
import { getLangFromPath, type Language } from '@/src/global/languages'
import { buildFilterUrl } from '@/src/utils/filters'

interface DropdownItem {
  name: string
  count: number
  isSelected: boolean
  href: string
}

type Props = { items: DropdownItem[]; params: string[]; heading: string } | { isSortingDropdown: true }

const translations = {
  pl: {
    label: 'Sortowanie',
    relevance: 'Trafność: od najwyższej',
    popularity: 'Najpopularniejsze',
    priceDesc: 'Cena: od najwyższej',
    priceAsc: 'Cena: od najniższej',
    newest: 'Od najnowszych',
  },
  en: {
    label: 'Sorting',
    relevance: 'Relevance: from highest',
    popularity: 'Popularity',
    priceDesc: 'Price: from highest',
    priceAsc: 'Price: from lowest',
    newest: 'Newest',
  },
}

const t = translations[(getLangFromPath(Astro.url.pathname) as Language) || 'pl']

const isSearchMode = Astro.url.searchParams.has('search')

const sortingItems = [
  ...(isSearchMode
    ? [
        {
          name: t.relevance,
          count: 1,
          isSelected: !Astro.url.searchParams.get('order') || Astro.url.searchParams.get('order') === 'searchMatching',
          href: buildFilterUrl({
            order: 'searchMatching',
            searchParams: Astro.url.searchParams,
            currentPath: Astro.url.pathname,
          }),
        },
      ]
    : []),
  {
    name: t.popularity,
    count: 1,
    isSelected:
      (!isSearchMode && !Astro.url.searchParams.get('order')) || Astro.url.searchParams.get('order') === 'popularity',
    href: buildFilterUrl({
      order: 'popularity',
      searchParams: Astro.url.searchParams,
      currentPath: Astro.url.pathname,
    }),
  },
  {
    name: t.newest,
    count: 1,
    isSelected: Astro.url.searchParams.get('order') === 'newest',
    href: buildFilterUrl({ order: 'newest', searchParams: Astro.url.searchParams, currentPath: Astro.url.pathname }),
  },
  {
    name: t.priceDesc,
    count: 1,
    isSelected: Astro.url.searchParams.get('order') === 'priceDesc',
    href: buildFilterUrl({ order: 'priceDesc', searchParams: Astro.url.searchParams, currentPath: Astro.url.pathname }),
  },
  {
    name: t.priceAsc,
    count: 1,
    isSelected: Astro.url.searchParams.get('order') === 'priceAsc',
    href: buildFilterUrl({ order: 'priceAsc', searchParams: Astro.url.searchParams, currentPath: Astro.url.pathname }),
  },
]

const props = Astro.props
const isSortingDropdown = 'isSortingDropdown' in props
const selectedItems = isSortingDropdown ? sortingItems : props.items
const selectedItem = selectedItems.find((item) => item.isSelected)
const hasSelection = !!selectedItem
const availableItems = selectedItems.filter((item) => item.count > 0)
const isDisabled = availableItems.length === 0
---

<details
  class="filter-dropdown"
  data-has-selection={hasSelection}
  data-disabled={isDisabled}
  data-is-sorting={isSortingDropdown}
>
  <summary tabindex={isDisabled ? -1 : 0}>
    <span
      >{isSortingDropdown ? t.label : props.heading}{
        isSortingDropdown && selectedItem ? (
          <>
            {': '}
            <strong>{selectedItem.name}</strong>
          </>
        ) : (
          ''
        )
      }</span
    >
    {
      hasSelection && !isSortingDropdown && (
        <a
          href={(() => {
            const url = new URL(Astro.url)
            props.params.forEach((param) => {
              url.searchParams.delete(param)
            })
            return url.toString()
          })()}
          class="selected-value"
          tabindex={isDisabled ? -1 : 0}
        >
          <span>{selectedItem.name}</span>
          <div class="clear-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
              <circle cx="9.9974" cy="10.0003" r="8.33333" stroke="#74535e" />
              <path
                d="M12.0807 7.91701L7.91406 12.0837M7.91404 7.91699L12.0807 12.0836"
                stroke="#74535e"
                stroke-linecap="round"
              />
            </svg>
          </div>
        </a>
      )
    }
    <div class="icon">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
        <path stroke="#600D2A" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.25" d="m4 6.25 4 4 4-4">
        </path>
      </svg>
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
        <path stroke="#600D2A" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.25" d="m4 6.25 4 4 4-4">
        </path>
      </svg>
    </div>
  </summary>
  {
    !isDisabled && (
      <ul>
        {availableItems.map((item) => (
          <li>
            <a data-selected={item.isSelected} href={item.href}>
              <span class="value">{item.name}</span>
              {!isSortingDropdown && <span class="count">{item.count}</span>}
            </a>
          </li>
        ))}
      </ul>
    )
  }
</details>

<style lang="scss">
  .filter-dropdown {
    position: relative;
    width: 100%;
    font-size: var(--typography-body-m);
    isolation: isolate;
    z-index: 2;
    color: var(--primary-800, #45051c);
    z-index: 20;
    isolation: isolate;

    &[data-disabled='true'] {
      summary {
        cursor: default;
        opacity: 0.6;
        pointer-events: none;
      }
    }

    &[data-has-selection='true']:not([data-is-sorting='true']) {
      summary {
        background-color: var(--neutral-200);
      }
    }

    &[data-is-sorting='true'] {
      summary {
        > span {
          flex-shrink: 1;
          text-overflow: ellipsis;
          overflow: hidden;
          white-space: nowrap;
          min-width: 0;
        }
      }
    }

    summary {
      padding: 0 0.625rem;
      min-height: 2.75rem;
      font-size: var(--typography-body-m);
      background-color: var(--neutral-100);
      border: 1px solid var(--neutral-500);
      border-radius: 0.25rem;
      cursor: pointer;
      display: flex;
      width: 100%;
      justify-content: space-between;
      align-items: center;
      user-select: none;
      gap: 0.5rem;
      transition: border-color 100ms;

      > span {
        flex-shrink: 0;
      }

      .selected-value {
        margin-right: auto;
        font-size: var(--typography-body-s);
        padding: 0.1875rem 0.25rem;
        background-color: var(--neutral-300);
        line-height: 1.6;
        border-radius: 0.25rem;
        border: 1px solid var(--neutral-500, #d2c1b0);
        letter-spacing: -0.01em;
        transition:
          opacity 200ms var(--easing),
          transform 250ms var(--easing);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--primary-800);
        text-decoration: none;
        position: relative;
        overflow: hidden;
        white-space: nowrap;
        max-width: 12.5rem;

        span {
          overflow: hidden;
          text-overflow: ellipsis;
        }

        .clear-icon {
          position: absolute;
          inset: 0;
          background-color: var(--neutral-300);
          display: grid;
          place-items: center;
          opacity: 0;
          transition: opacity 150ms;
        }
        svg {
          transform: scale(0.6) rotate(180deg);
          transition: transform 250ms var(--easing);
        }

        &:hover {
          .clear-icon {
            opacity: 1;

            svg {
              transform: scale(1) rotate(0deg);
            }
          }
        }

        .clear-icon {
          transition: transform 300ms var(--easing);
        }
      }

      &:focus-visible {
        outline: none;
        box-shadow: 0 0 0 2px var(--primary-800, #45051c);
        border-radius: 0.25rem;
      }

      .icon {
        position: relative;
        overflow: hidden;
        flex-shrink: 0;

        svg {
          transition: transform 300ms var(--easing);
          &:nth-of-type(1) {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: rotate(180deg) translate(50%, 150%);
          }

          &:nth-of-type(2) {
            transition: transform 250ms cubic-bezier(0.18, 0.89, 0.32, 1.2);
          }
        }
      }
    }

    ul {
      position: absolute;
      top: calc(100% - 1px);
      left: 0;
      background: var(--neutral-100);
      border: 1px solid var(--neutral-500);
      border-top: none;
      border-radius: 0 0 0.25rem 0.25rem;
      width: 100%;
      transition:
        border-color 150ms,
        height 150ms var(--easing);
      overflow: hidden;

      li {
        a {
          display: flex;
          align-items: center;
          justify-content: space-between;
          gap: 0.5rem;
          padding: 0 0.625rem;
          min-height: 2.75rem;
          transition: background-color 150ms;

          .count {
            color: var(--primary-400, #74535e);
          }

          &:hover {
            background-color: var(--neutral-200);
          }

          &:focus-visible {
            outline-offset: -2px;
            border-radius: 0.25rem;
          }

          &[data-selected='true'] {
            background-color: var(--neutral-300);

            .value {
              display: flex;
              align-items: center;
              gap: 0.25rem;
              &::after {
                margin-top: 0.25rem;
                content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='14' height='14' fill='none'%3E%3Cpath fill='%23F67258' fill-rule='evenodd' d='M12.83 7A5.833 5.833 0 1 1 1.165 7a5.833 5.833 0 0 1 11.667 0ZM9.349 5.232c.171.171.171.448 0 .62L6.432 8.767a.437.437 0 0 1-.619 0L4.646 7.6a.438.438 0 0 1 .62-.619l.856.858 1.304-1.304L8.73 5.232c.17-.17.448-.17.618 0Z' clip-rule='evenodd'/%3E%3C/svg%3E");
              }
            }
          }
        }
      }
    }

    &:has(summary:hover):not([data-expanded='true']) {
      summary,
      ul {
        border-color: var(--primary-700, #600d2a);
      }
    }

    &:has(summary:focus-visible) {
      ul {
        z-index: -1;
      }
    }

    &[data-expanded='true'] {
      summary {
        border-radius: 0.25rem 0.25rem 0 0;
        border-bottom: transparent;
        background-color: var(--neutral-100);

        .selected-value {
          opacity: 0;
          transform: translateY(0.5rem);
        }

        .icon {
          svg {
            &:nth-of-type(1) {
              transform: rotate(180deg) translate(50%, 50%);
            }

            &:nth-of-type(2) {
              transform: translateY(100%);
            }
          }
        }
      }
      ul {
        box-shadow: 0px 8px 24px 0px rgba(255, 251, 251, 0.4);
      }
    }
  }
</style>

<script>
  document.querySelectorAll<HTMLDetailsElement>('.filter-dropdown:not(.price-range)').forEach((details, index) => {
    const list = details.querySelector<HTMLUListElement>('ul')
    const summary = details.querySelector<HTMLElement>('summary')
    const selectedValue = details.querySelector<HTMLAnchorElement>('.selected-value')
    if (!list || !summary) return

    // Generate unique ID for this dropdown
    const dropdownId = `dropdown-${index}`
    let isAnimating = false

    // Listen for other dropdowns opening
    document.addEventListener('dropdownOpening', ((event: CustomEvent) => {
      const { id } = event.detail
      // Close this dropdown if another one is opening
      if (id !== dropdownId && details.open && !isAnimating) {
        closeDropdown()
      }
    }) as EventListener)

    // Prevent dropdown toggle when clicking the selected value
    selectedValue?.addEventListener('click', (event) => {
      event.stopPropagation()
      const href = selectedValue.getAttribute('href')
      if (href) {
        window.location.href = href
      }
    })

    const closeDropdown = () => {
      if (!details.open || isAnimating) return

      isAnimating = true
      details.setAttribute('data-expanded', 'false')
      list.style.height = list.scrollHeight + 'px'
      requestAnimationFrame(() => (list.style.height = '0px'))

      // Update tabindex when closing via outside click
      if (selectedValue && details.getAttribute('data-disabled') !== 'true') {
        selectedValue.setAttribute('tabindex', '0')
      }

      list.addEventListener(
        'transitionend',
        () => {
          details.open = false
          list.style.height = ''
          isAnimating = false
        },
        { once: true }
      )
    }

    summary.addEventListener('click', (event) => {
      event.preventDefault()

      // Don't open if disabled
      if (details.getAttribute('data-disabled') === 'true') return

      if (isAnimating) {
        return
      }

      isAnimating = true

      if (details.open) {
        details.setAttribute('data-expanded', 'false')
        list.style.height = list.scrollHeight + 'px'
        requestAnimationFrame(() => (list.style.height = '0px'))

        // Update tabindex when closing
        if (selectedValue && details.getAttribute('data-disabled') !== 'true') {
          selectedValue.setAttribute('tabindex', '0')
        }

        list.addEventListener(
          'transitionend',
          () => {
            details.open = false
            list.style.height = ''
            isAnimating = false
          },
          { once: true }
        )
      } else {
        // Opening - notify other dropdowns first
        document.dispatchEvent(
          new CustomEvent('dropdownOpening', {
            detail: { id: dropdownId },
          })
        )

        details.open = true
        details.setAttribute('data-expanded', 'true')
        const startHeight = list.scrollHeight + 'px'
        list.style.height = '0px'
        requestAnimationFrame(() => (list.style.height = startHeight))

        // Update tabindex when opening
        if (selectedValue) {
          selectedValue.setAttribute('tabindex', '-1')
        }

        list.addEventListener(
          'transitionend',
          () => {
            list.style.height = ''
            isAnimating = false
          },
          { once: true }
        )
      }
    })

    document.addEventListener('click', (event) => {
      if (!details.contains(event.target as Node)) {
        closeDropdown()
      }
    })

    // Set initial state
    details.setAttribute('data-expanded', details.open ? 'true' : 'false')
  })
</script>
