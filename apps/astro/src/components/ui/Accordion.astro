---
import type { HTMLAttributes } from 'astro/types'
import PortableText, { type PortableTextValue } from './portable-text'

type Props = {
  question: PortableTextValue
  answer: PortableTextValue
} & HTMLAttributes<'details'>

const { question, answer, ...props } = Astro.props
---

<details {...props} data-expanded={props.open ? 'true' : 'false'}>
  <summary>
    <PortableText value={question} class="heading" />
    <div class="icon">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none"
        ><path d="m4 6 4 4 4-4" stroke="#F67258" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"
        ></path></svg
      >
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none"
        ><path d="m4 6 4 4 4-4" stroke="#F67258" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"
        ></path></svg
      >
    </div>
  </summary>
  <div class="content"><PortableText value={answer} /></div>
</details>

<style lang="scss">
  details {
    border-radius: 8px 8px 0px 0px;
    background-color: transparent;
    position: relative;
    transition: background-color 200ms;

    &::before,
    &::after {
      content: '';
      width: 100%;
      height: 1px;
      position: absolute;
      left: 0;
      bottom: -1px;
      //   transform: translateY(-50%);
    }

    &:before {
      background-color: var(--primary-500);
    }
    &::after {
      height: 1px;
      background: linear-gradient(135deg, #798ddc 0%, #e7c78f 25%, #fa7468 74%, #798ddc 100%);
      transform: scaleX(0);
      transform-origin: right;
      transition: transform 1400ms var(--easing);
    }

    summary {
      width: 100%;
      padding: 0.75rem clamp(0.625rem, calc(1vw / 0.48), 1rem);
      display: flex;
      align-items: flex-start;
      justify-content: space-between;
      gap: clamp(0.625rem, calc(0.75vw / 0.48), 0.75rem);
      color: var(--primary-800, #45051c);
    }
    .icon {
      display: grid;
      place-items: center;
      position: relative;
      width: 1rem;
      height: 1rem;
      overflow: hidden;
      transition: transform 400ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
      margin-top: 1px;

      svg {
        transition: transform 400ms var(--easing);
        &:nth-of-type(1) {
        }
        &:nth-of-type(2) {
          position: absolute;
          top: 50%;
          transform: translate(50%, -150%) scale(0.6);
          right: 50%;
        }
      }
    }

    .content {
      overflow: hidden;
      transition: height 350ms cubic-bezier(0.18, 0.89, 0.32, 1.15);
      padding: 0 clamp(0.625rem, calc(1vw / 0.48), 1rem);

      > div {
        margin-bottom: 1rem;
      }
    }

    &:has(summary:hover) {
      .icon {
        svg {
          &:nth-of-type(1) {
            transform: translateY(100%);
          }

          &:nth-of-type(2) {
            transform: translate(50%, -50%);
            transition: transform 400ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
          }
        }
      }
    }
    &:has(summary:focus:not(:focus-visible)) {
      .icon {
        transform: translateY(2px) scale(1.1);
      }
    }
    &:has(summary:focus-visible) {
      border-radius: 2px;
      outline: 2px solid var(--primary-800);
      outline-offset: 2px;
      z-index: 50;

      summary {
        outline: none;
      }
    }

    &[data-expanded='true'] {
      background-color: var(--neutral-100, #faf7f7);

      &::after {
        transform-origin: left;
        transform: scaleX(1);
      }
      .icon {
        svg {
          &:nth-of-type(1) {
            transform: translateY(100%);
          }

          &:nth-of-type(2) {
            transform: translate(50%, -50%) rotate(180deg);
          }
        }
      }

      &:has(summary:hover) {
        .icon {
          svg:nth-of-type(2) {
            transform: translate(50%, -50%) rotate(180deg);
          }
        }
      }

      .content {
        > div {
          transform: translate(0, 0);
          opacity: 1;
          animation: Accordion-content-slide-in 450ms var(--easing);
        }
      }
    }
    @keyframes Accordion-content-slide-in {
      0% {
        transform: translate(-0.75rem, -0.125rem);
        opacity: 0;
      }

      50% {
        opacity: 1;
      }

      100% {
        transform: translate(0, 0);
        opacity: 1;
      }
    }
  }
</style>

<script>
  document.querySelectorAll('details').forEach((details) => {
    const content = details.querySelector<HTMLDivElement>('.content')
    const summary = details.querySelector<HTMLDivElement>('summary')
    if (!content || !summary) return

    let isAnimating = false

    summary.addEventListener('click', (event) => {
      event.preventDefault()

      if (isAnimating) {
        isAnimating = false
        content.style.height = ''
        details.open = !details.open
        details.setAttribute('data-expanded', details.open ? 'true' : 'false')
        return
      }

      const parent = details.parentElement
      if (parent) {
        parent.querySelectorAll<HTMLDetailsElement>('details[open]').forEach((openDetails) => {
          if (openDetails !== details) {
            const openContent = openDetails.querySelector<HTMLDivElement>('.content')
            if (openContent) {
              openContent.style.height = openContent.scrollHeight + 'px'
              requestAnimationFrame(() => (openContent.style.height = '0px'))
              openDetails.setAttribute('data-expanded', 'false')

              const currentDetails = openDetails
              const currentContent = openContent

              isAnimating = true
              openContent.addEventListener(
                'transitionend',
                () => {
                  if (currentDetails.getAttribute('data-expanded') === 'false') {
                    currentDetails.open = false
                  }
                  currentContent.style.height = ''
                  isAnimating = false
                },
                { once: true }
              )
            }
          }
        })
      }

      if (details.open) {
        content.style.height = content.scrollHeight + 'px'
        requestAnimationFrame(() => (content.style.height = '0px'))
        details.setAttribute('data-expanded', 'false')

        isAnimating = true
        content.addEventListener(
          'transitionend',
          () => {
            if (details.getAttribute('data-expanded') === 'false') {
              details.open = false
            }
            content.style.height = ''
            isAnimating = false
          },
          { once: true }
        )
      } else {
        details.setAttribute('data-expanded', 'true')
        details.open = true
        const startHeight = content.scrollHeight + 'px'
        content.style.height = '0px'
        requestAnimationFrame(() => (content.style.height = startHeight))

        isAnimating = true
        content.addEventListener(
          'transitionend',
          () => {
            content.style.height = ''
            isAnimating = false
          },
          { once: true }
        )
      }
    })
  })
</script>
