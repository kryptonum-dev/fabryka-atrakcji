---
import { getLangFromPath, type Language } from '@/global/languages'

type FilterItem = {
  name: string
  count: number
  value: string
  isSelected: boolean
}

type Props = {
  heading: string
  items: FilterItem[]
  paramName: string
  isMulti?: boolean
  allowHtmlName?: boolean
  forceDisabled?: boolean
}

const { heading, items, paramName, isMulti = false, allowHtmlName = false, forceDisabled = false } = Astro.props

const availableItems = items.filter((item) => item.count > 0 || item.isSelected)
const selectedItems = items.filter((item) => item.isSelected)
// Special case: if this is a multi-select filter with multiple selected items and forceDisabled is true
const isAmenitiesSpecialCase = isMulti && forceDisabled && paramName === 'amenities' && selectedItems.length > 1
// Component should be disabled unless it's the special amenities case
const isDisabled = (availableItems.length === 0 || forceDisabled) && !isAmenitiesSpecialCase

// Get language and prepare translation string
const lang = getLangFromPath(Astro.url.pathname) as Language | 'pl'
const translations = {
  pl: {
    starLabel: 'Gwiazdki',
  },
  en: {
    starLabel: 'Stars',
  },
}
const t = translations[lang]
---

<details
  class="filter-group select-filter-group"
  data-disabled={isDisabled}
  data-param-name={paramName}
  data-multi={isMulti}
  data-star-label={t.starLabel}
  data-amenities-special-case={isAmenitiesSpecialCase}
  open={!isDisabled}
  data-expanded={!isDisabled ? 'true' : 'false'}
>
  <summary>
    <span>{heading}</span>
    <button class="selected-value" type="button" style="display: none;">
      <span></span>
      <div class="clear-icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
          <circle cx="9.9974" cy="10.0003" r="8.33333" stroke="#74535e"></circle>
          <path
            d="M12.0807 7.91701L7.91406 12.0837M7.91404 7.91699L12.0807 12.0836"
            stroke="#74535e"
            stroke-linecap="round"></path>
        </svg>
      </div>
    </button>
    <div class="icon">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
        <path stroke="#600D2A" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.25" d="m4 6.25 4 4 4-4"
        ></path>
      </svg>
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
        <path stroke="#600D2A" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.25" d="m4 6.25 4 4 4-4"
        ></path>
      </svg>
    </div>
  </summary>

  <div class="filter-content">
    <div class="filter-options">
      {
        // Show only selected items in special case, otherwise show all available items
        (isAmenitiesSpecialCase ? selectedItems : availableItems).map((item) => (
          <label
            class="filter-option"
            data-selected={item.isSelected}
            data-active={item.isSelected}
            data-count={item.count}
            data-value={item.value}
          >
            <input
              type={isMulti ? 'checkbox' : 'radio'}
              name={paramName}
              value={item.value}
              checked={item.isSelected}
              data-count={item.count}
            />
            <span class="checkbox-custom">
              <svg
                class="checkmark"
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="17"
                viewBox="0 0 16 17"
                fill="none"
              >
                <path
                  d="M4.66602 9.1L6.76125 11.5L11.9993 5.5"
                  stroke="#FAF7F7"
                  stroke-width="1.5"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </span>
            <span class="value">{allowHtmlName ? <Fragment set:html={item.name} /> : item.name}</span>
            <span class="count">{isAmenitiesSpecialCase ? '' : item.count}</span>
          </label>
        ))
      }
    </div>
  </div>
</details>

<style lang="scss">
  .select-filter-group {
    overflow: hidden;
    color: var(--primary-800);
    padding: 0.375rem 0rem;
    border-bottom: 2px solid var(--neutral-200, #f5f1ec);

    &[data-disabled='true'] {
      summary {
        cursor: default;

        > span:first-of-type {
          opacity: 0.6;
          pointer-events: none;
        }

        .icon {
          pointer-events: none;
          opacity: 0.6;
        }

        // Keep the selected-value button fully visible and interactive
        .selected-value {
          opacity: 1;
          cursor: pointer;
          pointer-events: auto;

          &:hover {
            .clear-icon {
              opacity: 1;
            }
          }
        }
      }

      // Disable the filter options
      .filter-content {
        pointer-events: none;
        opacity: 0.6;
        cursor: default;

        .filter-option {
          cursor: default;
        }
      }
    }

    &[data-has-selection='true'] {
      border-color: var(--neutral-300);
    }

    &[data-amenities-special-case='true'] {
      .filter-content {
        opacity: 1;
        pointer-events: auto;
      }

      summary {
        cursor: pointer;
        opacity: 1;

        > span:first-of-type {
          opacity: 1;
          pointer-events: auto;
        }

        .icon {
          opacity: 1;
          pointer-events: auto;
        }
      }

      .filter-options {
        .filter-option {
          cursor: pointer;

          &:hover {
            background-color: var(--neutral-200);
          }
        }
      }
    }

    summary {
      padding: 0rem 0.25rem 0rem 1rem;
      min-height: 2.75rem;
      font-size: var(--typography-body-m);
      cursor: pointer;
      display: flex;
      width: 100%;
      justify-content: space-between;
      align-items: center;
      user-select: none;
      gap: 0.5rem;
      transition: background-color 250ms var(--easing);

      > span {
        flex-shrink: 0;

        &:first-of-type {
          color: var(--primary-800, #45051c);
          font-weight: 700;
          line-height: 1.7;
          font-size: var(--typography-body-m, 0.875rem);
        }
      }

      &:focus-visible {
        outline-offset: -2px;
        border-radius: 0.25rem;
      }

      .selected-value {
        margin-right: auto;
        font-size: var(--typography-body-s);
        padding: 0.1875rem 0.25rem;
        background-color: var(--neutral-200);
        border-radius: 0.25rem;
        border: 1px solid var(--neutral-500);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--primary-800);
        position: relative;
        overflow: hidden;
        white-space: nowrap;
        max-width: 12.5rem;
        cursor: pointer;
        transition:
          opacity 300ms var(--easing),
          transform 300ms var(--easing);

        span {
          overflow: hidden;
          text-overflow: ellipsis;
        }

        .clear-icon {
          position: absolute;
          inset: 0;
          background-color: var(--neutral-200);
          display: grid;
          place-items: center;
          opacity: 0;
          transition: opacity 150ms;
        }

        svg {
          transform: scale(0.6) rotate(180deg);
          transition: transform 250ms var(--easing);
        }

        &:hover {
          .clear-icon {
            opacity: 1;

            svg {
              transform: scale(1) rotate(0deg);
            }
          }
        }
      }

      .icon {
        position: relative;
        overflow: hidden;
        flex-shrink: 0;
        height: 100%;
        width: 2.75rem;
        display: grid;
        place-items: center;

        svg {
          transition: transform 300ms var(--easing);
          &:nth-of-type(1) {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: rotate(180deg) translate(50%, 150%);
          }

          &:nth-of-type(2) {
            transition: transform 250ms cubic-bezier(0.18, 0.89, 0.32, 1.2);
          }
        }
      }
    }

    .filter-content {
      transition: height 200ms var(--easing);
      overflow: hidden;
    }

    .filter-options {
      .filter-option {
        display: flex;
        align-items: center;
        min-height: 2.75rem;
        padding: 0rem 0.25rem 0rem 1rem;
        justify-content: space-between;
        gap: 0.5rem;
        cursor: pointer;
        font-size: var(--typography-body-m);
        transition: background-color 150ms;
        position: relative;

        &:has(input:focus-visible) {
          &:focus-within {
            outline: none;

            &::before {
              content: '';
              position: absolute;
              inset: 2px;
              border: 2px solid var(--primary-400);
              border-radius: 0.25rem;
              pointer-events: none;
            }
          }
        }

        input:focus-visible {
          outline: none;
        }

        &[data-zero-count='true'] {
          display: none;
        }

        input {
          width: 1.125rem;
          height: 1.125rem;
          accent-color: var(--primary-500);
          position: absolute;
          opacity: 0;
          clip: rect(0 0 0 0);
          clip-path: inset(50%);
          overflow: hidden;
          white-space: nowrap;
        }

        .checkbox-custom {
          width: 1rem;
          height: 1rem;
          border: 1px solid var(--primary-400);
          border-radius: 0.25rem;
          margin-top: 1px;
          position: relative;
          overflow: hidden;

          .checkmark {
            position: absolute;
            inset: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            z-index: 2;
            transform: scale(0.8);
            transition: all 200ms var(--easing);
            width: 100%;
            height: 100%;
            margin-right: 2px;
          }

          &::after {
            content: '';
            position: absolute;
            inset: 0;
            background-color: var(--primary-300);
            transform: scaleY(0);
            transform-origin: bottom;
            transition: transform 400ms var(--easing);
          }
        }

        .value {
          flex: 1;
          overflow: hidden;
          text-overflow: ellipsis;
          white-space: nowrap;
          transition: transform 200ms var(--easing);
          display: flex;
          align-items: center;
        }

        .count {
          color: var(--primary-400);
          display: grid;
          place-items: center;
          min-width: 2rem;
          text-align: right;
          height: 100%;
          width: 2.75rem;
          display: grid;
          place-items: center;
        }

        &:hover {
          .value {
            transform: translateX(0.125rem);
          }

          .checkbox-custom::after {
            transform: scaleY(1);
            background-color: var(--neutral-300);
            transition: transform 200ms var(--easing);
          }
        }

        &[data-active='true'] {
          .value {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            &::after {
              margin-top: 0.25rem;
              content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='14' height='14' fill='none'%3E%3Cpath fill='%23F67258' fill-rule='evenodd' d='M12.83 7A5.833 5.833 0 1 1 1.165 7a5.833 5.833 0 0 1 11.667 0ZM9.349 5.232c.171.171.171.448 0 .62L6.432 8.767a.437.437 0 0 1-.619 0L4.646 7.6a.438.438 0 0 1 .62-.619l.856.858 1.304-1.304L8.73 5.232c.17-.17.448-.17.618 0Z' clip-rule='evenodd'/%3E%3C/svg%3E");
            }
          }
        }

        &[data-selected='true'] {
          background-color: var(--neutral-300);

          .checkbox-custom {
            border-color: var(--primary-500);

            .checkmark {
              opacity: 1;
              transform: scale(1);
            }

            &::after {
              transform: scaleY(1);
              background-color: var(--primary-500);
            }
          }
        }
      }
    }

    &[data-expanded='true'] {
      summary {
        .icon {
          svg {
            &:nth-of-type(1) {
              transform: rotate(180deg) translate(50%, 50%);
            }
            &:nth-of-type(2) {
              transform: translateY(100%);
            }
          }
        }

        .selected-value {
          opacity: 0;
          transform: translateY(0.5rem);
          pointer-events: none;
        }
      }
    }
  }
</style>

<script>
  document.querySelectorAll<HTMLDetailsElement>('.select-filter-group').forEach((details) => {
    const summary = details.querySelector<HTMLElement>('summary')!
    const content = details.querySelector<HTMLDivElement>('.filter-content')
    const clearButton = details.querySelector<HTMLButtonElement>('.selected-value')!
    const selectedValueSpan = clearButton.querySelector('span')!
    const inputs = details.querySelectorAll<HTMLInputElement>('input')!
    const isDisabled = details.dataset.disabled === 'true'
    const isMulti = details.dataset.multi === 'true'
    const isAmenitiesSpecialCase = details.dataset.amenitiesSpecialCase === 'true'
    const paramName = details.dataset.paramName
    const starLabel = details.dataset.starLabel

    let isAnimating = false

    function updateSelectedValue() {
      const selectedInputs = Array.from(inputs).filter((input) => input.checked)
      const selectedLabels = selectedInputs
        .map((input) => {
          const label = input.parentElement
          if (!label) return ''

          // Special handling for stars filter
          if (paramName === 'stars') {
            const value = label.getAttribute('data-value')
            return `${starLabel}: ${value}`
          }

          return label.querySelector('.value')?.textContent || ''
        })
        .filter(Boolean)

      if (selectedLabels.length > 0) {
        selectedValueSpan.textContent = selectedLabels.join(', ')
        clearButton.style.display = 'flex'
        details.setAttribute('data-has-selection', 'true')
      } else {
        clearButton.style.display = 'none'
        details.setAttribute('data-has-selection', 'false')
      }
    }

    // Initialize with no selection
    details.setAttribute('data-has-selection', 'false')
    clearButton.style.display = 'none'

    // Update based on actual checked state
    requestAnimationFrame(() => {
      updateSelectedValue()
    })

    // Clear button handler - should work even when disabled
    clearButton?.addEventListener('click', (event) => {
      event.stopPropagation()

      // Add exit animation
      clearButton.style.opacity = '0'
      clearButton.style.transform = 'translateX(-0.5rem)'
      clearButton.style.pointerEvents = 'none'

      // Wait for animation to complete before dispatching event
      setTimeout(() => {
        // Uncheck all inputs
        inputs.forEach((input) => {
          input.checked = false
          const label = input.parentElement
          if (label) {
            label.setAttribute('data-selected', 'false')
          }
        })

        // Update selected value display
        updateSelectedValue()

        // Dispatch custom event for filter state change
        window.dispatchEvent(
          new CustomEvent('filterClear', {
            detail: { paramName: details.dataset.paramName },
          })
        )
      }, 150)
    })

    // Ensure details is closed when disabled
    if (isDisabled) {
      details.open = false
    }

    // Animation logic for the dropdown opening/closing
    if (summary && content) {
      summary.addEventListener('click', (event) => {
        event.preventDefault()

        // If disabled and not special case, prevent any interaction
        if (isDisabled && !isAmenitiesSpecialCase) {
          event.stopPropagation()
          details.open = false
          return
        }

        if (isAnimating) return

        isAnimating = true

        details.setAttribute('data-expanded', (!details.open).toString())

        if (details.open) {
          content.style.height = content.scrollHeight + 'px'
          requestAnimationFrame(() => {
            content.style.height = '0'
          })

          // Update tabindex when closing
          if (clearButton && details.getAttribute('data-disabled') !== 'true') {
            clearButton.style.opacity = '1'
            clearButton.style.transform = 'translateY(0)'
            clearButton.style.pointerEvents = 'auto'
          }

          content.addEventListener(
            'transitionend',
            () => {
              details.open = false
              content.style.height = ''
              isAnimating = false
            },
            { once: true }
          )
        } else {
          details.open = true
          const startHeight = content.scrollHeight
          content.style.height = '0'
          requestAnimationFrame(() => {
            content.style.height = startHeight + 'px'
          })

          // Update selected value visibility when opening
          if (clearButton) {
            clearButton.style.opacity = '0'
            clearButton.style.transform = 'translateY(0.5rem)'
            clearButton.style.pointerEvents = 'none'
          }

          content.addEventListener(
            'transitionend',
            () => {
              content.style.height = ''
              isAnimating = false
            },
            { once: true }
          )
        }
      })
    }

    // Handle input changes - prevent changes when disabled
    inputs.forEach((input) => {
      input.addEventListener('change', () => {
        // Don't process if disabled
        if (isDisabled) {
          // Revert the change
          if (isMulti) {
            input.checked = !input.checked
          }
          return
        }

        const label = input.parentElement
        const labelText = label?.querySelector('.value')?.textContent || ''

        if (isMulti) {
          // For checkboxes, toggle the selected state
          if (label) {
            label.setAttribute('data-selected', input.checked.toString())
          }

          // Update selected value display
          updateSelectedValue()

          // Dispatch custom event with the value and checked state
          window.dispatchEvent(
            new CustomEvent('filterChange', {
              detail: {
                paramName: details.dataset.paramName,
                value: input.value,
                label: labelText,
                checked: input.checked,
              },
            })
          )
        } else {
          // For radio buttons, check if it's already selected
          const wasSelected = label?.getAttribute('data-selected') === 'true'

          // Reset all labels first
          details.querySelectorAll('.filter-option').forEach((option) => {
            option.setAttribute('data-selected', 'false')
          })

          if (wasSelected) {
            // If it was already selected, unselect it
            input.checked = false
            // Update selected value display
            updateSelectedValue()
            // Dispatch clear event
            window.dispatchEvent(
              new CustomEvent('filterClear', {
                detail: { paramName: details.dataset.paramName },
              })
            )
          } else {
            // If it wasn't selected, select it
            if (label) {
              label.setAttribute('data-selected', 'true')
            }
            // Update selected value display
            updateSelectedValue()

            // Dispatch custom event for filter state change
            window.dispatchEvent(
              new CustomEvent('filterChange', {
                detail: {
                  paramName: details.dataset.paramName,
                  value: input.value,
                  label: labelText,
                },
              })
            )
          }
        }
      })

      // Add click handler for radio inputs to allow unselecting
      if (!isMulti) {
        let wasUnselected = false

        input.addEventListener('click', (e) => {
          if (isDisabled) {
            e.preventDefault()
            return
          }

          const label = input.parentElement
          const wasSelected = label?.getAttribute('data-selected') === 'true'

          if (wasSelected) {
            // If it's currently selected, unselect it
            e.preventDefault()
            wasUnselected = true
            input.dispatchEvent(new Event('change'))
          } else if (wasUnselected) {
            // If it was previously unselected, allow reselecting
            wasUnselected = false
            input.checked = true
            input.dispatchEvent(new Event('change'))
          }
        })
      }
    })
  })
</script>
