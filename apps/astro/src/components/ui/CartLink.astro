---
import { type Language } from '@/global/languages'

const language = (Astro.params.lang as Language) || 'pl'

type Props = {
  inverted?: boolean
}

const { inverted } = Astro.props as Props

const translations = {
  pl: {
    cart: 'Koszyk',
    cartUrl: '/pl/koszyk',
  },
  en: {
    cart: 'Cart',
    cartUrl: '/en/cart',
  },
}

const t = translations[language]
---

<a href={t.cartUrl} class="cart">
  {inverted && <span>{t.cart}</span>}
  <div class="icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none"
      ><path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M5.49 4.676a.01.01 0 0 0 .01-.01V4a2.5 2.5 0 0 1 5 0v.667c0 .005.003.009.008.009.86.024 1.384.114 1.786.444.553.453.707 1.223 1.015 2.762l.4 2c.443 2.214.664 3.32.064 4.053-.6.732-1.729.732-3.986.732H6.212c-2.258 0-3.386 0-3.986-.732-.6-.732-.38-1.84.064-4.053l.4-2c.307-1.54.461-2.309 1.014-2.762.402-.33.927-.42 1.786-.444ZM6.5 4a1.5 1.5 0 1 1 3 0v.667H6.498V4ZM8 11.5a1.5 1.5 0 0 1-1.415-1 .5.5 0 0 0-.943.333 2.5 2.5 0 0 0 4.715 0 .5.5 0 0 0-.943-.333A1.5 1.5 0 0 1 8 11.5Z"
        fill="currentColor"></path></svg
    ><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none"
      ><path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M5.49 4.676a.01.01 0 0 0 .01-.01V4a2.5 2.5 0 0 1 5 0v.667c0 .005.003.009.008.009.86.024 1.384.114 1.786.444.553.453.707 1.223 1.015 2.762l.4 2c.443 2.214.664 3.32.064 4.053-.6.732-1.729.732-3.986.732H6.212c-2.258 0-3.386 0-3.986-.732-.6-.732-.38-1.84.064-4.053l.4-2c.307-1.54.461-2.309 1.014-2.762.402-.33.927-.42 1.786-.444ZM6.5 4a1.5 1.5 0 1 1 3 0v.667H6.498V4ZM8 11.5a1.5 1.5 0 0 1-1.415-1 .5.5 0 0 0-.943.333 2.5 2.5 0 0 0 4.715 0 .5.5 0 0 0-.943-.333A1.5 1.5 0 0 1 8 11.5Z"
        fill="currentColor"></path></svg
    >
  </div>
  <div class="count-badge cart-count-badge" style="display: none;" data-inverted={inverted}></div>
  {!inverted && <span>{t.cart}</span>}
</a>

<style lang="scss">
  .cart {
    display: flex;
    align-items: center;
    z-index: 3;
    min-height: 2.75rem;
    gap: 0.25rem;
    color: var(--primary-700, #600d2a);
    font-size: var(--typography-body-s, 0.75rem);
    line-height: 1.6;
    letter-spacing: -0.01em;
    transition: color 150ms;
    position: relative;
    border-radius: 4px;

    &::before {
      content: '';
      position: absolute;
      inset: 0 -6px;
      z-index: -1;
      background: var(--neutral-300, #ede6de);
      transform: scale(0);
      transition: transform 300ms cubic-bezier(0.18, 0.89, 0.32, 1.2);
      border-radius: inherit;
    }

    .icon {
      position: relative;
      overflow: hidden;
      svg {
        transition: transform 400ms var(--easing);
        &:nth-of-type(2) {
          position: absolute;
          top: 50%;
          left: 50%;
          transform-origin: bottom;
          transform: translate(-150%, -50%) rotate(-60deg) scale(0.7);
        }
      }
    }

    span {
      padding-top: 1px;
    }

    .count-badge {
      position: absolute;
      bottom: 0.625rem;
      left: 0.625rem;
      width: 0.625rem;
      height: 0.625rem;
      border-radius: 50%;
      background-color: var(--primary-600, #db2a50);
      color: var(--neutral-100, #faf7f7);
      display: grid;
      place-items: center;
      font-size: 0.5rem;
      line-height: 1;
      pointer-events: none;
      z-index: 2;

      &[data-inverted='true'] {
        bottom: 0.5rem;
        left: 3.375rem;
      }
    }

    &:hover {
      color: var(--primary-600);
      .icon {
        svg {
          &:nth-of-type(1) {
            transform: translateX(150%) rotate(60deg) scale(0.7);
          }
          &:nth-of-type(2) {
            transform: translate(-50%, -50%);
            transition: transform 350ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
          }
        }
      }
    }

    &:focus:not(:focus-visible) {
      &::before {
        transform: scale(1);
      }
    }
  }
</style>

<script>
  // Function to update all cart badges
  function updateCartBadges() {
    const cartDataStr = localStorage.getItem('cart')

    if (!cartDataStr) return

    try {
      const cartData = JSON.parse(cartDataStr)
      const itemCount = cartData.hotels.length + cartData.activities.length

      // Get all cart badge elements
      const badges = document.querySelectorAll('.cart-count-badge')

      badges.forEach((badge) => {
        if (itemCount > 0) {
          badge.textContent = itemCount.toString()
          ;(badge as HTMLElement).style.display = 'grid'
        } else {
          ;(badge as HTMLElement).style.display = 'none'
        }
      })
    } catch (error) {
      console.error('Error updating cart badges:', error)
    }
  }

  // Update badges when page loads
  document.addEventListener('DOMContentLoaded', updateCartBadges)

  // Update badges when cart changes
  document.addEventListener('cart-updated', updateCartBadges)
</script>
