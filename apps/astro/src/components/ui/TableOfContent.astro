---
import type { PortableTextProps } from 'astro-portabletext/types'
import type { PortableTextBlock } from '@portabletext/types'
import { toPlainText } from 'astro-portabletext'
import { slugify } from '@/src/utils/slugify'
import type { Language } from '@/src/global/languages'

const lang = (Astro.params.lang as Language) || 'pl'

const translations = {
  pl: {
    showMore: 'Pokaż więcej',
    showLess: 'Pokaż mniej',
  },
  en: {
    showMore: 'Show more',
    showLess: 'Show less',
  },
}

const t = translations[lang]

type Props = {
  title: string
  headings: PortableTextProps['value'][]
}

export type TableOfContentProps = Props

export const TableOfContent_Query = `
  "headings": content[length(style) == 2 && string::startsWith(style, "h")],
`

const { title, headings } = Astro.props

type HeadingGroup = {
  heading: { text: string; slug: string }
  subHeadings: { text: string; slug: string }[]
}

const groupedHeadings = headings?.reduce<HeadingGroup[]>((acc, heading) => {
  const style = (heading as PortableTextBlock).style as string
  const text = toPlainText(heading as PortableTextBlock).replace('❧ ', '')
  const slug = slugify(text)
  if (style === 'h2') {
    acc.push({ heading: { text, slug }, subHeadings: [] })
  } else if (style === 'h3' && acc.length > 0) {
    acc[acc.length - 1].subHeadings.push({ text, slug })
  }
  return acc
}, [])
---

<nav class="TableOfContent">
  <p>{title}</p>
  <div class="wrapper" data-expanded="false">
    {
      groupedHeadings && (
        <ul class="list">
          {groupedHeadings.map(({ heading, subHeadings }) => (
            <li>
              <a href={`#${heading.slug}`} aria-current="false">
                {heading.text}
                {subHeadings.length > 0 && (
                  <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
                      <path
                        stroke="#74535E"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="1.25"
                        d="m4 6.27 4 4 4-4"
                      />
                    </svg>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
                      <path
                        stroke="#74535E"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="1.25"
                        d="m4 6.27 4 4 4-4"
                      />
                    </svg>
                  </div>
                )}
              </a>
              {subHeadings.length > 0 && (
                <ul class="subheadings">
                  {subHeadings.map(({ text, slug }) => (
                    <li>
                      <a href={`#${slug}`} aria-current="false">
                        {text}
                      </a>
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))}
        </ul>
      )
    }
    {
      groupedHeadings.length > 4 && (
        <button class="show-more" data-show-less={t.showLess} data-show-more={t.showMore}>
          <span>{t.showMore}</span>
          <div class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" viewBox="0 0 17 16" fill="none">
              <path
                d="M12.5 6.66699L8.9714 10.1956C8.71106 10.4559 8.28894 10.4559 8.0286 10.1956L4.5 6.66699"
                stroke="#74535E"
                stroke-linecap="round"
              />
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" viewBox="0 0 17 16" fill="none">
              <path
                d="M12.5 6.66699L8.9714 10.1956C8.71106 10.4559 8.28894 10.4559 8.0286 10.1956L4.5 6.66699"
                stroke="#74535E"
                stroke-linecap="round"
              />
            </svg>
          </div>
        </button>
      )
    }
  </div>
</nav>

<style lang="scss">
  .TableOfContent {
    position: sticky;
    top: 89px;
    height: fit-content;
    max-height: calc(100vh - 89px);
    overflow-y: auto;
    grid-row: 1/3;
    line-height: 1.4;
    letter-spacing: -0.01em;
    font-size: var(--typography-body-m, 0.875rem);
    p {
      margin-bottom: 0.25rem;
    }
    .list {
      width: 100%;
      border-right: 2px solid;
      border-image: linear-gradient(
          to bottom,
          rgba(121, 141, 220, 0.7) 0%,
          rgba(231, 199, 143, 0.7) 25%,
          rgba(250, 116, 104, 0.7) 74%,
          rgba(121, 141, 220, 0.7) 100%
        )
        1 100%;

      li {
        ul {
          font-size: 0.8125rem;
          display: none;
          padding-left: 0.5rem;
        }

        &:has(a[aria-current='true']),
        &:focus-within:not(:active) {
          .icon {
            svg {
              &:nth-child(1) {
                transform: translate(-50%, -50%) rotate(180deg);
              }

              &:nth-child(2) {
                transform: translateY(100%);
              }
            }
          }
          ul {
            display: block;
          }
        }
      }

      a {
        min-height: 2.75rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.25rem 1rem 0.375rem 1rem;
        background-color: var(--neutral-100);
        position: relative;
        overflow: hidden;
        transition:
          text-shadow 200ms,
          color 200ms;
        margin-left: 2px;

        &::before {
          width: 0.1875rem;
          height: 0.1875rem;
          border-radius: 50%;
          background-color: var(--primary-500);
          content: '';
          position: absolute;
          left: 0.5rem;
          top: 1.24rem;
          opacity: 0;
          transform: translateX(3px);
          transition:
            opacity 150ms,
            transform 400ms var(--easing);
        }

        &::after {
          background: linear-gradient(
            to bottom,
            rgba(121, 141, 220, 0.8) 0%,
            rgba(231, 199, 143, 0.8) 25%,
            rgba(250, 116, 104, 0.8) 74%,
            rgba(121, 141, 220, 0.8) 100%
          );
          content: '';
          position: absolute;
          width: 2px;
          left: 0;
          top: 0;
          height: 100%;
          transform: translateY(100%);
          transition: transform 500ms var(--easing);
        }

        .icon {
          flex-shrink: 0;
          width: 1.125rem;
          height: 1.125rem;
          display: grid;
          position: relative;
          place-content: center;
          overflow: hidden;

          svg {
            transition: transform 500ms var(--easing);

            &:nth-child(1) {
              position: absolute;
              left: 50%;
              top: 50%;
              transform: translate(-50%, -150%) rotate(180deg);
            }

            &:nth-child(2) {
              transform: rotate(90deg);
            }
          }
        }

        &:hover {
          &::after {
            transform: translateY(0);
          }
        }

        &:focus-visible {
          border-radius: 0.125rem;
          outline-offset: -2px;
        }
        &[aria-current='true'] {
          color: var(--primary-800);
          text-shadow:
            0 0 1px var(--primary-800),
            0 0 1px var(--primary-800);

          &::before {
            opacity: 1;
            transform: translateX(0);
          }

          .icon {
            svg {
              &:nth-child(1) {
                transform: translate(-50%, -50%) rotate(180deg);
              }

              &:nth-child(2) {
                transform: translateY(100%) rotate(90deg);
              }
            }
          }

          + ul {
            display: block;
          }
        }
      }
    }

    .show-more {
      width: 100%;
      align-items: center;
      justify-content: center;
      background-color: var(--neutral-300, #ede6de);
      padding: 0.25rem 1rem;
      gap: 0.25rem;
      min-height: 2.75rem;
      display: none;

      span {
        transition: transform 250ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
      }

      .icon {
        display: grid;
        place-content: center;
        position: relative;
        overflow: hidden;

        svg {
          transition: transform 350ms var(--easing);
          &:nth-of-type(1) {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -150%) scale(0.5);
          }
        }
      }

      &:hover {
        .icon {
          svg {
            &:nth-of-type(1) {
              transform: translate(-50%, -50%) scale(1);
            }
            &:nth-of-type(2) {
              transform: translateY(100%);
            }
          }
        }
      }

      &:focus:not(:focus-visible) {
        span {
          transform: translateX(-4px);
        }
      }

      &:focus-visible {
        outline-offset: -2px;
      }
    }

    @media (max-width: 69.3125rem) {
      width: 100%;
      max-width: 48rem;
      position: static;
      grid-row: 1/2;
      .wrapper {
        background-color: var(--neutral-200, #f5f1ec);
        border-bottom: 2px solid;
        border-image: linear-gradient(
            to bottom,
            rgba(121, 141, 220, 0.6) 0%,
            rgba(231, 199, 143, 0.6) 25%,
            rgba(250, 116, 104, 0.6) 74%,
            rgba(121, 141, 220, 0.6) 100%
          )
          1 100%;
        .list {
          border-right: none;
          li {
            a {
              background-color: transparent;

              .icon {
                display: none;
              }
            }

            ul {
              display: block;
            }
          }
        }

        &[data-expanded='false'] {
          .list > li {
            &:not(:nth-child(1), &:nth-child(2), &:nth-child(3), &:nth-child(4)) {
              display: none;
            }
          }
        }
      }

      .show-more {
        display: flex;
      }
    }
  }
</style>

<script>
  document.querySelectorAll<HTMLDivElement>('.TableOfContent')?.forEach((nav) => {
    const contentBody = nav.closest('.content')?.querySelector('.content-body')
    const showMore = nav.querySelector('.show-more')! as HTMLButtonElement
    const wrapper = nav.querySelector('.wrapper')! as HTMLDivElement
    showMore.addEventListener('click', () => {
      wrapper.dataset.expanded = wrapper.dataset.expanded === 'true' ? 'false' : 'true'
      showMore.querySelector('span')!.textContent =
        wrapper.dataset.expanded === 'true'
          ? showMore.getAttribute('data-show-less')
          : showMore.getAttribute('data-show-more')
    })

    if (!contentBody) {
      throw new Error('It seems that .content-body is not present in the .content, where it is supposed to be.')
    }
    const navLinks = nav.querySelectorAll('a')
    const headings = Array.from(contentBody.querySelectorAll(':scope > h2, :scope > h3'))
    function updateActiveHeading() {
      const triggerPoint = 124
      const currentHeading = headings.reduce((current, heading) => {
        const headingTop = heading.getBoundingClientRect().top
        if (headingTop <= triggerPoint) return heading
        return current
      }, headings[0])
      navLinks.forEach((link) => link.setAttribute('aria-current', 'false'))
      if (currentHeading) {
        const id = currentHeading.getAttribute('id')
        nav.querySelector(`a[href="#${id}"]`)?.setAttribute('aria-current', 'true')
      }
    }
    window.addEventListener('scroll', () => requestAnimationFrame(updateActiveHeading))
    updateActiveHeading()
  })
</script>
