---
import type { Language } from '@/src/global/languages'
import PortableText, { PortableTextQuery, type PortableTextValue } from '../../portable-text'
import Image, { ImageDataQuery, type ImageDataProps } from '../../image'
import imageToInlineSvg from '@/src/utils/image-to-inline-svg'
import { translateDate } from '@/src/utils/translate-date'
import RatingBox from '../../RatingBox'
import PopupWindow from '../../PopupWindow/index.astro'
import Button from '../../Button'
import TestimonialsPopup from '../../TestimonialsPopup/index.astro'
const language = (Astro.params.lang as Language) || 'pl'

const translations = {
  pl: {
    allReviews: 'Przeczytaj wszystkie opinie',
  },
  en: {
    allReviews: 'Read all reviews',
  },
}

const t = translations[language]

export const Testimonials_Query = `
  _type == "Testimonials" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    testimonials[] -> {
      name,
      position,
      company,
      "logo": logo.asset->url,
      image{
        ${ImageDataQuery('profileImage')}
      },
      date,
      ${PortableTextQuery('review')}
    },
    "googleData": *[_type == "global"][0].googleData {
      rating,
      ratingCount,
    },
  },
`

type Props = {
  node: {
    testimonials: {
      name: string
      position: string
      company: string
      logo: string
      image: {
        profileImage: ImageDataProps
      }
      date: string
      review: PortableTextValue
    }[]
    googleData: {
      rating: number
      ratingCount: number
    }
  }
}

const { node } = Astro.props

const logoSvgs = await Promise.all(
  node.testimonials.map(async ({ logo }) => (logo ? await imageToInlineSvg(logo) : null))
)
---

<section class="Testimonials">
  <ul>
    {
      node.testimonials.slice(0, 2).map(({ name, position, company, logo, image, review, date }, index) => (
        <li>
          <PortableText value={review} class="review" />
          <span class="name">{name}</span>
          <span class="position">
            {position} - {company}
          </span>
          {(image || logo) && (
            <div class="wrapper">
              {image ? <Image {...image.profileImage} sizes="36px" /> : <Fragment set:html={logoSvgs[index]} />}
            </div>
          )}
          <span class="date">{translateDate(date)}</span>
        </li>
      ))
    }
  </ul>
  <div class="action-row">
    <RatingBox {...node.googleData} />
    {
      node.testimonials.length > 2 && (
        <PopupWindow>
          <Button
            slot="open"
            className="all-reviews"
            theme="secondary"
          >{`${t.allReviews} (${node.testimonials.length})`}</Button>
          <TestimonialsPopup
            slot="content"
            testimonials={[...node.testimonials, ...node.testimonials, ...node.testimonials]}
            googleData={node.googleData}
          />
        </PopupWindow>
      )
    }
  </div>
</section>

<style lang="scss">
  .Testimonials {
    margin-bottom: 1.5rem;
    ul {
      li {
        margin-bottom: 0.375rem;
        padding: 1.25rem clamp(1.25rem, calc(1.25vw / 0.48), 1.5rem) 1.25rem 1.25rem;
        border-radius: clamp(0.5rem, calc(0.75vw / 0.48), 0.75rem);
        background-color: var(--neutral-200, #f5f1ec);
        display: grid;
        grid-template-columns: auto 10rem 1fr;
        grid-template-rows: auto auto 1fr;
        grid-template-areas:
          'w n r'
          'w p r'
          'w d r';

        &:last-child {
          margin-bottom: 1rem;
        }

        .review {
          align-self: start;
          margin-left: 1.25rem;
          grid-area: r;
        }

        .name {
          color: var(--primary-800, #45051c);
          font-size: var(--typography-body-xl, 1.125rem);
          font-weight: 700;
          line-height: 1.5;
          grid-area: n;
        }

        .position {
          grid-area: p;
        }

        .date {
          font-size: var(--typography-body-m, 0.875rem);
          line-height: 1.7;
          letter-spacing: -0.01em;
          align-self: end;
          margin-top: 0.5rem;
          grid-area: d;
        }

        .wrapper {
          align-self: start;
          width: 2.5rem;
          height: 2.5rem;
          border-radius: 50%;
          position: relative;
          padding: 0.125rem;
          z-index: 2;
          display: grid;
          place-items: center;
          margin-right: 0.75rem;
          margin-top: 0.125rem;
          grid-area: w;

          &::before,
          &::after {
            content: '';
            position: absolute;
            display: block;
            border-radius: 50%;
            inset: 0;
            background: var(--neutral-100, #faf7f7);
            z-index: -1;
          }

          &::before {
            inset: -2px;
            background: conic-gradient(
              from 135deg at 50% 50%,
              #798ddc 0deg,
              #e7c78f 90deg,
              #fa7468 266.40000343322754deg,
              #798ddc 360deg
            );
            z-index: -2;
          }
        }
      }
    }
    .action-row {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;
      flex-wrap: wrap;
      :global(> div:first-child) {
        background-color: var(--neutral-200, #f5f1ec);
      }
    }

    @media (max-width: 56.1875rem) {
      ul li {
        grid-template-columns: auto 1fr auto;
        grid-template-rows: auto auto 1fr;
        grid-template-areas:
          'r r r'
          'w n d'
          'w p d';

        .review {
          margin-left: 0;
          margin-bottom: clamp(1.5rem, calc(2vw / 0.48), 2rem);
        }
        .wrapper {
          margin-top: 0.375rem;
        }

        .date {
          margin-left: 0.5rem;
          margin-top: 0.125rem;
          align-self: start;
        }
      }
    }

    @media (max-width: 30.5625rem) {
      ul li {
        grid-template-rows: repeat(3, auto) 1fr;
        grid-template-columns: 1fr auto;
        grid-template-areas:
          'r r'
          'n w'
          'p w'
          'd w';

        .date,
        .name,
        .position {
          max-width: 15rem;
        }

        .date {
          margin-left: 0;
          margin-top: 0.75rem;
        }

        .wrapper {
          margin-right: 0;
          margin-left: 1rem;
        }
      }

      .action-row {
        flex-direction: column;

        :global(> div:first-child) {
          width: 100%;
          justify-content: space-between;
        }

        :global(> div:last-child) {
          width: 100%;

          :global(> button) {
            width: 100%;
            max-width: 100%;
            display: flex;
            justify-content: center;
          }
        }
      }
    }
  }
</style>
