---
import PortableText, { PortableTextQuery, type PortableTextValue } from '../../portable-text'
import Button from '../../Button'
import { getLangFromPath, type Language } from '@/src/global/languages'

export const NextSteps_Query = `
  _type == "NextSteps" => {
    ${PortableTextQuery('heading')}
    timelineItems[] {
      title,
      ${PortableTextQuery('description')}
    },
  },
`

type Props = {
  node: {
    heading: PortableTextValue
    timelineItems: {
      title: string
      description?: PortableTextValue
    }[]
  }
}

const lang = (getLangFromPath(Astro.url.pathname) as Language) || 'pl'

const translations = {
  pl: {
    addToCart: 'Wybierz do kompleksowej wyceny',
    viewCart: 'Przejd≈∫ do koszyka',
    cartUrl: '/pl/koszyk/',
  },
  en: {
    addToCart: 'Choose for a comprehensive estimate',
    viewCart: 'View in cart',
    cartUrl: '/en/cart/',
  },
}
const t = translations[lang]

const { node } = Astro.props as Props
---

<section class="NextSteps" data-translations={JSON.stringify(t)}>
  <PortableText value={node.heading} heading="h2" />
  <div class="timeline-wrapper">
    <ol>
      {
        node.timelineItems.map((item, index) => (
          <li>
            <div class="number">
              <div class="gradient-circle" />
              {index + 1}
            </div>
            <span class="title">{item.title}</span>
            {item.description && <PortableText value={item.description} class="description" />}
          </li>
        ))
      }
    </ol>
    <div class="line-wrapper">
      <div class="line"></div>
    </div>
  </div>

  <!-- Dynamic button that changes based on cart state -->
  <Button id="next-steps-cart-button" theme="primary" data-cart="false">
    {t.addToCart}
  </Button>
</section>

<style lang="scss">
  .NextSteps {
    padding: clamp(1rem, calc(1.5vw / 0.48), 1.5rem) clamp(0.75rem, calc(1.5vw / 0.48), 1.5rem)
      clamp(0.75rem, calc(1.5vw / 0.48), 1.5rem);
    background: var(--primary-800, #45051c);
    border-radius: clamp(1rem, calc(1.25vw / 0.48), 1.25rem);
    margin: clamp(3rem, calc(3.5vw / 0.48), 3.5rem) 0;

    :global(h2) {
      text-align: center;
      margin-bottom: clamp(1rem, calc(1.25vw / 0.48), 1.25rem);
      color: var(--neutral-400, #ffe4ca);
    }

    .timeline-wrapper {
      position: relative;
      padding: clamp(1rem, calc(1.25vw / 0.48), 1.25rem) clamp(0.75rem, calc(1vw / 0.48), 1rem)
        clamp(1.25rem, calc(2vw / 0.48), 2rem);
      margin-bottom: clamp(1rem, calc(1.5vw / 0.48), 1.5rem);
      border-radius: 1rem;
      background: var(--neutral-100, #faf7f7);
    }

    .line-wrapper {
      position: absolute;
      left: calc(1.25rem + clamp(0.75rem, calc(1vw / 0.48), 1rem));
      top: 2.5rem;
      bottom: 2.5rem;
      width: 2px;
      z-index: 1;

      .line {
        width: 100%;
        height: 100%;
        background: linear-gradient(
          to bottom,
          rgba(121, 141, 220) 0%,
          rgba(231, 199, 143) 25%,
          rgba(250, 116, 104) 74%,
          rgba(121, 141, 220) 100%
        );
        transform-origin: top;
        transform: scaleY(0);
        will-change: transform;
      }
    }

    ol {
      position: relative;
      z-index: 2;

      li {
        line-height: 1.5;
        display: grid;
        grid-template-columns: auto 1fr;
        grid-template-rows: auto 1fr;
        column-gap: 1rem;
        position: relative;

        &:not(:last-child) {
          margin-bottom: 1.25rem;
        }

        &:last-child {
          background-color: var(--neutral-100, #faf7f7);
        }

        .number {
          grid-column: 1/2;
          grid-row: 1/3;
          align-self: start;
          font-size: var(--typography-body-m, 0.875rem);
          line-height: 1.7;
          width: 2rem;
          height: 2rem;
          border-radius: 50%;
          position: relative;
          isolation: isolate;
          display: grid;
          place-items: center;
          margin: 0.25rem;
          margin-top: 0;
          z-index: 2;

          .gradient-circle {
            position: absolute;
            inset: -2px;
            border-radius: 50%;
            background: conic-gradient(
              from 135deg at 50% 50%,
              #798ddc 0deg,
              #e7c78f 90deg,
              #fa7468 266.40000343322754deg,
              #798ddc 360deg
            );
            z-index: -2;
          }

          &::before {
            content: '';
            inset: -2px;
            position: absolute;
            z-index: -1;
            transform: scale(1);
            transform-origin: center;
            background-color: var(--neutral-200, #faf7f7);
            border-radius: 50%;
            transition: transform 500ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
          }
        }

        &[data-active='true'] {
          .number::before {
            transform: scale(0.9);
          }
        }
        &:first-child {
          .number::before {
            transform: scale(0.9);
          }
        }

        .title {
          grid-column: 2/3;
          color: var(--primary-800, #45051c);
          font-size: var(--typography-body-xl, 1.125rem);
          grid-row: 1/2;
          font-weight: 700;
          letter-spacing: -0.03em;
        }

        .description {
          grid-column: 2/3;
          grid-row: 2/3;
          font-size: var(--typography-body-l, 1rem);
        }

        :global(.link) {
          color: var(--primary-800, #45051c);
        }
      }
    }

    :global(> button) {
      max-width: 100%;
      width: 100%;

      :global(span) {
        margin: 0 auto;
        padding-right: 1.75rem;
      }

      // Cart button state styles
    }
  }
</style>

<script>
  const viewportPointPercentage = 0.66
  document.querySelectorAll<HTMLDivElement>('.NextSteps').forEach((section) => {
    const animateLine = () => {
      const lineWrapper = section.querySelector<HTMLDivElement>('.line-wrapper')!
      const line = lineWrapper.querySelector<HTMLDivElement>('.line')!

      const updateLineScale = () => {
        const wrapperRect = lineWrapper.getBoundingClientRect()
        const viewportPoint = window.innerHeight * viewportPointPercentage

        const start = wrapperRect.top - viewportPoint
        const end = wrapperRect.bottom - viewportPoint
        const total = end - start
        const current = -start

        const progress = Math.max(0, Math.min(1, current / total))
        line.style.transform = `scaleY(${progress})`
      }
      updateLineScale()

      let rafId: number
      const onScroll = () => {
        if (rafId) cancelAnimationFrame(rafId)
        rafId = requestAnimationFrame(updateLineScale)
      }
      window.addEventListener('scroll', onScroll, { passive: true })
    }
    animateLine()

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          entry.target.setAttribute('data-active', entry.isIntersecting.toString())
        })
      },
      {
        threshold: 0,
        rootMargin: `0px 0px -${100 - viewportPointPercentage * 100}% 0px`,
      }
    )
    section.querySelectorAll('li').forEach((item) => observer.observe(item))
  })
</script>

<script>
  import { addToCart, isInCart } from '@/src/store/cart'
  import { dispatchCartUpdate, dispatchAddonsPopup, listenToCartUpdates } from '@/src/utils/events'
  import { trackEvent } from '@/src/pages/api/analytics/track-event'

  // Initialize cart functionality for each NextSteps section
  document.querySelectorAll<HTMLElement>('.NextSteps').forEach((section) => {
    const button = section.querySelector('#next-steps-cart-button') as HTMLButtonElement
    if (!button) return

    // Get item data from the parent article element
    const articleElement = section.closest('article[data-item-id]') as HTMLElement
    if (!articleElement) return

    const itemId = articleElement.dataset.itemId
    const itemType = articleElement.dataset.itemType as 'hotels' | 'activities'
    const itemName = articleElement.dataset.itemName || ''
    const hasAddons = articleElement.dataset.hasAddons === 'true'
    const requiresAddons = articleElement.dataset.requiresAddons === 'true'
    const addonsChoice = articleElement.dataset.addonsChoice || 'unlimited'
    const translations = JSON.parse(section.dataset.translations || '{}')

    // Skip if essential data is missing
    if (!itemId || !itemType) return

    // Function to update button state based on cart status
    function updateButtonState() {
      if (!itemId || !itemType) return

      const inCart = isInCart(itemId, itemType)
      const buttonSpan = button.querySelector('span')

      if (inCart) {
        // Item is in cart - make button redirect to cart
        button.setAttribute('data-cart', 'true')
        button.removeAttribute('data-remove-trigger')

        // Convert button to link behavior
        button.setAttribute('data-href', translations.cartUrl)
        if (buttonSpan) {
          buttonSpan.textContent = translations.viewCart
        }

        // Remove any existing click handlers and add redirect handler
        button.onclick = (e) => {
          e.preventDefault()
          window.location.href = translations.cartUrl
        }
      } else {
        // Item is not in cart - make button add to cart
        button.setAttribute('data-cart', 'false')
        button.removeAttribute('data-href')

        if (buttonSpan) {
          buttonSpan.textContent = translations.addToCart
        }

        // Add click handler for adding to cart
        button.onclick = (e) => {
          e.preventDefault()
          handleAddToCart()
        }
      }
    }

    // Function to handle adding item to cart
    function handleAddToCart() {
      if (!itemId || !itemType) return

      const itemPrice = document.querySelector('.Hero')?.getAttribute('data-price') || 200

      // If item requires addons, open popup first without adding to cart
      if (requiresAddons) {
        // Open addon selection popup without adding to cart immediately
        dispatchAddonsPopup({
          itemId,
          itemType,
          hasAddons,
          isEditing: false,
          minOneAddon: requiresAddons,
          requiresAddons,
          addonsChoice,
          name: itemName,
        })
      } else {
        // Add to cart immediately if no addons required
        addToCart({
          id: itemId,
          type: itemType,
          addOns: [],
        })

        // Track the add to cart event
        trackEvent({
          ga: {
            event_name: 'add_to_cart',
            params: {
              currency: 'PLN',
              value: itemPrice,
              items: [
                {
                  item_id: itemId,
                  item_name: itemName,
                },
              ],
            },
          },
          meta: {
            event_name: 'AddToCart',
            content_name: itemName,
            params: {
              content_ids: [itemId],
            },
          },
        })

        // Always open addons popup for confirmation, regardless of whether addons exist
        dispatchAddonsPopup({
          itemId,
          itemType,
          hasAddons,
          isEditing: false,
          minOneAddon: false,
          requiresAddons: false,
          addonsChoice,
          name: itemName,
        })

        // Update button state
        updateButtonState()

        // Dispatch cart update event
        dispatchCartUpdate(itemId, itemType, 'add')

        // Also dispatch addons-popup-confirmed event for the badge animation
        document.dispatchEvent(
          new CustomEvent('addons-popup-confirmed', {
            detail: {
              itemId,
              itemType,
              addons: [],
            },
          })
        )
      }
    }

    // Listen for cart updates from other components
    listenToCartUpdates(() => {
      updateButtonState()
    })

    // Initialize button state on page load
    updateButtonState()

    // Also listen for specific cart events
    document.addEventListener('cart-updated', (event: Event) => {
      const customEvent = event as CustomEvent
      const detail = customEvent.detail as any
      if (detail.itemId === itemId && detail.itemType === itemType) {
        updateButtonState()
      }
    })

    document.addEventListener('addons-popup-confirmed', (event: Event) => {
      const customEvent = event as CustomEvent
      const detail = customEvent.detail as any
      if (detail.itemId === itemId && detail.itemType === itemType) {
        updateButtonState()
      }
    })
  })
</script>
