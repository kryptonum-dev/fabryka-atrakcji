---
import PortableText, { PortableTextQuery, type PortableTextValue } from '../../portable-text'

export const Timeline_Query = `
  _type == "Timeline" => {
    ${PortableTextQuery('heading')}
    timelineItems[] {
      title,
      description,
      duration,
    },
  },
`
type Props = {
  node: {
    heading?: PortableTextValue
    timelineItems: {
      title: string
      description?: string
      duration: number
    }[]
  }
}

const { node } = Astro.props
---

<section class="Timeline">
  {node.heading && <PortableText value={node.heading} class="heading" />}
  <div class="timeline-wrapper">
    <ol>
      {
        node.timelineItems.map((item, index) => (
          <li>
            <div class="number">
              <div class="gradient-circle" />
              {index + 1}
            </div>
            <span class="title">{item.title}</span>
            {item.description && <p class="description">{item.description}</p>}
            <time class="duration">{item.duration} min</time>
          </li>
        ))
      }
    </ol>
    <div class="line-wrapper">
      <div class="line"></div>
    </div>
  </div>
</section>

<style lang="scss">
  .Timeline {
    background-color: var(--neutral-200, #f5f1ec);
    padding: clamp(1rem, calc(1.25vw / 0.48), 1.25rem);
    border-radius: 0.75rem;
    margin-bottom: 1rem;

    .heading {
      color: var(--primary-800, #45051c);
      font-size: var(--typography-body-xl, 1.125rem);
      font-weight: 700;
      line-height: 1.5;
      letter-spacing: -0.03em;
      margin-bottom: 1.25rem;
    }

    .timeline-wrapper {
      position: relative;
    }

    .line-wrapper {
      position: absolute;
      left: calc(1rem + 0.25rem);
      top: 2.25rem;
      bottom: 2.5rem;
      width: 2px;
      z-index: 1;

      .line {
        width: 100%;
        height: 100%;
        background: linear-gradient(
          to bottom,
          rgba(121, 141, 220) 0%,
          rgba(231, 199, 143) 25%,
          rgba(250, 116, 104) 74%,
          rgba(121, 141, 220) 100%
        );
        transform-origin: top;
        transform: scaleY(0);
        will-change: transform;
      }
    }

    ol {
      position: relative;
      z-index: 2;

      li {
        line-height: 1.5;
        display: grid;
        grid-template-columns: auto 1fr auto;
        grid-template-rows: auto 1fr;
        column-gap: 1rem;
        position: relative;

        &:not(:last-child) {
          margin-bottom: 1.25rem;
        }

        &:last-child {
          background-color: var(--neutral-200, #faf7f7);
        }

        .number {
          grid-column: 1/2;
          grid-row: 1/3;
          align-self: start;
          font-size: var(--typography-body-m, 0.875rem);
          line-height: 1.7;
          width: 2rem;
          height: 2rem;
          border-radius: 50%;
          position: relative;
          isolation: isolate;
          display: grid;
          place-items: center;
          margin: 0.25rem;
          margin-top: 0;
          z-index: 2;

          .gradient-circle {
            position: absolute;
            inset: -2px;
            border-radius: 50%;
            background: conic-gradient(
              from 135deg at 50% 50%,
              #798ddc 0deg,
              #e7c78f 90deg,
              #fa7468 266.40000343322754deg,
              #798ddc 360deg
            );
            z-index: -2;
          }

          &::before {
            content: '';
            inset: -2px;
            position: absolute;
            z-index: -1;
            transform: scale(1);
            transform-origin: center;
            background-color: var(--neutral-100, #faf7f7);
            border-radius: 50%;
            transition: transform 500ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
          }
        }

        &[data-active='true'] {
          .number::before {
            transform: scale(0.9);
          }
        }
        &:first-child {
          .number::before {
            transform: scale(0.9);
          }
        }

        .title {
          grid-column: 2/3;
          color: var(--primary-800, #45051c);
          font-size: var(--typography-body-xl, 1.125rem);
          grid-row: 1/2;
        }

        .description {
          grid-column: 2/3;
          grid-row: 2/3;
          font-size: var(--typography-body-l, 1rem);
        }

        .duration {
          grid-column: 3/4;
          font-size: var(--typography-body-xl, 1.125rem);
          grid-row: 1/3;
          align-self: start;
        }
      }
    }
  }
</style>

<script>
  const viewportPointPercentage = 0.66
  document.querySelectorAll<HTMLDivElement>('.Timeline').forEach((section) => {
    const animateLine = () => {
      const lineWrapper = section.querySelector<HTMLDivElement>('.line-wrapper')!
      const line = lineWrapper.querySelector<HTMLDivElement>('.line')!

      const updateLineScale = () => {
        const wrapperRect = lineWrapper.getBoundingClientRect()
        const viewportPoint = window.innerHeight * viewportPointPercentage

        const start = wrapperRect.top - viewportPoint
        const end = wrapperRect.bottom - viewportPoint
        const total = end - start
        const current = -start

        const progress = Math.max(0, Math.min(1, current / total))
        line.style.transform = `scaleY(${progress})`
      }
      updateLineScale()

      let rafId: number
      const onScroll = () => {
        if (rafId) cancelAnimationFrame(rafId)
        rafId = requestAnimationFrame(updateLineScale)
      }
      window.addEventListener('scroll', onScroll, { passive: true })
    }
    animateLine()

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          entry.target.setAttribute('data-active', entry.isIntersecting.toString())
        })
      },
      {
        threshold: 0,
        rootMargin: `0px 0px -${100 - viewportPointPercentage * 100}% 0px`,
      }
    )
    section.querySelectorAll('li').forEach((item) => observer.observe(item))
  })
</script>
