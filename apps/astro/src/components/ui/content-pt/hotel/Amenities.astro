---
import PortableText, { PortableTextQuery, type PortableTextValue } from '../../portable-text'
import Button from '../../Button'
import PopupWindow from '../../PopupWindow/index.astro'
import CloseButton from '../../PopupWindow/CloseButton.astro'
import { getLangFromPath, type Language } from '@/src/global/languages'

const lang = (getLangFromPath(Astro.url.pathname) as Language) || 'pl'

const translations = {
  pl: {
    showAll: 'Zobacz wszystkie udogodnienia',
    popupTitle: '<h2>Komfort i <strong>wygoda w ka≈ºdym detalu</strong></h2>',
  },
  en: {
    showAll: 'See all amenities',
    popupTitle: '<h2>Comfort and <strong>convenience in every detail</strong></h2>',
  },
}

const t = translations[lang]

export const Amenities_Query = `
  _type == "Amenities" => {
    ${PortableTextQuery('heading')}
    amenityGroups[] {
      heading,
      list[]
    },
  },
`

interface Props {
  node: {
    heading: PortableTextValue
    amenityGroups: {
      heading: PortableTextValue
      list: string[]
    }[]
  }
}

const { node } = Astro.props
---

<section class="Amenities">
  <PortableText value={node.heading} heading="h2" />
  <ul class="list">
    {
      node.amenityGroups.slice(0, 3).map((group) => (
        <li class="item">
          <h3 class="heading">{group.heading}</h3>
          <ul class="group-list">
            {group.list.map((item) => (
              <li class="group-item">{item}</li>
            ))}
          </ul>
        </li>
      ))
    }
  </ul>

  <PopupWindow>
    <Button slot="open" theme="secondary">
      {t.showAll} ({node.amenityGroups.reduce((acc, group) => acc + group.list.length, 0)})
    </Button>

    <div slot="content" class="amenities-popup">
      <Fragment set:html={t.popupTitle} />
      <CloseButton />
      <ul class="content">
        {
          node.amenityGroups.map((group) => (
            <li class="group">
              <h3 class="heading">{group.heading}</h3>
              <ul class="group-list">
                {group.list.map((item) => (
                  <li class="group-item">{item}</li>
                ))}
              </ul>
            </li>
          ))
        }
      </ul>
    </div>
  </PopupWindow>
</section>

<style lang="scss">
  .Amenities {
    margin-bottom: clamp(3rem, calc(3.5vw / 0.48), 3.5rem);
    :global(> h2) {
      margin: clamp(3rem, calc(3.25vw / 0.48), 3.25rem) 0 1.5rem;
    }

    .list {
      margin-bottom: 1.5rem !important;
      .item {
        margin-bottom: clamp(1.25rem, calc(1.5vw / 0.48), 1.5rem) !important;
      }
    }

    .heading {
      color: var(--primary-800, #45051c);
      font-weight: 700;
      line-height: 1.5;
      letter-spacing: -0.03em;
      margin-bottom: clamp(0.625rem, calc(0.75vw / 0.48), 0.75rem);
      font-size: var(--typography-body-xl, 1.25rem);
      margin-bottom: clamp(0.625rem, calc(0.75vw / 0.48), 0.75rem);
    }

    .group-item {
      padding-left: 1.625rem;
      position: relative;
      margin-bottom: 0.5rem !important;

      font-size: var(--typography-body-l, 1rem) !important;
      &::before {
        content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16' fill='none'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M14.6693 8.00065C14.6693 11.6825 11.6845 14.6673 8.0026 14.6673C4.32071 14.6673 1.33594 11.6825 1.33594 8.00065C1.33594 4.31875 4.32071 1.33398 8.0026 1.33398C11.6845 1.33398 14.6693 4.31875 14.6693 8.00065ZM10.6895 5.98043C10.8848 6.17569 10.8848 6.49228 10.6895 6.68754L7.35616 10.0209C7.1609 10.2161 6.84431 10.2161 6.64905 10.0209L5.31572 8.68754C5.12046 8.49228 5.12046 8.17569 5.31572 7.98043C5.51098 7.78517 5.82756 7.78517 6.02282 7.98043L7.0026 8.96021L8.49249 7.47032L9.98238 5.98043C10.1776 5.78517 10.4942 5.78517 10.6895 5.98043Z' fill='%23F67258'/%3E%3C/svg%3E");
        position: absolute;
        left: 0;
        top: 2px;
      }
    }

    .amenities-popup {
      padding: 2.5rem;
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 2rem 1rem;
      max-width: 68.5rem;
      max-height: calc(100dvh - 6rem);
      width: calc(100vw - var(--pageMargin) * 2);
      overflow: hidden;

      :global(.CloseButton) {
        margin-top: -8px;
      }

      .content {
        max-height: 22rem;
        overflow-y: auto;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-column: 1/3;
        padding-right: 1.5rem;

        gap: clamp(1.5rem, calc(2vw / 0.48), 3rem);

        &::-webkit-scrollbar {
          width: 0.25rem;
        }

        &::-webkit-scrollbar-track {
          background: var(--neutral-300, #ede6de);
          border-radius: 16px;
        }

        &::-webkit-scrollbar-thumb {
          background: var(--primary-400, #74535e);
          border-radius: 16px;
        }

        &::-webkit-scrollbar-thumb:hover {
          background: var(--primary-700, #600d2a);
        }
      }
    }

    @media (max-width: 56.1875rem) {
      :global(.Wrapper) {
        .amenities-popup {
          padding: clamp(1.5rem, calc(3.5vw / 0.48), 3.5rem) clamp(1rem, calc(3.5vw / 0.48), 3.5rem);
          .content {
            grid-template-columns: 1fr;
            max-height: 32rem;
          }
        }
      }
    }

    @media (max-width: 31.1875rem) {
      :global(.Wrapper) {
        :global(> button) {
          width: 100%;
          max-width: 100%;
          justify-content: center;
        }
        .amenities-popup {
          padding: 1.5rem 1rem 0;
          gap: 1rem;

          .content {
            padding-bottom: 1rem;
          }
        }
      }
    }
  }
</style>
