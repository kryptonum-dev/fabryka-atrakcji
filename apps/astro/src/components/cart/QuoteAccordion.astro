---
import { formatCurrency } from '@/src/utils/format-currency'

type PricingType = {
  totalPrice: number
  nettoTotalPrice: number
  pricingModel?: 'fixed' | 'per_unit' | 'threshold' | 'individual'
  isTransport?: boolean
}

type AddonType = {
  name: string
  count: number
  pricing: PricingType
}

type HotelType = {
  name: string
  slug: string
  maxPeople: number
  pricing: {
    finalPrice: number
    nettoFinalPrice: number
    participantCount: number
    exceedsMaxPeople: boolean
  }
  addons?: AddonType[]
}

type ActivityType = {
  name: string
  slug: string
  participantsCount: {
    min: number
    max: number
  }
  pricing: {
    finalPrice: number
    nettoFinalPrice: number
    participantCount: number
    exceedsMaxPeople: boolean
    belowMinPeople: boolean
  }
  addons?: AddonType[]
}

type TransportType = {
  distance: number
  pricing: {
    basePrice: number
    distancePrice: number
    totalPrice: number
    nettoTotalPrice: number
    pricePerKm: number
  }
  transportAddressNotFound?: boolean
  noTransportAddress?: boolean
  hotelNoAddress?: boolean
  hotelAddressNotFound?: boolean
  bothAddressesNotFound?: boolean
  activityNoAddress?: boolean
}

type QuoteItem = {
  _type: string
  _key: string
  type: 'hotel' | 'activity'
  totalPrice: number
  totalNettoPrice: number
  hotels?: HotelType[]
  activities?: ActivityType[]
  transport?: TransportType
  extras?: AddonType[]
}

type Props = {
  item: QuoteItem
  index: number
  lang: string
  isFirst?: boolean
}

const { item, index, lang, isFirst = false } = Astro.props

const translations = {
  pl: {
    additionalPerson: 'Każda dodatkowa osoba',
    extras: 'dodatki',
    transport: 'Transport w obie strony',
    withAddons: 'z dodatkami',
    distance: 'km',
    noDistance: 'Brak informacji o kilometrach',
    addressNotFound: 'Nie znaleziono adresu',
    noAddress: 'Brak adresu',
    people: 'osób',
    addons: 'Dodatki',
    from: 'od',
    to: 'do',
    total: 'Razem',
    hotelAlert: 'Wycena hotelu dla',
    activityAlertMin: 'Wycena atrakcji dla',
    activityAlertMax: 'Wycena atrakcji dla',
    person: 'osób',
    whole: 'całość',
  },
  en: {
    additionalPerson: 'Each additional person',
    extras: 'extras',
    transport: 'Transport w obie strony',
    withAddons: 'with add-ons',
    distance: 'km',
    noDistance: 'No information about kilometers',
    addressNotFound: 'Address not found',
    noAddress: 'No address',
    people: 'people',
    addons: 'Add-ons',
    from: 'from',
    to: 'to',
    total: 'Total',
    hotelAlert: 'Hotel quote for',
    activityAlertMin: 'Activity quote for',
    activityAlertMax: 'Activity quote for',
    person: 'people',
    whole: 'whole',
  },
}

const t = translations[lang as keyof typeof translations] || translations.pl

// Determine accordion title based on item contents
let accordionTitle = ''
const hasHotels = item.hotels && item.hotels.length > 0
const hasActivities = item.activities && item.activities.length > 0
const hasExtras = item.extras && item.extras.length > 0
const hotelsHaveAddons = hasHotels && item.hotels?.some((hotel) => hotel.addons && hotel.addons.length > 0)
const activitiesHaveAddons =
  hasActivities && item.activities?.some((activity) => activity.addons && activity.addons.length > 0)

const getAccordionTitle = () => {
  const type = {
    hotels: hasHotels,
    activities: hasActivities,
    extras: hasExtras || hotelsHaveAddons || activitiesHaveAddons,
  }

  switch (true) {
    case type.hotels && type.activities:
    case type.hotels && type.extras:
      return `${item.hotels?.[0].name} + ${t.extras}`
    case type.hotels:
      return item.hotels?.[0].name || ''
    case type.activities && type.extras:
      return `${item.activities?.[0].name} + ${t.extras}`
    case type.activities:
      return item.activities?.[0].name || ''
    default:
      return ''
  }
}

accordionTitle = getAccordionTitle()

// Format price
const totalPrice = item.totalPrice || 0
const formattedPrice = formatCurrency(totalPrice, lang)
---

<details class="quote-accordion" data-index={index} data-expanded={isFirst ? 'true' : 'false'} open={isFirst}>
  <summary class="accordion-summary">
    <h3 class="accordion-title">{accordionTitle}</h3>
    {
      hasHotels && item.hotels?.some((hotel) => hotel.pricing.exceedsMaxPeople) && (
        <div class="info-alert">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
            <path
              fill="#F67258"
              fill-rule="evenodd"
              d="M5.229 2.535C6.58 1.734 7.257 1.333 8 1.333c.743 0 1.419.4 2.771 1.202l.458.27c1.352.801 2.028 1.202 2.4 1.862.371.66.371 1.46.371 3.062v.542c0 1.602 0 2.403-.371 3.062-.372.66-1.048 1.06-2.4 1.861l-.458.271C9.42 14.266 8.743 14.667 8 14.667c-.743 0-1.419-.4-2.771-1.202l-.458-.27c-1.352-.802-2.028-1.202-2.4-1.862C2 10.673 2 9.873 2 8.271v-.542c0-1.602 0-2.403.371-3.062.372-.66 1.048-1.06 2.4-1.861l.458-.271Zm3.438 8.132a.667.667 0 1 1-1.334 0 .667.667 0 0 1 1.334 0ZM8 4.167a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0v-4a.5.5 0 0 1 .5-.5Z"
              clip-rule="evenodd"
            />
          </svg>
          <span>
            {t.hotelAlert} {item.hotels[0].pricing.participantCount} {t.person}
          </span>
        </div>
      )
    }
    {
      !hasHotels &&
        hasActivities &&
        item.activities?.some((activity) => activity.pricing.exceedsMaxPeople || activity.pricing.belowMinPeople) && (
          <div class="info-alert">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
              <path
                fill="#F67258"
                fill-rule="evenodd"
                d="M5.229 2.535C6.58 1.734 7.257 1.333 8 1.333c.743 0 1.419.4 2.771 1.202l.458.27c1.352.801 2.028 1.202 2.4 1.862.371.66.371 1.46.371 3.062v.542c0 1.602 0 2.403-.371 3.062-.372.66-1.048 1.06-2.4 1.861l-.458.271C9.42 14.266 8.743 14.667 8 14.667c-.743 0-1.419-.4-2.771-1.202l-.458-.27c-1.352-.802-2.028-1.202-2.4-1.862C2 10.673 2 9.873 2 8.271v-.542c0-1.602 0-2.403.371-3.062.372-.66 1.048-1.06 2.4-1.861l.458-.271Zm3.438 8.132a.667.667 0 1 1-1.334 0 .667.667 0 0 1 1.334 0ZM8 4.167a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0v-4a.5.5 0 0 1 .5-.5Z"
                clip-rule="evenodd"
              />
            </svg>
            <span>
              {(() => {
                const activity = item.activities?.find(
                  (act) => act.pricing.belowMinPeople || act.pricing.exceedsMaxPeople
                )
                if (!activity) return null
                return activity.pricing.belowMinPeople
                  ? `${t.activityAlertMin} ${activity.pricing.participantCount} ${t.person}`
                  : `${t.activityAlertMax} ${activity.pricing.participantCount} ${t.person}`
              })()}
            </span>
          </div>
        )
    }
    <div class="arrow-icon">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none"
        ><path stroke="#74535E" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m4 6 4 4 4-4"
        ></path></svg
      >
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none"
        ><path stroke="#74535E" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m4 6 4 4 4-4"
        ></path></svg
      >
    </div>
    <div class="pricing-row">
      <span class="text">({t.whole})</span>
      <strong class="price" data-brutto-price={item.totalPrice} data-netto-price={item.totalNettoPrice}>
        {formattedPrice}
      </strong>
    </div>
  </summary>
  <div class="content">
    <ul class="item-list">
      {
        hasHotels &&
          item.hotels?.map((hotel) => (
            <li class="item hotel-item">
              {hotel.addons && hotel.addons.length > 0 ? (
                <details class="nested-details">
                  <summary>
                    <div class="item-details">
                      <span class="item-name">{`${hotel.name} ${t.withAddons}`}</span>
                      <div class="toggle-addons">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
                          <path
                            stroke="#74535E"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="1.5"
                            d="m4 6 4 4 4-4"
                          />
                        </svg>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
                          <path
                            stroke="#74535E"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="1.5"
                            d="m4 6 4 4 4-4"
                          />
                        </svg>
                      </div>
                    </div>
                    <div class="item-pricing">
                      <span
                        class="item-price"
                        data-brutto-price={hotel.pricing.finalPrice}
                        data-netto-price={hotel.pricing.nettoFinalPrice}
                      >
                        {formatCurrency(hotel.pricing.finalPrice, lang)}
                      </span>
                    </div>
                  </summary>
                  <div class="addons-list">
                    <ul>
                      {hotel.addons.map((addon) => (
                        <li class="addon-item">
                          <span class="addon-name">
                            {addon.count > 1 && <strong>{addon.count}X</strong>} {addon.name}
                          </span>
                          <div class="addon-pricing">
                            <span
                              class="addon-price"
                              data-brutto-price={addon.pricing.totalPrice}
                              data-netto-price={addon.pricing.nettoTotalPrice}
                            >
                              {formatCurrency(addon.pricing.totalPrice, lang)}
                            </span>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </div>
                </details>
              ) : (
                <>
                  <div class="item-details">
                    <span class="item-name">{hotel.name}</span>
                  </div>
                  <div class="item-pricing">
                    <span
                      class="item-price"
                      data-brutto-price={hotel.pricing.finalPrice}
                      data-netto-price={hotel.pricing.nettoFinalPrice}
                    >
                      {formatCurrency(hotel.pricing.finalPrice, lang)}
                    </span>
                  </div>
                </>
              )}
            </li>
          ))
      }

      {
        hasActivities &&
          item.activities?.map((activity) => (
            <li class="item activity-item">
              {activity.addons && activity.addons.length > 0 ? (
                <details class="nested-details">
                  <summary>
                    <div class="item-details">
                      <span class="item-name">{`${activity.name} ${t.withAddons}`}</span>
                      {hasHotels && activity.pricing.belowMinPeople && (
                        <div class="info-alert-inside">
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
                            <path
                              fill="#F67258"
                              fill-rule="evenodd"
                              d="M5.229 2.535C6.58 1.734 7.257 1.333 8 1.333c.743 0 1.419.4 2.771 1.202l.458.27c1.352.801 2.028 1.202 2.4 1.862.371.66.371 1.46.371 3.062v.542c0 1.602 0 2.403-.371 3.062-.372.66-1.048 1.06-2.4 1.861l-.458.271C9.42 14.266 8.743 14.667 8 14.667c-.743 0-1.419-.4-2.771-1.202l-.458-.27c-1.352-.802-2.028-1.202-2.4-1.862C2 10.673 2 9.873 2 8.271v-.542c0-1.602 0-2.403.371-3.062.372-.66 1.048-1.06 2.4-1.861l.458-.271Zm3.438 8.132a.667.667 0 1 1-1.334 0 .667.667 0 0 1 1.334 0ZM8 4.167a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0v-4a.5.5 0 0 1 .5-.5Z"
                              clip-rule="evenodd"
                            />
                          </svg>
                          <span>
                            {t.activityAlertMin} {activity.participantsCount.min} {t.person}
                          </span>
                        </div>
                      )}
                      {hasHotels && activity.pricing.exceedsMaxPeople && (
                        <div class="info-alert-inside">
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
                            <path
                              fill="#F67258"
                              fill-rule="evenodd"
                              d="M5.229 2.535C6.58 1.734 7.257 1.333 8 1.333c.743 0 1.419.4 2.771 1.202l.458.27c1.352.801 2.028 1.202 2.4 1.862.371.66.371 1.46.371 3.062v.542c0 1.602 0 2.403-.371 3.062-.372.66-1.048 1.06-2.4 1.861l-.458.271C9.42 14.266 8.743 14.667 8 14.667c-.743 0-1.419-.4-2.771-1.202l-.458-.27c-1.352-.802-2.028-1.202-2.4-1.862C2 10.673 2 9.873 2 8.271v-.542c0-1.602 0-2.403.371-3.062.372-.66 1.048-1.06 2.4-1.861l.458-.271Zm3.438 8.132a.667.667 0 1 1-1.334 0 .667.667 0 0 1 1.334 0ZM8 4.167a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0v-4a.5.5 0 0 1 .5-.5Z"
                              clip-rule="evenodd"
                            />
                          </svg>
                          <span>
                            {t.activityAlertMax} {activity.participantsCount.max} {t.person}
                          </span>
                        </div>
                      )}
                      <div class="toggle-addons">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
                          <path
                            stroke="#74535E"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="1.5"
                            d="m4 6 4 4 4-4"
                          />
                        </svg>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
                          <path
                            stroke="#74535E"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="1.5"
                            d="m4 6 4 4 4-4"
                          />
                        </svg>
                      </div>
                    </div>
                    <div class="item-pricing">
                      <span
                        class="item-price"
                        data-brutto-price={activity.pricing.finalPrice}
                        data-netto-price={activity.pricing.nettoFinalPrice}
                      >
                        {formatCurrency(activity.pricing.finalPrice, lang)}
                      </span>
                    </div>
                  </summary>
                  <div class="addons-list">
                    <ul>
                      {activity.addons.map((addon) => (
                        <li class="addon-item">
                          <span class="addon-name">
                            {addon.count > 1 && `${addon.count} x`} {addon.name}
                          </span>
                          <div class="addon-pricing">
                            <span
                              class="addon-price"
                              data-brutto-price={addon.pricing.totalPrice}
                              data-netto-price={addon.pricing.nettoTotalPrice}
                            >
                              {formatCurrency(addon.pricing.totalPrice, lang)}
                            </span>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </div>
                </details>
              ) : (
                <>
                  <div class="item-details">
                    <span class="item-name">{activity.name}</span>
                    {hasHotels && activity.pricing.belowMinPeople && (
                      <div class="info-alert-inside">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
                          <path
                            fill="#F67258"
                            fill-rule="evenodd"
                            d="M5.229 2.535C6.58 1.734 7.257 1.333 8 1.333c.743 0 1.419.4 2.771 1.202l.458.27c1.352.801 2.028 1.202 2.4 1.862.371.66.371 1.46.371 3.062v.542c0 1.602 0 2.403-.371 3.062-.372.66-1.048 1.06-2.4 1.861l-.458.271C9.42 14.266 8.743 14.667 8 14.667c-.743 0-1.419-.4-2.771-1.202l-.458-.27c-1.352-.802-2.028-1.202-2.4-1.862C2 10.673 2 9.873 2 8.271v-.542c0-1.602 0-2.403.371-3.062.372-.66 1.048-1.06 2.4-1.861l.458-.271Zm3.438 8.132a.667.667 0 1 1-1.334 0 .667.667 0 0 1 1.334 0ZM8 4.167a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0v-4a.5.5 0 0 1 .5-.5Z"
                            clip-rule="evenodd"
                          />
                        </svg>
                        <span>
                          {t.activityAlertMin} {activity.participantsCount.min} {t.person}
                        </span>
                      </div>
                    )}
                    {hasHotels && activity.pricing.exceedsMaxPeople && (
                      <div class="info-alert-inside">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
                          <path
                            fill="#F67258"
                            fill-rule="evenodd"
                            d="M5.229 2.535C6.58 1.734 7.257 1.333 8 1.333c.743 0 1.419.4 2.771 1.202l.458.27c1.352.801 2.028 1.202 2.4 1.862.371.66.371 1.46.371 3.062v.542c0 1.602 0 2.403-.371 3.062-.372.66-1.048 1.06-2.4 1.861l-.458.271C9.42 14.266 8.743 14.667 8 14.667c-.743 0-1.419-.4-2.771-1.202l-.458-.27c-1.352-.802-2.028-1.202-2.4-1.862C2 10.673 2 9.873 2 8.271v-.542c0-1.602 0-2.403.371-3.062.372-.66 1.048-1.06 2.4-1.861l.458-.271Zm3.438 8.132a.667.667 0 1 1-1.334 0 .667.667 0 0 1 1.334 0ZM8 4.167a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0v-4a.5.5 0 0 1 .5-.5Z"
                            clip-rule="evenodd"
                          />
                        </svg>
                        <span>
                          {t.activityAlertMax} {activity.participantsCount.max} {t.person}
                        </span>
                      </div>
                    )}
                  </div>
                  <div class="item-pricing">
                    <span
                      class="item-price"
                      data-brutto-price={activity.pricing.finalPrice}
                      data-netto-price={activity.pricing.nettoFinalPrice}
                    >
                      {formatCurrency(activity.pricing.finalPrice, lang)}
                    </span>
                  </div>
                </>
              )}
            </li>
          ))
      }

      {
        item.transport && (
          <li class="item transport-item">
            <div class="item-details">
              <span class="item-name item-transport">
                {t.transport}
                {item.transport.distance > 0 ? (
                  <span class="distance">{`(~${item.transport.distance} ${t.distance})`}</span>
                ) : item.transport.transportAddressNotFound ? (
                  <span class="distance">({t.addressNotFound})</span>
                ) : item.transport.noTransportAddress ? (
                  <span class="distance">({t.noAddress})</span>
                ) : (
                  <span class="distance">({t.noDistance})</span>
                )}
              </span>
            </div>
            <div class="item-pricing">
              <span
                class="item-price"
                data-brutto-price={item.transport.pricing.totalPrice}
                data-netto-price={item.transport.pricing.nettoTotalPrice}
              >
                {formatCurrency(item.transport.pricing.totalPrice, lang)}
              </span>
            </div>
          </li>
        )
      }

      {
        hasExtras &&
          item.extras?.map((extra) => (
            <li class="item extra-item">
              <div class="item-details">
                <span class="item-name">
                  {extra.count > 1 && <strong>{extra.count}X</strong>} {extra.name}
                </span>
              </div>
              <div class="item-pricing">
                <span
                  class="item-price"
                  data-brutto-price={extra.pricing.totalPrice}
                  data-netto-price={extra.pricing.nettoTotalPrice}
                >
                  {formatCurrency(extra.pricing.totalPrice, lang)}
                </span>
              </div>
            </li>
          ))
      }
    </ul>
  </div>
</details>

<style lang="scss">
  details.quote-accordion {
    width: 100%;
    border-radius: 0.5rem 0.5rem 0 0;
    background-color: transparent;
    overflow: hidden;
    position: relative;
    background-color: var(--neutral-100);

    .accordion-summary {
      > * {
        transition: transform 350ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
      }

      padding: clamp(0.625rem, calc(1vw / 0.48), 1rem) clamp(0.75rem, calc(1.25vw / 0.48), 1.25rem);
      border-bottom: 2px solid;
      border-image: linear-gradient(270deg, #798ddc 0%, #e7c78f 25%, #fa7468 74%, #798ddc 100%) 1;
      display: grid;
      grid-template-columns: auto auto 1fr;
      grid-template-areas:
        'title icon price'
        'alert alert price';

      .accordion-title {
        grid-area: title;
        color: var(--primary-800, #45051c);
        font-size: var(--typography-body-xl, 1.125rem);
        line-height: 1.5;
        margin-right: 0.5625rem;
        font-weight: 400;
        letter-spacing: -0.02em;
      }

      .info-alert {
        grid-area: alert;
        font-size: var(--typography-body-m, 0.875rem);
        display: flex;
        align-items: flex-start;
        gap: clamp(0.25rem, calc(0.375vw / 0.48), 0.375rem);
        letter-spacing: -0.01em;
        line-height: 1.7;

        :global(svg) {
          margin-top: 4px;
        }
      }

      .arrow-icon {
        display: grid;
        place-items: center;
        position: relative;
        width: 1rem;
        height: 1rem;
        overflow: hidden;
        transition: transform 400ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
        margin-top: 6px;

        svg {
          transition: transform 400ms var(--easing);

          &:nth-of-type(2) {
            position: absolute;
            top: 50%;
            transform: translate(50%, -150%) scale(0.6);
            right: 50%;
          }
        }
      }

      .pricing-row {
        grid-area: price;
        display: flex;
        align-items: center;
        gap: 0.25rem;
        justify-self: end;
        align-self: start;
        margin-left: 2rem;

        .price {
          font-size: var(--typography-body-xl, 1.125rem);
          letter-spacing: -0.03em;
          font-weight: 700;
          line-height: 1.5;
          color: var(--primary-800, #45051c);
        }

        .text {
          margin-top: 5px;
          font-size: var(--typography-body-m, 0.875rem);
          line-height: 1.7;
          letter-spacing: -0.01em;
        }
      }
    }

    &:has(.accordion-summary:hover) {
      .accordion-title {
        transform: translateX(-2px);
      }

      .info-alert {
        transform: translateX(-2px);
      }

      .pricing-row {
        transform: translateX(2px);
      }

      .arrow-icon {
        transform: translateX(2px);
        svg {
          &:nth-of-type(1) {
            transform: translate(-2px, 100%);
          }

          &:nth-of-type(2) {
            transform: translate(calc(50% - 2px), -50%);
            transition: transform 400ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
          }
        }
      }
    }
    &:has(.accordion-summary:focus:not(:focus-visible)) {
      .icon {
        transform: translateY(2px) scale(1.1);
      }
    }
    &:has(.accordion-summary:focus-visible) {
      border-radius: 2px;
      outline: 2px solid var(--primary-800);
      outline-offset: 2px;
      z-index: 50;

      .accordion-summary {
        outline: none;
      }
    }

    .content {
      overflow: hidden;
      transition: height 300ms cubic-bezier(0.18, 0.89, 0.32, 1.15);
      padding: 0 clamp(0.75rem, calc(1.25vw / 0.48), 1.25rem);

      .item-list {
        margin: clamp(0.5rem, calc(0.625vw / 0.48), 0.625rem) 0 clamp(1.25rem, calc(1.5vw / 0.48), 1.5rem);
        display: flex;
        flex-direction: column;
        gap: 0.25rem;

        .item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 0.25rem 0;
          min-height: 2.75rem;

          .item-details {
            display: grid;
            grid-template-columns: 1fr auto;

            grid-template-areas:
              'name addons'
              'alert addons';

            .item-name {
              grid-area: name;
              line-height: 1.55;
              color: var(--primary-800, #45051c);

              &.item-transport {
                display: flex;
                flex-wrap: wrap;
              }

              .distance {
                margin-left: 0.375rem;
                color: var(--primary-400, #74535e);
                font-size: var(--typography-body-m, 0.875rem);
                line-height: 1.7;
                letter-spacing: -0.01em;
              }
            }

            .toggle-addons {
              grid-area: addons;
              display: grid;
              place-items: center;
              position: relative;
              width: 1.25rem;
              height: 1.25rem;
              overflow: hidden;
              transition: transform 400ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
              margin-left: 0.375rem;

              svg {
                transition: transform 350ms var(--easing);

                &:nth-of-type(2) {
                  position: absolute;
                  top: 50%;
                  transform: translate(50%, -150%) scale(0.6);
                  right: 50%;
                }
              }
            }

            .info-alert-inside {
              grid-area: alert;
              font-size: var(--typography-body-s, 0.75rem);
              display: flex;
              align-items: flex-start;
              gap: 0.25rem;

              :global(svg) {
                margin-top: 2px;
              }
            }
          }

          .item-price {
            font-weight: 700;
            margin-left: 2rem;
          }

          .nested-details {
            width: 100%;
            align-self: flex-start;

            summary {
              width: 100%;
              display: flex;
              justify-content: space-between;
              align-items: center;

              &:not(:has(.info-alert-inside)) {
                margin-top: 0.375rem;
              }

              &:hover {
                .toggle-addons {
                  svg {
                    &:nth-of-type(1) {
                      transform: translateY(100%);
                    }

                    &:nth-of-type(2) {
                      transform: translate(50%, -50%);
                      transition: transform 400ms cubic-bezier(0.18, 0.89, 0.32, 1.27);
                    }
                  }
                }
              }
            }

            .addons-list {
              width: 100%;
              overflow: hidden;
              transition: height 300ms cubic-bezier(0.18, 0.89, 0.32, 1.15);

              ul {
                display: flex;
                flex-direction: column;
                gap: 0.375rem;
                margin-top: 0.25rem;

                .addon-item {
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                  min-height: 1.5rem;
                  line-height: 1.7;
                  letter-spacing: -0.01em;
                  font-size: var(--typography-body-m, 0.875rem);

                  .addon-name {
                    color: var(--primary-800, #45051c);
                  }

                  .addon-price {
                    margin-left: 1rem;
                  }
                }
              }
            }

            &[data-expanded='true'] {
              summary {
                .item-details .toggle-addons {
                  svg {
                    &:nth-of-type(1) {
                      transform: translateY(100%);
                    }

                    &:nth-of-type(2) {
                      transform: translate(50%, -50%) rotate(180deg);
                    }
                  }
                }
                &:hover {
                  .item-details .toggle-addons {
                    svg {
                      &:nth-of-type(1) {
                        transform: translateY(100%) !important;
                      }
                      &:nth-of-type(2) {
                        transform: translate(50%, -50%) rotate(180deg) !important;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    &:has(.accordion-summary:focus:not(:focus-visible)) {
      .icon {
        transform: translateY(2px) scale(1.1);
      }
    }

    &:has(.accordion-summary:focus-visible) {
      border-radius: 2px;
      outline: 2px solid var(--primary-800);
      outline-offset: 2px;
      z-index: 50;

      .accordion-summary {
        outline: none;
      }
    }

    &[data-expanded='true'] {
      border-radius: 0.5rem;
      .accordion-summary {
        .arrow-icon {
          svg {
            &:nth-of-type(1) {
              transform: translateY(100%);
            }

            &:nth-of-type(2) {
              transform: translate(50%, -50%) rotate(180deg);
            }
          }
        }
      }
      &:hover {
        .arrow-icon {
          svg {
            &:nth-of-type(1) {
              transform: translate(-2px, 100%) !important;
            }
            &:nth-of-type(2) {
              transform: translate(calc(50% - 2px), -50%) rotate(180deg) !important;
            }
          }
        }
      }
    }

    @media (max-width: 469px) {
      .accordion-summary {
        grid-template-columns: 1fr auto;

        .accordion-title {
          margin-right: 1.5rem;
        }

        .pricing-row {
          grid-column: 1 / 3;
          grid-row: 2 / 3;
          justify-self: flex-start;

          justify-content: space-between;
          margin-left: 0;

          .text {
            margin-top: 3px;
          }
        }
      }

      .content .item-list {
        gap: 0rem;
      }
    }
  }
</style>

<script>
  document.querySelectorAll<HTMLDetailsElement>('details.quote-accordion').forEach((details) => {
    const content = details.querySelector<HTMLDivElement>('.content')!
    const summary = details.querySelector<HTMLDivElement>('.accordion-summary')!
    if (!content || !summary) return

    let isAnimating = false

    // Set initial height for open accordion
    if (details.hasAttribute('open')) {
      content.style.height = content.scrollHeight + 'px'
      requestAnimationFrame(() => {
        content.style.height = ''
      })
    }

    summary.addEventListener('click', (event) => {
      event.preventDefault()

      if (isAnimating) {
        isAnimating = false
        content.style.height = ''
        details.open = !details.open
        details.setAttribute('data-expanded', details.open ? 'true' : 'false')
        return
      }

      const parent = details.parentElement
      if (parent) {
        parent.querySelectorAll<HTMLDetailsElement>('details.quote-accordion[open]').forEach((openDetails) => {
          if (openDetails !== details) {
            const openContent = openDetails.querySelector<HTMLDivElement>('.content')
            if (openContent) {
              openContent.style.height = openContent.scrollHeight + 'px'
              requestAnimationFrame(() => (openContent.style.height = '0px'))
              openDetails.setAttribute('data-expanded', 'false')

              const currentDetails = openDetails
              const currentContent = openContent

              isAnimating = true
              openContent.addEventListener(
                'transitionend',
                () => {
                  if (currentDetails.getAttribute('data-expanded') === 'false') {
                    currentDetails.open = false
                  }
                  currentContent.style.height = ''
                  isAnimating = false
                },
                { once: true }
              )
            }
          }
        })
      }

      if (details.open) {
        content.style.height = content.scrollHeight + 'px'
        requestAnimationFrame(() => (content.style.height = '0px'))
        details.setAttribute('data-expanded', 'false')

        isAnimating = true
        content.addEventListener(
          'transitionend',
          () => {
            if (details.getAttribute('data-expanded') === 'false') {
              details.open = false
            }
            content.style.height = ''
            isAnimating = false
          },
          { once: true }
        )
      } else {
        details.setAttribute('data-expanded', 'true')
        details.open = true
        const startHeight = content.scrollHeight + 'px'
        content.style.height = '0px'
        requestAnimationFrame(() => (content.style.height = startHeight))

        isAnimating = true
        content.addEventListener(
          'transitionend',
          () => {
            content.style.height = ''
            isAnimating = false
          },
          { once: true }
        )
      }
    })
  })

  // Handle nested details elements
  document.querySelectorAll<HTMLDetailsElement>('details.nested-details').forEach((details) => {
    const content = details.querySelector<HTMLDivElement>('.addons-list')!
    const summary = details.querySelector<HTMLDivElement>('summary')!
    if (!content || !summary) return

    let isAnimating = false

    summary.addEventListener('click', (event) => {
      event.preventDefault()
      event.stopPropagation() // Prevent triggering parent details

      if (isAnimating) {
        isAnimating = false
        content.style.height = ''
        details.open = !details.open
        details.setAttribute('data-expanded', details.open ? 'true' : 'false')
        return
      }

      if (details.open) {
        content.style.height = content.scrollHeight + 'px'
        requestAnimationFrame(() => (content.style.height = '0px'))
        details.setAttribute('data-expanded', 'false')

        isAnimating = true
        content.addEventListener(
          'transitionend',
          () => {
            if (details.getAttribute('data-expanded') === 'false') {
              details.open = false
            }
            content.style.height = ''
            isAnimating = false
          },
          { once: true }
        )
      } else {
        details.setAttribute('data-expanded', 'true')
        details.open = true
        const startHeight = content.scrollHeight + 'px'
        content.style.height = '0px'
        requestAnimationFrame(() => (content.style.height = startHeight))

        isAnimating = true
        content.addEventListener(
          'transitionend',
          () => {
            content.style.height = ''
            isAnimating = false
          },
          { once: true }
        )
      }
    })
  })
</script>
