---
import PortableText, { type PortableTextValue } from '@/src/components/ui/portable-text'
import { ITEMS_PER_PAGE } from '@/src/templates/caseStudies/CaseStudyPage.astro'
import { getLangFromPath, type Language } from '@/global/languages'
import CategoryTab from '../ui/CategoryTab.astro'
import Pagination from '../ui/Pagination.astro'
import { BlogPostCardQuery, type BlogPostCardProps } from '../ui/BlogPostCard'

type Props = {
  subheading: PortableTextValue
  paragraph: PortableTextValue
  totalBlogPosts: number
  totalBlogPostsByCategory: number
  categories: Array<{
    name: string
    slug: string
    count: number
  }>
  listing: Array<BlogPostCardProps>
  currentPage: number
  currentCategory: string | null
}
export type ListingProps = Props

const lang = getLangFromPath(Astro.url.pathname) as Language

const translations = {
  pl: {
    pathPrefix: '/pl/blog',
    categories: 'Kategorie',
    all: 'Wszystkie',
  },
  en: {
    pathPrefix: '/en/blog',
    categories: 'Categories',
    all: 'All',
  },
}

const t = translations[lang]

export const Listing_Query = `
    "totalBlogPosts": count(*[_type == 'BlogPost_Collection' && language == $language]),
    "categories": *[_type == 'BlogCategory_Collection' && language == $language && count(*[_type == 'BlogPost_Collection' && references(^._id) && defined(category)]) > 0] {
      name,
      "slug": slug.current,
      "count": count(*[_type == 'BlogPost_Collection' && references(^._id) && defined(category)])
    },
    "totalBlogPostsByCategory": count(*[_type == 'BlogPost_Collection'
      && language == $language
      && select(defined($category) => category -> slug.current match $category + "$", true)
    ]),
    "listing": *[_type == 'BlogPost_Collection'
      && language == $language
      && select(defined($category) => category -> slug.current match $category + "$", true)
    ] | order(coalesce(publishedDate, _createdAt) desc) [$PAGINATION_BEFORE...$PAGINATION_AFTER] {
      ${BlogPostCardQuery}
    },
`

const {
  listing,
  currentPage,
  currentCategory,
  subheading,
  paragraph,
  totalBlogPosts,
  totalBlogPostsByCategory,
  categories,
} = Astro.props
const slugBase = (() => {
  const categoryPath = currentCategory ? `/${lang === 'pl' ? 'kategoria' : 'category'}/${currentCategory}` : ''
  return `${lang === 'pl' ? '/pl/blog' : '/en/blog'}${categoryPath}`
})()
---

<section class="Listing">
  <header class="header">
    <PortableText value={subheading} heading="h2" class="heading" />
    <PortableText value={paragraph} class="paragraph" />
  </header>
  <div class="categories">
    <p>{t.categories}</p>
    <ul>
      <li>
        <CategoryTab
          href={t.pathPrefix}
          isActive={!currentCategory}
          count={totalBlogPosts}
          name={translations[lang].all}
        />
      </li>
      {
        categories.map((category) => {
          const isActive = currentCategory ? category.slug.endsWith(currentCategory) : false
          return (
            <li>
              <CategoryTab href={category.slug} isActive={isActive} count={category.count} name={category.name} />
            </li>
          )
        })
      }
    </ul>
  </div>
  <div class="list">
    {
      listing.map((post) => {
        return <div>{post.name}</div>
      })
    }
  </div>
  <Pagination
    slugBase={slugBase}
    totalItems={totalBlogPostsByCategory}
    itemsPerPage={ITEMS_PER_PAGE}
    currentPage={currentPage}
  />
</section>

<style lang="scss">
  .Listing {
    background: var(--neutral-200, #f5f1ec);
    border-radius: 4rem 4rem 0 0;
    max-width: 85.375rem;
    margin: 0 auto;
    padding: clamp(3rem, calc(5vw / 0.48), 8rem) var(--pageMargin) clamp(2.25rem, calc(4vw / 0.48), 6rem);
    display: grid;
    grid-template-columns: 20.25rem 54.75rem;
    justify-content: space-between;
    column-gap: 3rem;

    .header {
      grid-column: 2 / 3;
      grid-row: 1/2;
      max-width: 40.9375rem;
      justify-self: start;
      margin-bottom: clamp(1.25rem, calc(2vw / 0.48), 2rem);
      .heading {
        font-size: var(--typography-heading-l, 2rem);
        margin-bottom: clamp(0.75rem, calc(1.25vw / 0.48), 1.25rem);
      }
      .paragraph {
        font-size: var(--typography-body-xl, 1.125rem);
        line-height: 1.5;
      }
    }

    .categories {
      grid-column: 1 / 2;
      grid-row: 1/-1;
      justify-self: start;
      border-right: 2px solid;
      padding-right: 1rem;
      position: sticky;
      top: 89px;
      height: fit-content;
      max-height: calc(100vh - 89px);
      overflow-y: auto;

      border-image: linear-gradient(
          to bottom,
          rgba(121, 141, 220, 0.7) 0%,
          rgba(231, 199, 143, 0.7) 25%,
          rgba(250, 116, 104, 0.7) 74%,
          rgba(121, 141, 220, 0.7) 100%
        )
        1 100%;
      p {
        margin-bottom: clamp(0.4375rem, calc(0.625vw / 0.48), 0.75rem);
        color: var(--primary-800, #45051c);
      }

      ul {
        display: flex;
        flex-wrap: wrap;
        gap: clamp(0.25rem, calc(0.375vw / 0.48), 0.375rem);
      }
    }

    .list {
      grid-column: 2 / 3;
      grid-row: 2/3;
      margin-bottom: 2.75rem;
    }

    :global(.Pagination) {
      grid-column: 2 / 3;
      grid-row: 3/4;
      justify-self: center;
    }
  }
</style>
