---
import Image, { ImageDataQuery, type ImageDataProps } from '@/components/ui/image'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/components/ui/portable-text'
import { FormState_Query } from '@/components/ui/FormState'
import type { FormStateTypes } from '@/src/global/types'
import Form from './Form'
import { toPlainText } from '@/src/utils/to-plain-text'
import { type Language } from '@/src/global/languages'

const lang = (Astro.params.lang as Language) || 'pl'

export const Newsletter_Query = `
  _type == "Newsletter" => {
    ${ImageDataQuery('image')}
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    buttonText,
    groupId,
    ${FormState_Query('formState')}
  },
`

type Props = {
  node: {
    image: ImageDataProps
    heading: PortableTextValue
    paragraph: PortableTextValue
    buttonText: string
    groupId: string
    formState: FormStateTypes
  }
}

const { node } = Astro.props

const clientFormStates = {
  success: {
    ...node.formState.success,
    heading: toPlainText(node.formState.success.heading),
    paragraph: toPlainText(node.formState.success.paragraph),
  },
  error: {
    heading: toPlainText(node.formState.error.heading),
    paragraph: toPlainText(node.formState.error.paragraph),
  },
}
---

<div class="Newsletter">
  {
    node.image && (
      <>
        <Image
          {...node.image}
          sizes="(max-width: 599px) 94vw, (max-width: 789px) 80vw, (max-width: 899px) 74vw, (max-width: 1099px) 688px, 575px"
        />
        <svg width="655" height="894" viewBox="0 0 655 894" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g filter="url(#filter0_f_7346_92412)">
            <ellipse
              cx="17.6689"
              cy="640.736"
              rx="271.995"
              ry="208.606"
              transform="rotate(-180 17.6689 640.736)"
              fill="#F7D8FF"
            />
            <ellipse
              cx="637.005"
              cy="592.422"
              rx="271.995"
              ry="208.606"
              transform="rotate(-180 637.005 592.422)"
              fill="#EAE8FF"
            />
            <ellipse
              cx="691.632"
              cy="573.091"
              rx="211.719"
              ry="162.281"
              transform="rotate(-180 691.632 573.091)"
              fill="#FFF1F2"
            />
            <ellipse
              cx="354.468"
              cy="594.411"
              rx="211.719"
              ry="162.281"
              transform="rotate(-180 354.468 594.411)"
              fill="#FAF7F7"
            />
            <ellipse
              cx="566.18"
              cy="432.128"
              rx="192.883"
              ry="147.787"
              transform="rotate(-180 566.18 432.128)"
              fill="#FBECFF"
            />
            <ellipse
              cx="437.336"
              cy="492.951"
              rx="192.883"
              ry="147.787"
              transform="rotate(-180 437.336 492.951)"
              fill="#FBECFF"
            />
            <ellipse
              cx="39.5271"
              cy="553.386"
              rx="234.699"
              ry="179.902"
              transform="rotate(-180 39.5271 553.386)"
              fill="#FFEAEA"
            />
            <ellipse
              cx="647.554"
              cy="569.969"
              rx="70.0708"
              ry="36.094"
              transform="rotate(-180 647.554 569.969)"
              fill="#FFDA58"
            />
            <ellipse
              cx="647.554"
              cy="583.612"
              rx="70.0708"
              ry="36.094"
              transform="rotate(-180 647.554 583.612)"
              fill="#FFF1C0"
            />
          </g>
          <defs>
            <filter
              id="filter0_f_7346_92412"
              x="-537.919"
              y="0.751343"
              width="1730.51"
              height="1132.18"
              filterUnits="userSpaceOnUse"
              color-interpolation-filters="sRGB"
            >
              <feFlood flood-opacity="0" result="BackgroundImageFix" />
              <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape" />
              <feGaussianBlur stdDeviation="141.795" result="effect1_foregroundBlur_7346_92412" />
            </filter>
          </defs>
        </svg>
      </>
    )
  }

  <PortableText value={node.heading} heading="h2" class="heading" />
  <PortableText value={node.paragraph} class="paragraph" />
  <Form client:idle groupId={node.groupId} formState={clientFormStates} buttonText={node.buttonText} lang={lang} />
</div>

<style lang="scss">
  .Newsletter {
    padding: clamp(2rem, calc(2.5vw / 0.48), 2.5rem) 2.5rem;
    border-radius: 1rem;
    display: flex;
    overflow: hidden;
    flex-direction: column;
    align-items: flex-start;
    margin: clamp(3rem, calc(3.25vw / 0.48), 3.25rem) 0;
    position: relative;
    background-color: var(--neutral-200, #f5f1ec);
    isolation: isolate;

    > img {
      width: 100%;
      aspect-ratio: 575/431.91;
      border-radius: clamp(0.5rem, calc(0.75vw / 0.48), 0.75rem);
      margin-bottom: clamp(1.5rem, calc(2vw / 0.48), 2rem);
    }

    > svg {
      position: absolute;
      left: 0;
      bottom: 0;

      z-index: -1;
    }

    .heading {
      margin-bottom: clamp(1rem, calc(1.25vw / 0.48), 1.75rem);
      font-size: var(--typography-heading-l, 2rem);
    }

    .paragraph {
      margin-bottom: 1.25rem;
      line-height: 1.5;
    }

    :global(form) {
      max-width: 18.4375rem;
      display: grid;
      gap: 0.75rem;

      :global(> div:last-child) {
        justify-content: center;

        :global(button),
        :global(ul) {
          margin-top: 3rem;
        }
      }
    }
    @media (max-width: 789px) {
      margin-left: calc(-1 * var(--pageMargin));
      margin-right: calc(-1 * var(--pageMargin));
      padding-left: var(--pageMargin);
      padding-right: var(--pageMargin);
    }
  }
</style>
