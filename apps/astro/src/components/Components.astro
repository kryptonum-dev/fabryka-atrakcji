---
import type { ComponentProps } from 'astro/types'
import CardSteps, { CardSteps_Query } from '@/components/global/CardSteps.astro'
import GradientBackgroundCta, { GradientBackgroundCta_Query } from '@/components/global/GradientBackgroundCta.astro'
import CaseStudyList, { CaseStudyList_Query } from '@/components/global/CaseStudyList.astro'
import ActivitiesCarousel, { ActivitiesCarousel_Query } from '@/components/global/ActivitiesCarousel/index.astro'
import LargeImageWithGridList, { LargeImageWithGridList_Query } from '@/components/global/LargeImageWithGridList.astro'
import HighlightedBlogPosts, { HighlightedBlogPosts_Query } from '@/components/global/HighlightedBlogPosts/index.astro'
import Newsletter, { Newsletter_Query } from '@/components/global/Newsletter/index.astro'
import AsymmetricalPhotoGalleryGrid, {
  AsymmetricalPhotoGalleryGrid_Query,
} from '@/components/global/AsymmetricalPhotoGalleryGrid.astro'
import StepsList, { StepsList_Query } from '@/components/global/StepsList.astro'
import Faq, { Faq_Query } from '@/components/global/Faq/index.astro'
import ContactForm, { ContactForm_Query } from '@/components/global/ContactForm/index.astro'
import ListImageProccessGrid, { ListImageProccessGrid_Query } from '@/components/global/ListImageProccessGrid.astro'
import CardListWithCta, { CardListWithCta_Query } from '@/components/global/CardListWithCta.astro'
import FloatingPointsList, { FloatingPointsList_Query } from '@/components/global/FloatingPointsList.astro'
import BackgroundImageWithCenteredHeading, {
  BackgroundImageWithCenteredHeading_Query,
} from '@/components/global/BackgroundImageWithCenteredHeading.astro'
import TextBlocksGrid, { TextBlocksGrid_Query } from '@/components/global/TextBlocksGrid.astro'
import Testimonials, { Testimonials_Query } from '@/components/global/Testimonials.astro'

const components = {
  CardSteps,
  GradientBackgroundCta,
  CaseStudyList,
  ActivitiesCarousel,
  LargeImageWithGridList,
  Testimonials,
  HighlightedBlogPosts,
  Newsletter,
  AsymmetricalPhotoGalleryGrid,
  StepsList,
  Faq,
  ContactForm,
  ListImageProccessGrid,
  CardListWithCta,
  FloatingPointsList,
  BackgroundImageWithCenteredHeading,
  TextBlocksGrid,
}

type ComponentsMap = {
  [Component in keyof typeof components]: {
    _type: Component
  } & ComponentProps<(typeof components)[Component]>
}

export type ComponentsProps = Array<ComponentsMap[keyof typeof components]>

type Props = {
  data: ComponentsProps
  hasPreviousSections?: boolean
}

const { data, hasPreviousSections = false } = Astro.props

export const Components_Query = /* groq */ `
  components[] {
    _type,
    sectionId,
    ${CardSteps_Query}
    ${GradientBackgroundCta_Query}
    ${CaseStudyList_Query}
    ${ActivitiesCarousel_Query}
    ${LargeImageWithGridList_Query}
    ${Testimonials_Query}
    ${HighlightedBlogPosts_Query}
    ${Newsletter_Query}
    ${AsymmetricalPhotoGalleryGrid_Query}
    ${StepsList_Query}
    ${Faq_Query}
    ${ContactForm_Query}
    ${ListImageProccessGrid_Query}
    ${CardListWithCta_Query}
    ${FloatingPointsList_Query}
    ${BackgroundImageWithCenteredHeading_Query}
    ${TextBlocksGrid_Query}
  },
`
---

{
  data?.map((item, i) => {
    // NOTE: Using 'as any' is not ideal for type safety, but it's used here to simplify
    // the implementation and avoid creating separate typed interfaces for each component.
    const DynamicComponent = components[item._type] as any
    if (!DynamicComponent) return null
    return <DynamicComponent {...item} index={hasPreviousSections ? i + 1 : i} />
  })
}
