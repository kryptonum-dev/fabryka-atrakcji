---
import Button, { ButtonDataQuery, type ButtonDataProps } from '../ui/Button'
import Image, { ImageDataQuery, type ImageDataProps } from '../ui/image'
import PortableText, { PortableTextQuery, type PortableTextValue } from '../ui/portable-text'
import AnimatedHeading from '../ui/AnimatedHeading.astro'

export const CardListWithCta_Query = `
  _type == "CardListWithCta" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    ${ButtonDataQuery('ctas[]')}
    cards[]{
      ${ImageDataQuery('image')}
      ${PortableTextQuery('heading')}
      ${PortableTextQuery('paragraph')}
    }
  },
`

type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  paragraph: PortableTextValue
  ctas: ButtonDataProps[]
  cards: {
    image: ImageDataProps
    heading: PortableTextValue
    paragraph: PortableTextValue
  }[]
}

const { index, sectionId, heading, paragraph, ctas, cards } = Astro.props
---

<section class="CardListWithCta max-width" id={sectionId}>
  <header class="header">
    <AnimatedHeading heading={heading} level={index === 0 ? 'h1' : 'h2'} class="heading" />
    <PortableText value={paragraph} class="paragraph" />
  </header>
  <div class="ctas">
    {ctas.map((cta, buttonIndex) => <Button shade={buttonIndex === 0 ? 'dark' : 'light'} {...cta} />)}
  </div>
  <ul class="cards">
    {
      cards.map(({ image, heading, paragraph }, imageIndex) => (
        <li class="card">
          <Image
            {...image}
            sizes="(max-width: 28rem) 94vw, (max-width: 42.25rem) 416px, (max-width: 65rem) 32vw, 322px"
            loading={index === 0 ? 'eager' : 'lazy'}
            priority={index === 0 && imageIndex === 0}
          />
          <PortableText value={heading} class="card-heading" />
          <PortableText value={paragraph} class="card-paragraph" />
        </li>
      ))
    }
  </ul>
</section>

<style lang="scss">
  .CardListWithCta {
    padding: clamp(3rem, calc(4vw / 0.48), 4rem) 0;
    display: grid;
    grid-template-columns: repeat(2, auto);
    justify-content: space-between;
    align-items: start;
    .header {
      :global(.animated-heading) {
        margin-bottom: 1rem;
      }
      .paragraph {
        opacity: 0;
        transform: translateY(1rem);
        transition:
          opacity 200ms,
          transform 500ms cubic-bezier(0.18, 0.89, 0.32, 1.1);
        will-change: opacity, transform;
        transition-delay: 500ms;
        &[data-fired='true'] {
          opacity: 1;
          transform: translateY(0);
        }
      }
      > :global(.animated-heading),
      .paragraph {
        max-width: 33.875rem;
      }
    }

    .ctas {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
      opacity: 0;
      transform: rotate(-45deg) scale(0);
      transition:
        opacity 200ms,
        transform 400ms cubic-bezier(0.18, 0.89, 0.32, 1.3);
      will-change: opacity, transform;
      transition-delay: 500ms;
      &[data-fired='true'] {
        opacity: 1;
        transform: rotate(0deg) scale(1);
      }
    }

    .cards {
      margin-top: clamp(2.5rem, calc(4vw / 0.48), 4rem);
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      max-width: 61.875rem;
      gap: clamp(1.25rem, calc(2vw / 0.48), 2rem) 0.75rem;
      grid-column: 1/3;
      position: relative;

      .card {
        opacity: 0;
        transform: translateX(-2rem);
        transition:
          opacity 600ms,
          transform 1400ms var(--easing);
        will-change: opacity, transform;
        position: relative;

        &[data-fired='true'] {
          opacity: 1;
          transform: translateX(0);
        }

        img {
          width: 100%;
          height: 405px;
          border-radius: clamp(8px, calc(12vw / 7.68), 12px);
          display: block;
          margin-bottom: 0.75rem;
        }

        .card-heading {
          margin-bottom: clamp(0.5rem, calc(0.75vw / 0.48), 0.75rem);
          font-family: 'Neue Haas Unica', 'Neue Haas Unica Fallback', sans-serif;
          font-weight: 700;
          font-size: var(--typography-body-l, 1rem);
          color: var(--primary-800, #45051c);
          line-height: 1.55;
          letter-spacing: -0.03em;
        }

        .card-paragraph {
        }
      }
    }

    @media (max-width: 67.4375rem) {
      grid-template-columns: 1fr;
      .header {
        margin-bottom: clamp(1.5rem, calc(2vw / 0.48), 2rem);

        .paragraph {
          max-width: 38rem;
        }
      }

      .ctas {
        grid-column: 1/2;
        opacity: 0;
        transform: scale(0);
        transition:
          opacity 200ms,
          transform 400ms cubic-bezier(0.18, 0.89, 0.32, 1.1);
        will-change: opacity, transform;
        transition-delay: 500ms;
        &[data-fired='true'] {
          opacity: 1;
          transform: scale(1);
        }
      }

      .cards {
        grid-column: 1/2;
      }
    }
    @media (max-width: 56.1875rem) {
      .cards {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media (max-width: 42.4375rem) {
      .cards {
        grid-template-columns: 1fr;
        max-width: 26rem;
      }
    }

    @media (max-width: 28.6875rem) {
      .ctas {
        :global(a) {
          max-width: 100%;
          width: 100%;

          &[data-theme='secondary'] {
            display: flex;
            justify-content: center;
          }

          &[data-theme='primary'] {
            :global(span) {
              margin: 0 auto;
              padding-right: 1.75rem;
            }
          }
        }
      }
    }
  }
</style>

<script>
  const sections = document.querySelectorAll('.CardListWithCta')

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const section = entry.target as HTMLElement
          const heading = section.querySelector('.animated-heading') as HTMLElement
          const paragraph = section.querySelector('.paragraph') as HTMLElement
          const ctas = section.querySelector('.ctas') as HTMLElement
          const cards = section.querySelectorAll('.card') as NodeListOf<HTMLElement>

          if (heading) {
            heading.dataset.fired = 'true'
          }

          if (paragraph) {
            paragraph.dataset.fired = 'true'
          }

          if (ctas) {
            ctas.dataset.fired = 'true'
          }

          if (cards.length) {
            cards.forEach((card, index) => {
              card.style.zIndex = `${50 - index}`
              const delay = 400 + index * 150
              setTimeout(() => {
                card.dataset.fired = 'true'
              }, delay)
            })
          }
          observer.unobserve(section)
        }
      })
    },
    {
      threshold: 0.1,
      rootMargin: '0px 0px -100px 0px',
    }
  )

  sections.forEach((section) => {
    observer.observe(section)
  })
</script>
