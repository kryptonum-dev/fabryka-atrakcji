---
import Button, { ButtonDataQuery, type ButtonDataProps } from '../ui/button'
import Image, { ImageDataQuery, type ImageDataProps } from '../ui/image'
import PortableText, { PortableTextQuery, type PortableTextValue } from '../ui/portable-text'

export const GradientBackgroundCta_Query = `
  _type == "GradientBackgroundCta" => {
    ${ImageDataQuery('imagesGrid[]')}
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    ${ButtonDataQuery('ctas[]')}
  },
`

type Props = {
  imagesGrid: ImageDataProps[]
  heading: PortableTextValue
  paragraph: PortableTextValue
  ctas: ButtonDataProps[]
  index: number
  sectionId: string
}

const { imagesGrid, heading, paragraph, ctas, index, sectionId } = Astro.props

const middleSizes = '(max-width: 35rem) 142px, (max-width: 64.125rem) 24vw, 243px'

const outerSizes = '(max-width: 35rem) 243px, (max-width: 64.125rem) 42vw, 432px'
---

<section class="GradientBackgroundCta" id={sectionId}>
  <div class="container">
    <div class="images-wrapper">
      {
        imagesGrid.map((image, i) => (
          <Image
            {...image}
            sizes={[1, 4, 7].includes(i) ? middleSizes : outerSizes}
            loading={index === 0 ? 'eager' : 'lazy'}
            fetchpriority={i === 0 && index === 0 ? 'high' : 'auto'}
          />
        ))
      }
    </div>
    <svg viewBox="0 0 1326 533" fill="none" xmlns="http://www.w3.org/2000/svg"
      ><g filter="url(#filter0_f_5978_43553)"
        ><ellipse
          cx="68.3286"
          cy="-35.7353"
          rx="522.328"
          ry="400.599"
          transform="rotate(-180 68.329 -35.735)"
          fill="#F7D8FF"></ellipse><ellipse
          cx="788.329"
          cy="652.265"
          rx="522.328"
          ry="400.599"
          transform="rotate(-180 788.329 652.265)"
          fill="#F7D8FF"></ellipse><ellipse
          cx="1257.67"
          cy="-187.401"
          rx="522.328"
          ry="400.599"
          transform="rotate(-180 1257.67 -187.401)"
          fill="#EAE8FF"></ellipse><ellipse
          cx="1362.57"
          cy="-237.639"
          rx="406.576"
          ry="311.637"
          transform="rotate(-180 1362.57 -237.639)"
          fill="#FFF1F2"></ellipse><ellipse
          cx="715.095"
          cy="-260.698"
          rx="406.576"
          ry="311.637"
          transform="rotate(-180 715.095 -260.698)"
          fill="#fff"></ellipse><ellipse
          cx="676.208"
          cy="280.562"
          rx="278"
          ry="311.5"
          transform="rotate(-156.48 676.208 280.562)"
          fill="#FFF1F2"></ellipse><ellipse
          cx="874.244"
          cy="-247.537"
          rx="370.404"
          ry="283.803"
          transform="rotate(-180 874.244 -247.537)"
          fill="#EAE8FF"></ellipse><ellipse
          cx="-217.704"
          cy="-59.477"
          rx="450.707"
          ry="345.475"
          transform="rotate(135 -217.704 -59.477)"
          fill="#E1F8FF"></ellipse><g filter="url(#filter1_f_5978_43553)"
          ><ellipse cx="478.508" cy="620.5" rx="317.5" ry="243.5" transform="rotate(-180 478.508 620.5)" fill="#E1F8FF"
          ></ellipse></g
        ><ellipse cx="714" cy="328.498" rx="259" ry="198.5" transform="rotate(-180 714 328.498)" fill="#EAE8FF"
        ></ellipse><ellipse
          cx="781.924"
          cy="316.364"
          rx="134.561"
          ry="69.3134"
          transform="rotate(-180 781.924 316.364)"
          fill="#FFE99D"></ellipse></g
      ><defs
        ><filter
          id="filter0_f_5978_43553"
          x="-835.281"
          y="-896.137"
          width="2831.28"
          height="2165"
          filterUnits="userSpaceOnUse"
          color-interpolation-filters="sRGB"
          ><feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood><feBlend
            in="SourceGraphic"
            in2="BackgroundImageFix"
            result="shape"></feBlend><feGaussianBlur stdDeviation="108" result="effect1_foregroundBlur_5978_43553"
          ></feGaussianBlur></filter
        ><filter
          id="filter1_f_5978_43553"
          x="97.0078"
          y="313"
          width="763"
          height="615"
          filterUnits="userSpaceOnUse"
          color-interpolation-filters="sRGB"
          ><feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood><feBlend
            in="SourceGraphic"
            in2="BackgroundImageFix"
            result="shape"></feBlend><feGaussianBlur stdDeviation="32" result="effect1_foregroundBlur_5978_43553"
          ></feGaussianBlur></filter
        ></defs
      >
    </svg>
    <header class="header">
      <PortableText value={heading} class="heading" heading={index === 0 ? 'h1' : 'h2'} />
      <PortableText value={paragraph} class="paragraph" />
      <div class="ctas">
        {ctas.map((cta, i) => <Button shade={i === 0 ? 'dark' : 'light'} {...cta} />)}
      </div>
    </header>
  </div>
  <div class="outside-wrapper">
    <PortableText value={paragraph} class="paragraph" />
    <div class="ctas">
      {ctas.map((cta, i) => <Button shade={i === 0 ? 'dark' : 'light'} {...cta} />)}
    </div>
  </div>
</section>

<style lang="scss">
  .GradientBackgroundCta {
    position: relative;
    padding: clamp(0.75rem, calc(0.75vw / 0.48), 1.5rem);
    text-align: center;

    .container {
      position: relative;
      display: flex;
      flex-direction: column;
      align-items: center;
      max-width: 82.875rem;
      padding: 8rem clamp(1rem, calc(2vw / 0.48), 2rem);
      margin: 0 auto;
      overflow: hidden;
      border-radius: clamp(1rem, calc(24vw / 7.68), 2rem);
      background: var(--primary-800, #45051c);

      .images-wrapper {
        position: absolute;
        z-index: 1;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        display: grid;
        grid-template-columns: repeat(3, auto);
        grid-template-rows: repeat(3, auto);
        justify-content: center;
        align-items: center;
        width: max-content;
        min-height: max-content;
        height: 100%;
        padding: 0 0.5rem;
        gap: 0.375rem;
        pointer-events: none;

        img {
          width: clamp(243px, calc(324vw / 7.68), 432px);
          height: clamp(137px, calc(182vw / 7.68), 243px);
          border-radius: clamp(0.422rem, calc(9vw / 7.68), 0.75rem);
        }
      }

      svg {
        position: absolute;
        inset: 0;
        z-index: 2;
        width: 100%;
        height: 100%;
      }

      .header {
        position: relative;
        z-index: 3;
        max-width: 34.75rem;
        .heading {
          display: inline;
          padding: 0.375rem 0.375rem 0;
          background-color: var(--neutral-100, #faf7f7);
          line-height: 1;
          -webkit-box-decoration-break: clone;
          box-decoration-break: clone;
        }

        .paragraph {
          max-width: 27.125rem;
          margin: 1.75rem auto 3rem;
        }
      }
    }

    .outside-wrapper {
      display: none;
      max-width: 30rem;
      margin: clamp(1.25rem, calc(1.75vw / 0.48), 1.5rem) auto 0;
      .paragraph {
        margin-bottom: clamp(1.25rem, calc(1.75vw / 0.48), 1.5rem);
      }
    }

    .ctas {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: center;
      gap: 0.375rem 0.75rem;
    }

    .paragraph {
      color: var(--primary-700, #600d2a);
    }

    @media (max-width: 42.4375rem) {
      padding-bottom: 6rem;
      .container {
        .images-wrapper {
          gap: 0.1875rem;
        }
        .header {
          .paragraph,
          .ctas {
            display: none;
          }
        }
        svg {
          opacity: 0.98;
        }
      }
      .outside-wrapper {
        display: block;
      }
    }

    @media (max-width: 27.4375rem) {
      .container {
        svg {
          transform: scale(1.3);
        }
      }
      .outside-wrapper {
        .ctas {
          flex-direction: column;
          a {
            width: 100%;
            max-width: none;
            :global(span) {
              margin: 0 auto;
              padding-right: 1.75rem;
            }
          }
        }
      }
    }
  }
</style>
