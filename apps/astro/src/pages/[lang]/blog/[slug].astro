---
import type { HeroProps } from '@/src/components/blog/post/Hero.astro'
import Hero from '@/src/components/blog/post/Hero.astro'
import { ImageDataQuery } from '@/src/components/ui/image'
import { PortableTextQuery } from '@/src/components/ui/portable-text'
import { LANGUAGES, type Language } from '@/src/global/languages'
import Breadcrumbs from '@/src/layouts/Breadcrumbs.astro'
import Layout from '@/src/layouts/Layout.astro'
import metadataFetch from '@/src/utils/metadata.fetch'
import sanityFetch from '@/src/utils/sanity.fetch'
import TableOfContent, {
  TableOfContent_Query,
  type TableOfContentProps,
} from '@/src/components/ui/TableOfContent.astro'
import ContentPT, {
  ContentPT_Query,
  type Props as ContentPTProps,
} from '@/src/components/blog/post/content-pt/index.astro'
import { getEstimatedReadingTime } from '@/src/utils/get-estimated-reading-time'

export async function staticPaths() {
  const blogPostByLang = await Promise.all(
    LANGUAGES.map(async (lang) => {
      const blogPost = await sanityFetch<{ slug: string }[]>({
        query: `*[_type == 'BlogPost_Collection' && language == $lang] {
        "slug": slug.current
      }`,
        params: { lang },
      })
      return (
        blogPost?.map(({ slug }) => ({
          params: { lang, slug: slug.split('/').pop() },
        })) || []
      )
    })
  )
  return blogPostByLang.flat()
}

const { lang, slug } = Astro.params as { lang: Language; slug: string }

const translations = {
  pl: {
    tableOfContents: 'W artykule znajdziesz',
  },
  en: {
    tableOfContents: 'In this article you will find',
  },
}

const t = translations[lang]

const fullSlug = `/${lang}/blog/${slug}`

const page = await sanityFetch<
  {
    name: string
    blogPage: {
      name: string
      slug: string
    }
    content: ContentPTProps['value']
  } & HeroProps &
    TableOfContentProps
>({
  query: `
      *[_type == 'BlogPost_Collection' && slug.current == $slug && language == $language][0] {
        name,
        _createdAt,
        _updatedAt,
        ${PortableTextQuery('title')}
        description,
        ${ImageDataQuery('image')}
        "blogPage": *[_type == "Blog_Page" && language == $language][0] {
          name,
          "slug": slug.current
        },
        ${TableOfContent_Query}
        ${ContentPT_Query}
        }
    `,
  params: { slug: fullSlug, language: lang },
})

const metadata = await metadataFetch(fullSlug)

if (!LANGUAGES.includes(lang) || !page || !metadata) return Astro.rewrite('/404')

const breadcrumbs = [
  { name: page.blogPage.name, path: page.blogPage.slug },
  { name: page.name, path: slug },
]

const readingTime = getEstimatedReadingTime({ content: page.content, lang })
---

<Layout {...metadata}>
  <Breadcrumbs data={breadcrumbs} />
  <article class="content max-width">
    <TableOfContent title={t.tableOfContents} headings={page.headings} />
    <section class="content-body">
      <Hero {...page} readingTime={readingTime} />
      <ContentPT value={page.content} />
    </section>
  </article>
</Layout>

<style lang="scss">
  .content {
    display: grid;
    padding: clamp(1rem, calc(1.5vw / 0.48), 1.5rem) 0 4rem;
    grid-template-columns: 20.6875rem 1fr;
    column-gap: clamp(2rem, calc(4.5vw / 0.48), 7.5rem);

    .content-body {
      max-width: 40.9375rem;
      justify-self: start;
    }
  }
</style>
