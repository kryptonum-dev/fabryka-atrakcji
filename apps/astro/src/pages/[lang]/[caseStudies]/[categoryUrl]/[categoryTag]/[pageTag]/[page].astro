---
export const prerender = true

import { type Language, LANGUAGES } from '@/src/global/languages'
import CaseStudies, { fetchData, ITEMS_PER_PAGE } from '@/src/templates/CaseStudies.astro'
import sanityFetch from '@/src/utils/sanity.fetch'

export async function getStaticPaths() {
  const translation = {
    pl: {
      caseStudies: 'realizacje',
      categoryUrl: 'kategoria',
      category: 'kategoria',
      page: 'strona',
    },
    en: {
      caseStudies: 'case-studies',
      categoryUrl: 'category',
      category: 'category',
      page: 'page',
    },
  }
  const langCategories = await Promise.all(
    LANGUAGES.map(async (lang) => {
      return await sanityFetch<{ lang: Language; slug: string; postCount: number }[]>({
        query: `
      *[_type == 'CaseStudyCategory_Collection' && language == $language][] {
        "lang": language,
        "slug": slug.current,
        "postCount": count(*[_type == "CaseStudy_Collection" && references(^._id) && defined(category)]),
      }
    `,
        params: { language: lang },
      })
    })
  )
  return langCategories.flat().flatMap(({ slug, lang, postCount }) => {
    const totalPages = Math.ceil(postCount / ITEMS_PER_PAGE)
    return Array.from({ length: totalPages - 1 }, (_, i) => ({
      params: {
        lang: lang,
        caseStudies: translation[lang].caseStudies,
        categoryUrl: translation[lang].categoryUrl,
        categoryTag: slug.split('/')[4],
        pageTag: translation[lang].page,
        page: (i + 2).toString(),
      },
    }))
  })
}

const lang = Astro.params.lang as Language
const category = Astro.params.categoryTag || null
const page = Number(Astro.params.page) || 1
const data = await fetchData(lang, category, page)

if (!LANGUAGES.includes(lang) || !data) return Astro.rewrite('/404')
---

<CaseStudies {...data} currentPage={page} currentCategory={category} />
